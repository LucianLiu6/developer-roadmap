import { l as createComponent, m as renderTemplate, n as maybeRenderHead, u as unescapeHTML } from './astro/server_DJHfVkFr.mjs';
import 'kleur/colors';
import 'clsx';

const html$J = "<p>Asymptotic notation is the standard way of measuring the time and space that an algorithm will consume as the input grows. In one of my last guides, I covered “Big-O notation” and a lot of you asked for a similar one for Asymptotic notation. You can find the <a href=\"/guides/big-o-notation\">previous guide here</a>.</p>\n<p><a href=\"/guides/asymptotic-notation.png\"><img src=\"/guides/asymptotic-notation.png\" alt=\"Asymptotic Notation\"></a></p>";

				const frontmatter$J = {"title":"Asymptotic Notation","description":"Learn the basics of measuring the time and space complexity of algorithms","authorId":"kamran","seo":{"title":"Asymptotic Notation - roadmap.sh","description":"Learn the basics of measuring the time and space complexity of algorithms"},"isNew":false,"type":"visual","date":"2021-04-03T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$J = "/workspaces/developer-roadmap/src/data/guides/asymptotic-notation.md";
				const url$J = undefined;
				function rawContent$J() {
					return "\nAsymptotic notation is the standard way of measuring the time and space that an algorithm will consume as the input grows. In one of my last guides, I covered \"Big-O notation\" and a lot of you asked for a similar one for Asymptotic notation. You can find the [previous guide here](/guides/big-o-notation).\n\n[![Asymptotic Notation](/guides/asymptotic-notation.png)](/guides/asymptotic-notation.png)\n";
				}
				function compiledContent$J() {
					return html$J;
				}
				function getHeadings$J() {
					return [];
				}

				const Content$J = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$J;
					content.file = file$J;
					content.url = url$J;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$J)}`;
				});

const __vite_glob_0_0 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$J,
	compiledContent: compiledContent$J,
	default: Content$J,
	file: file$J,
	frontmatter: frontmatter$J,
	getHeadings: getHeadings$J,
	rawContent: rawContent$J,
	url: url$J
}, Symbol.toStringTag, { value: 'Module' }));

const html$I = "<p><a href=\"/guides/avoid-render-blocking-javascript-with-async-defer.png\"><img src=\"/guides/avoid-render-blocking-javascript-with-async-defer.png\" alt=\"Avoid Render Blocking with Async and Defer\"></a></p>";

				const frontmatter$I = {"title":"Async and Defer Script Loading","description":"Learn how to avoid render blocking JavaScript using async and defer scripts.","authorId":"kamran","seo":{"title":"Async and Defer Script Loading - roadmap.sh","description":"Learn how to avoid render blocking JavaScript using async and defer scripts."},"isNew":false,"type":"visual","date":"2021-09-10T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$I = "/workspaces/developer-roadmap/src/data/guides/avoid-render-blocking-javascript-with-async-defer.md";
				const url$I = undefined;
				function rawContent$I() {
					return "\n[![Avoid Render Blocking with Async and Defer](/guides/avoid-render-blocking-javascript-with-async-defer.png)](/guides/avoid-render-blocking-javascript-with-async-defer.png)\n";
				}
				function compiledContent$I() {
					return html$I;
				}
				function getHeadings$I() {
					return [];
				}

				const Content$I = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$I;
					content.file = file$I;
					content.url = url$I;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$I)}`;
				});

const __vite_glob_0_1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$I,
	compiledContent: compiledContent$I,
	default: Content$I,
	file: file$I,
	frontmatter: frontmatter$I,
	getHeadings: getHeadings$I,
	rawContent: rawContent$I,
	url: url$I
}, Symbol.toStringTag, { value: 'Module' }));

const html$H = "<p>Whether your goal is to become a backend developer or to stay relevant as one, the goal itself requires adopting an eternal student mindset. The ever-evolving web development space demands continuous learning, regardless of the programming language you use. New frameworks, libraries, and methodologies emerge regularly, offering different solutions to old problems. To remain relevant as a <a href=\"/backend\">backend developer</a>, you’ll have to stay updated by honing your core skills.</p>\n<p>In this article, we’ll cover the following set of backend developer skills we recommend you aim for:</p>\n<ul>\n<li>Keeping an eye on core and new backend programming languages</li>\n<li>Understanding the basics of software design and architecture</li>\n<li>Understanding databases and how to use them</li>\n<li>API development</li>\n<li>The basics of version control</li>\n<li>Testing and debugging</li>\n<li>CI/CD and DevOps fundamentals</li>\n<li>Soft skills</li>\n</ul>\n<p>So, let’s get going!</p>\n<h2 id=\"understanding-backend-development\">Understanding Backend Development</h2>\n<p>Before we move on and start discussing the different backend development skills you should focus on, let’s first understand what a backend developer is. After all, if you’re looking to actually become a backend developer, you’ll need this.</p>\n<p>A backend developer focuses entirely on writing business logic for an application and much of the supporting logic as well.</p>\n<p>That said, there might be applications where the business logic is split into the frontend and the backend. However, while the frontend dev might have to share their time between UI code and business logic, the backend dev will focus most of their time on core business logic. That’s the main difference between the two.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709056806118.png\" alt=\"UI vs Backend\"></p>\n<p>In the above image, you can see how there is a lot more behind the curtain than just the UI when it comes to web applications. In this case, a “simple” log-in form needs a backend to contain its core business logic.</p>\n<p>Let’s now look at the most in-demand backend developer skills you should focus on in backend development.</p>\n<h2 id=\"proficiency-in-core-and-emerging-programming-languages\">Proficiency in Core and Emerging Programming Languages</h2>\n<p>One of the most basic skills you should focus on as a backend developer is on identifying key programming languages to learn (or at least keep an eye out for).</p>\n<p>There are some essential backend languages that the industry has adopted as de facto standards. This means most new projects are usually coded using one (or multiple) of these programming languages.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058292005.png\" alt=\"core-languages\"></p>\n<p>The most common names you should look out for are:</p>\n<ul>\n<li><strong>JavaScript (or any of its variants, such as TypeScript).</strong> This is a very common option because it’s also the language used by frontend developers, thus making it easier for developers to work on both sides of the same project.</li>\n<li><strong>Python.</strong> While a very common option for other types of projects (such as data processing and <a href=\"https://roadmap.sh/ai-data-scientist\" target=\"_blank\">data science</a>), it’s still very popular in the web development world. Python has many good qualities and supporting frameworks that make it a very easy-to-pick-up option for coding backend systems.</li>\n<li><strong>Go (A.K.A Golang).</strong> This programming language was developed by Google. It was designed with simplicity, efficiency, and concurrency in mind. That’s made it gain popularity in the backend development space, making it an interesting option for projects that prioritize performance and concurrency.</li>\n<li><strong>Java.</strong> One of the most common alternatives for enterprise solutions, Java, has been constantly evolving since its first release back in 1995. All that time making its way into big enterprises that trust its robustness and ever-growing community of developers. While not the easiest language to learn, it’s definitely up there in the top 10 most popular <a href=\"https://roadmap.sh/backend/languages\" target=\"_blank\">backend languages</a> (according to <a href=\"https://survey.stackoverflow.co/2023/#technology-most-popular-technologies\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">StackOverflow’s 2023 Developer survey</a>).</li>\n</ul>\n<p>While there are other options, the ones mentioned above, from the backend point of view, are some of the most relevant languages to pay attention to. Here are the top 10 most popular ones amongst professional developers (screenshot taken from SO’s survey of 2023):</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057007054.png\" alt=\"Stackoverflow Survey Result\"></p>\n<h3 id=\"keeping-an-eye-on-the-rising-stars\">Keeping an eye on the rising stars</h3>\n<p>If working with at least one of the most common backend languages was important, understanding what are the rising technologies in the backend world is just as crucial.</p>\n<p>You won’t see a new programming language being released every month. However, in the span of a few years, you might see the release of several, and out of those, some might stick long enough to become new standards.</p>\n<p>For example, take a look at the period between 2012 and 2015; in just 3 years, 9 programming languages were released, out of which most of them are being used to this day.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058257292.png\" alt=\"Famous Languages\"></p>\n<ul>\n<li>In 2012, we got Julia, Elm, Go, and TypeScript.</li>\n<li>In 2013, we got Dart</li>\n<li>In 2014, we got Swift, Hack, and Crystal</li>\n<li>And in 2015, we got Rust.</li>\n</ul>\n<p>Some of those languages are very relevant to this day, such as TypeScript and Rust, while others, such as Hack and Crystal, might be known to only a few in very niche sectors.</p>\n<p>Of course, it’s impossible to predict which programming language will become a standard. However, the skill that you need to hone is that of keeping an eye on the industry to spot new and emerging trends.</p>\n<h3 id=\"the-importance-of-supporting-frameworks\">The importance of supporting frameworks</h3>\n<p>Frameworks for a specific programming language do change a lot faster than the language itself, though.</p>\n<p>Frameworks are there to provide you with a simplified gateway into the functionalities that you’d normally need for common tasks. For example, in the context of backend web development, frameworks usually take care of:</p>\n<ul>\n<li><strong>Parsing HTTP requests</strong> and turning them into objects you can easily interact with (so you don’t have to learn how the HTTP protocol works).</li>\n<li><strong>Abstracting concepts,</strong> such as a request or a response, into objects and functions that you can reason about at a higher level. This gives you an easier time thinking about how to solve a problem using these tools.</li>\n<li><strong>Accessing data becomes a lot easier when there are abstractions.</strong> Some frameworks provide what is known as an ORM (Object Relational Mapping). Through ORM, you can interact with databases without having to think about writing SQL queries or even database schemas.</li>\n<li>And many more.</li>\n</ul>\n<p>Frameworks are an essential aspect of the work you’ll do as a backend developer, which is why you should not neglect them. Of course, learning and mastering every single framework out there is impossible. Instead, learn to keep an eye out in the industry and see what are the most common frameworks, and focus on one (or two) of them.</p>\n<h2 id=\"software-design-and-architecture\">Software Design and Architecture</h2>\n<p>Coding is not just about writing code.</p>\n<p>While that statement might be a bit confusing, the truth is there is a lot of architecture involved in software development (both in frontend and backend development). Sometimes, working on these aspects of a system is the job of a specific role called “architect.” However, for backend systems, it’s not uncommon for backend developers to also be involved in architecture conversations and decisions. You’re helping design the underlying backend infrastructure, after all.</p>\n<p>The following diagram shows an example of what a very simple system’s architecture might look like:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057266440.png\" alt=\"Simple System Architecture\"></p>\n<p>While the example is oversimplified, it gives you an idea of what the practice of “architecting a system” is.</p>\n<p>Essentially, architecting a system means coming up with concepts that represent different aspects of the solution and then deciding how you want to make them interact with each other.</p>\n<p>Why is architecture so important here? Because it gives you properties such as code encapsulation, separation of concerns, reusability, and even scalability as a byproduct of the architecture itself.</p>\n<p>Let’s take a quick look at some of the most common architectures used for creating backend systems.</p>\n<h3 id=\"most-common-backend-architectures\">Most common backend architectures</h3>\n<p>There are too many different architectural styles and patterns to cover them all inside a single article, but let’s just look at some of the most common ones and how they can help you while working on your backend system.</p>\n<ul>\n<li><strong>Monolithic architecture:</strong> In a monolithic architecture, the entire application is built as a single, tightly coupled unit. All components (frontend, backend, database, etc) are part of the same codebase. This is a great first architecture because it feels very natural to develop under, and if your project is not going to grow out of proportion, then you will probably not hit any of the cons.</li>\n<li><strong>Microservice-based architecture:</strong> The application is divided into small, independent services, each responsible for a specific business capability. These services communicate through APIs.</li>\n<li><strong>Service-Oriented Architecture:</strong> Similar to microservices, a service-oriented architecture splits functionality into individual services. The main difference is that these services aren’t as granular as a microservice, so they might incorporate functionalities related to different business entities.</li>\n<li><strong>Event-driven architecture:</strong> With this architecture, each system (or service) responds to events (e.g., user actions and messages from other services) by triggering actions or processes. All services communicate with each other indirectly through an event bus (also known as a “message bus”), so it removes the possibility of having two or more services coupled with each other (meaning that they can’t be treated individually).</li>\n<li><strong>Serverless Architecture:</strong> Also known as Function as a Service (FaaS), serverless architecture allows you to focus on writing code without worrying about the server where they’ll run. Functions are executed in response to events without the need for provisioning or managing servers (this is done FOR you automatically).</li>\n<li><strong>Microkernel architecture:</strong> This architecture lets you build the core, essential functionality into a small microkernel and have the rest of the features built as plugins that can be added, removed or exchanged easily.</li>\n</ul>\n<p>And if you want to know more about the patterns and principles mentioned here, please check out the <a href=\"https://roadmap.sh/software-design-architecture\" target=\"_blank\">Software Design and Architecture roadmap</a>.</p>\n<h2 id=\"mastery-of-database-management-systems\">Mastery of Database Management Systems</h2>\n<p>As a backend developer, you will undoubtedly have to deal with database administration in your daily tasks. They are the industry standard for storing persistent data.</p>\n<p>Because of that, it’s important to understand that you should be aware of two main categories of databases: SQL databases and NoSQL databases.</p>\n<h3 id=\"sql-databases\">SQL databases</h3>\n<p>These are the standard structured databases (A.K.A relational databases) where you need to define the schema for your data (essentially the data structures you’re dealing with), and then you’ll use a language called <a href=\"https://roadmap.sh/sql\" target=\"_blank\">SQL (Structured Query Language)</a> to interact with the data inside it. Most backend developers will interact with SQL databases at some point in their career, as this is the most common type of database.</p>\n<h3 id=\"nosql-databases\">NoSQL databases</h3>\n<p>As the name implies, these are not your standard SQL databases; in fact, within this category, there are columnar databases, document-based ones (such as MongoDB), key-value-based ones (like Redis), and more. They don’t use predefined data structures, giving you more flexibility and control over what you can store and how you store it. Backend developers will deal with only a handful of these, as there are many different sub-types, and more are created every year.</p>\n<p>Some examples of these databases are:</p>\n<ul>\n<li>MongoDB, a document-based database (see here a mongoDB roadmap if you’re interested).</li>\n<li>Redis, an in-memory key-value pair database.</li>\n<li>Neo4J, a graph database.</li>\n<li>ElasticSearch, a document-based search engine.</li>\n</ul>\n<p>In the end, the decision between SQL and NoSQL is about trade-offs and figuring out what works best for your particular use case.</p>\n<h2 id=\"api-development-capabilities\">API Development Capabilities</h2>\n<p>Application Programming Interfaces (APIs) are everywhere. They power the backend of almost all major systems out there (according to a <a href=\"https://www.oreilly.com/pub/pr/3307\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">study conducted by O’Reilly in 2020</a>, 77% of companies were using microservices/APIs).</p>\n<p>That is to say, if you’re thinking about becoming a backend developer, you will be coding APIs/microservices. This is why understanding the basics of them is crucial to ensuring your relevance in the field.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057608824.png\" alt=\"System vs External System\"></p>\n<p>The above diagram explains how APIs interact with whatever you might be building.</p>\n<p>Now, if you’re inside the “<strong>The System</strong>” box, then you need to understand how to interact with these APIs using the right tools. If you’re inside the “<strong>External System</strong>” box, then you need to understand the type of standards these APIs need to follow and how to implement them.</p>\n<p>Don’t worry though, for both situations, there are always frameworks and libraries you can use to simplify your task and ensure you’re following the proper industry standards.</p>\n<h3 id=\"what-are-the-most-common-api-types\">What are the most common API types?</h3>\n<p>The most common types of APIs used in the industry currently are REST and GraphQL.</p>\n<p>As a backend developer, it’s not mandatory that you master both of these types, but it’s definitely recommended that you have some practical experience with one of them.</p>\n<ul>\n<li><strong>RESTful APIs.</strong> These are APIs that work over HTTP and make extensive use of the HTTP Verbs to give meaning to each request. They’ve been the most popular type of API until recently, so there are still a lot of projects and teams that make use of it.</li>\n<li><strong>GraphQL.</strong> GraphQL APIs operate over HTTP as well, leveraging the HTTP protocol and its verbs. In contrast to the conventional RESTful APIs, GraphQL has emerged as a powerful alternative, offering a flexible and efficient approach to data querying and manipulation. GraphQL allows clients to request only the data they need, providing a more tailored and efficient interaction between clients and servers.</li>\n</ul>\n<p>Is there one better than the other? There is no easy way to answer that question as both are capable of doing everything you’d need. It’s more about your particular requirements and the preferences of your dev team.</p>\n<h2 id=\"version-control-savvy\">Version Control Savvy</h2>\n<p>One mandatory skill that all backend developers should work on (actually, all developers, in general) is version control, or in other words, understanding and being familiar with version control systems.</p>\n<p>Essentially, you’ll want to know how to use the version control tool that everyone else is using. The industry standard at the moment of writing this is <a href=\"https://git-scm.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Git</a>, while there might be some teams using other (older) tools, as long as you understand the current one, you’ll be in good shape.</p>\n<h3 id=\"what-is-version-control\">What is version control?</h3>\n<p>Version control references the ability for you and other developers to share code with each other while you’re working on the same files.</p>\n<p>While Git is the industry standard at the moment, GitHub has created such a popular platform around Git, that it almost makes it mandatory to learn about.</p>\n<p>So go ahead and create an account, browse what others are doing, and upload your own personal projects. It’s definitely a great way to learn.</p>\n<h3 id=\"what-should-you-learn-about-git\">What should you learn about Git?</h3>\n<p>If you’re picking up Git as your version control system of choice, there are two main areas you should be focusing on.</p>\n<ul>\n<li><strong>The basics.</strong> Clearly understanding how Git works and the basic commands to add, push and pull changes. You should aim to learn enough about them to feel comfortable using them on your day-to-day (because you will).</li>\n<li><strong>Branching strategies.</strong> Sadly, using Git alone is not enough. While through Git you can already start versioning your code, when the project is complex enough and your team big enough, the tool alone will not be enough. You’ll have to come up with <a href=\"https://learngitbranching.js.org/?locale=es_ES\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">branching strategies</a> to organize the whole team’s workflow.</li>\n</ul>\n<p>Keep in mind that Git and Git branching are not trivial topics, and they’ll take a while to master. So, while you should give yourself time to learn about them, also make sure you check with others (or use tools such as ChatGPT) to validate your commands before using them. Remember, a wrong Git command or a wrong workflow can cause major problems within a project, especially if there are many developers working on the same codebase.</p>\n<h2 id=\"testing\">Testing</h2>\n<p>Understanding both what testing is and the importance of it within the backend development workflow is crucial for all developers, and one of the mandatory backend developer skills to focus on.</p>\n<p>Testing is the development process of making sure your code works in a way that doesn’t involve you manually testing every feature but rather using tools that allow you to test and reproduce any problems that can be found programmatically.</p>\n<p>This, of course, helps to remove potential human error from the equation when testing big systems and to increase the speed at which these tests can be done (think seconds vs hours of you doing it manually).</p>\n<p>Testing is a far more complex discipline than I can describe here. Just know that there are many different ways to test a system, and all backend developers should be aware of the following:</p>\n<ul>\n<li><strong>Unit testing:</strong> This is the most common way of doing code testing. You’ll write tests using a testing framework for every publicly available function/method in your code. This way you’re making sure every piece of code that can be used is tested and performs according to plan. Running these tests is usually quite fast, so you’ll be doing it before every commit (usually).</li>\n<li><strong>Integration testing:</strong> If you’re building a system that consists of multiple independent systems working together (think, for instance, a microservice-based architecture), then testing each individual part is not enough. You also have to make sure systems that should interact with each other do so correctly. This is where integration tests come into play.</li>\n<li><strong>End-to-end testing (E2E):</strong> These tests are similar to integration tests, but they also include the UI of the system. There are tools you can use to automate actions in your UI as if a real user were performing them and then checking the result. For example, clicking on a log-out button and checking if you’re later redirected to the log-in screen. This flow would involve the backend performing some actions that result in the user being logged out.</li>\n<li><strong>Load testing:</strong> While not exactly the same process as with the previous test types, load testing is great for backend systems because it helps you determine if your backend is ready to deal with high amounts of traffic.</li>\n</ul>\n<p>You can think of the list in graphical format as the following diagram:</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057834295.png\" alt=\"Testing types\"></p>\n<p>If you’re just getting started with testing, I’d recommend focusing only on unit testing for the time being. Once you have a grasp on it, start moving out following the above diagram and slowly move into the other types as you progress.</p>\n<h2 id=\"cicd-and-devops-familiarity\">CI/CD and DevOps Familiarity</h2>\n<p>As a backend developer, your code will be constantly deployed, either into cloud environments or perhaps even into normal, on-premise servers. The point is that what you build will run through CI/CD (Continuous Integration and Continuous Deployment) processes.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058122541.png\" alt=\"ci-cd\"></p>\n<p>These processes will automatically test it (Continuous Integration) and automatically deploy it (if all tests go well). As a backend developer, you’re not usually expected to know and understand how to configure these processes; however, it’s important that you know about them.</p>\n<p>DevOps is yet another tangential area to that of a backend developer. When teams are small enough, backend devs might be “gently pushed” into tasks such as configuring CI/CD pipelines, setting up servers, and more. These tasks are usually performed by dedicated professionals with the role of DevOps. Their specialty is automation, making the deployment process efficient and ensuring that everything runs smoothly in the real-world server environment. They play a crucial role in maintaining the reliability and performance of applications and websites.</p>\n<p>So, while they’re not strictly the responsibilities of backend developers, they’re close enough to the role’s day-to-day that it would be a good idea to learn about them. If you’re interested in learning more about DevOps, check out <a href=\"https://roadmap.sh/devops\" target=\"_blank\">our DevOps roadmap</a> containing all the key topics you should learn about if you want to become a DevOps engineer.</p>\n<h2 id=\"soft-skills\">Soft Skills</h2>\n<p>Finally, the last set of backend developer skills you should focus on are, actually, not technical skills, nor are they exclusively useful for backend developers. These are skills that every developer should work on during their career: soft skills.</p>\n<h3 id=\"improving-communication\">Improving communication</h3>\n<p>The ability to communicate with others, both technical and non-technical people, is crucial in any developer’s career.</p>\n<p>For backend developers, it’s especially important because communicating their work and the effects of it is definitely harder than other roles, such as frontend developers who can actually showcase what they’re building.</p>\n<p>As a backend developer, you’ll be able to better explain problems or blockers to your colleagues, you’ll be able to perform requirement gathering much more effectively, and you’ll even improve your own problem-solving skills by being better at articulating the problems and potential solutions to yourself.</p>\n<h3 id=\"critical-thinking\">Critical thinking</h3>\n<p>Honing your critical thinking as a backend developer will help your ability to analyze complex problems, identify patterns much faster, and come up with innovative solutions to the problems you’re facing.</p>\n<p>Pushing the limits of your critical thinking skills will also foster a more systematic and strategic approach to coding and architecting robust and efficient solutions.</p>\n<p>In other words, it’ll make you a better and more efficient coder. And who doesn’t want that?</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>To summarize, if you expect to become a backend developer or to grow in the area of backend development:</p>\n<ul>\n<li>Keep an eye on the industry to understand what’s the status quo and what’s new and hot.</li>\n<li>Understand the basics of software design and architecture.</li>\n<li>Look into relational databases and NoSQL databases as well; they’re both important.</li>\n<li>Learn how to build and use APIs; they’ll be part of almost every project you work on.</li>\n<li>Remember, testing might look like it’s not mandatory, but it’s definitely a standard practice when it comes to backend development.</li>\n<li>CI/CD and DevOps are practices you’ll be involved with, either directly or indirectly, so learn about them.</li>\n<li>Soft skills are just as important as technical skills if you expect to grow in your career.</li>\n</ul>\n<p>That said, do not take this list as the ultimate roadmap but rather as a starting point. If you’re willing to take your backend developer career to the next level, push yourself out of your comfort zone and pursue the skills listed here and the ones listed in this detailed <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend development roadmap</a>.</p>\n<p>Remember, constant learning is the only absolute truth in the software development world (this is true for backend developers, too). If you keep your skillset updated with the latest trends, you’ll remain adaptable and effective as a backend developer.</p>";

				const frontmatter$H = {"title":"8 In-Demand Backend Developer Skills to Master","description":"Learn what the essential backend skills you should master to advance in your career.","authorId":"fernando","excludedBySlug":"/backend/developer-skills","seo":{"title":"8 In-Demand Backend Developer Skills to Master","description":"Learn what the essential backend developer skills are that you should learn and master to advance in your career.","ogImageUrl":"https://assets.roadmap.sh/guest/backend-developer-skills-30wwu.jpg"},"isNew":false,"type":"textual","date":"2024-02-27T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$H = "/workspaces/developer-roadmap/src/data/guides/backend-developer-skills.md";
				const url$H = undefined;
				function rawContent$H() {
					return "\nWhether your goal is to become a backend developer or to stay relevant as one, the goal itself requires adopting an eternal student mindset. The ever-evolving web development space demands continuous learning, regardless of the programming language you use. New frameworks, libraries, and methodologies emerge regularly, offering different solutions to old problems. To remain relevant as a [backend developer](/backend), you’ll have to stay updated by honing your core skills.\n\nIn this article, we’ll cover the following set of backend developer skills we recommend you aim for:\n\n- Keeping an eye on core and new backend programming languages\n- Understanding the basics of software design and architecture\n- Understanding databases and how to use them\n- API development\n- The basics of version control\n- Testing and debugging\n- CI/CD and DevOps fundamentals\n- Soft skills\n\nSo, let's get going!\n\n## Understanding Backend Development\n\nBefore we move on and start discussing the different backend development skills you should focus on, let’s first understand what a backend developer is. After all, if you’re looking to actually become a backend developer, you’ll need this.\n\nA backend developer focuses entirely on writing business logic for an application and much of the supporting logic as well.\n\nThat said, there might be applications where the business logic is split into the frontend and the backend. However, while the frontend dev might have to share their time between UI code and business logic, the backend dev will focus most of their time on core business logic. That’s the main difference between the two.\n\n![UI vs Backend](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709056806118.png)\n\nIn the above image, you can see how there is a lot more behind the curtain than just the UI when it comes to web applications. In this case, a “simple” log-in form needs a backend to contain its core business logic.\n\nLet’s now look at the most in-demand backend developer skills you should focus on in backend development.\n\n## Proficiency in Core and Emerging Programming Languages\n\nOne of the most basic skills you should focus on as a backend developer is on identifying key programming languages to learn (or at least keep an eye out for).\n\nThere are some essential backend languages that the industry has adopted as de facto standards. This means most new projects are usually coded using one (or multiple) of these programming languages.\n\n![core-languages](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058292005.png)\n\nThe most common names you should look out for are:\n\n- **JavaScript (or any of its variants, such as TypeScript).** This is a very common option because it’s also the language used by frontend developers, thus making it easier for developers to work on both sides of the same project.\n- **Python.** While a very common option for other types of projects (such as data processing and [data science](https://roadmap.sh/ai-data-scientist)), it’s still very popular in the web development world. Python has many good qualities and supporting frameworks that make it a very easy-to-pick-up option for coding backend systems.\n- **Go (A.K.A Golang).** This programming language was developed by Google. It was designed with simplicity, efficiency, and concurrency in mind. That’s made it gain popularity in the backend development space, making it an interesting option for projects that prioritize performance and concurrency.\n- **Java.** One of the most common alternatives for enterprise solutions, Java, has been constantly evolving since its first release back in 1995. All that time making its way into big enterprises that trust its robustness and ever-growing community of developers. While not the easiest language to learn, it’s definitely up there in the top 10 most popular [backend languages](https://roadmap.sh/backend/languages) (according to [StackOverflow’s 2023 Developer survey](https://survey.stackoverflow.co/2023/#technology-most-popular-technologies)).\n\nWhile there are other options, the ones mentioned above, from the backend point of view, are some of the most relevant languages to pay attention to. Here are the top 10 most popular ones amongst professional developers (screenshot taken from SO’s survey of 2023):\n\n![Stackoverflow Survey Result](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057007054.png)\n\n### Keeping an eye on the rising stars\n\nIf working with at least one of the most common backend languages was important, understanding what are the rising technologies in the backend world is just as crucial.\n\nYou won’t see a new programming language being released every month. However, in the span of a few years, you might see the release of several, and out of those, some might stick long enough to become new standards.\n\nFor example, take a look at the period between 2012 and 2015; in just 3 years, 9 programming languages were released, out of which most of them are being used to this day.\n\n![Famous Languages](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058257292.png)\n\n- In 2012, we got Julia, Elm, Go, and TypeScript.\n- In 2013, we got Dart\n- In 2014, we got Swift, Hack, and Crystal\n- And in 2015, we got Rust.\n\nSome of those languages are very relevant to this day, such as TypeScript and Rust, while others, such as Hack and Crystal, might be known to only a few in very niche sectors.\n\nOf course, it’s impossible to predict which programming language will become a standard. However, the skill that you need to hone is that of keeping an eye on the industry to spot new and emerging trends.\n\n### The importance of supporting frameworks\n\nFrameworks for a specific programming language do change a lot faster than the language itself, though.\n\nFrameworks are there to provide you with a simplified gateway into the functionalities that you’d normally need for common tasks. For example, in the context of backend web development, frameworks usually take care of:\n\n- **Parsing HTTP requests** and turning them into objects you can easily interact with (so you don’t have to learn how the HTTP protocol works).\n- **Abstracting concepts,** such as a request or a response, into objects and functions that you can reason about at a higher level. This gives you an easier time thinking about how to solve a problem using these tools.\n- **Accessing data becomes a lot easier when there are abstractions.** Some frameworks provide what is known as an ORM (Object Relational Mapping). Through ORM, you can interact with databases without having to think about writing SQL queries or even database schemas.\n- And many more.\n\nFrameworks are an essential aspect of the work you’ll do as a backend developer, which is why you should not neglect them. Of course, learning and mastering every single framework out there is impossible. Instead, learn to keep an eye out in the industry and see what are the most common frameworks, and focus on one (or two) of them.\n\n## Software Design and Architecture\n\nCoding is not just about writing code.\n\nWhile that statement might be a bit confusing, the truth is there is a lot of architecture involved in software development (both in frontend and backend development). Sometimes, working on these aspects of a system is the job of a specific role called “architect.” However, for backend systems, it’s not uncommon for backend developers to also be involved in architecture conversations and decisions. You’re helping design the underlying backend infrastructure, after all.\n\nThe following diagram shows an example of what a very simple system’s architecture might look like:\n\n![Simple System Architecture](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057266440.png)\n\nWhile the example is oversimplified, it gives you an idea of what the practice of “architecting a system” is.\n\nEssentially, architecting a system means coming up with concepts that represent different aspects of the solution and then deciding how you want to make them interact with each other.\n\nWhy is architecture so important here? Because it gives you properties such as code encapsulation, separation of concerns, reusability, and even scalability as a byproduct of the architecture itself.\n\nLet’s take a quick look at some of the most common architectures used for creating backend systems.\n\n### Most common backend architectures\n\nThere are too many different architectural styles and patterns to cover them all inside a single article, but let's just look at some of the most common ones and how they can help you while working on your backend system.\n\n- **Monolithic architecture:** In a monolithic architecture, the entire application is built as a single, tightly coupled unit. All components (frontend, backend, database, etc) are part of the same codebase. This is a great first architecture because it feels very natural to develop under, and if your project is not going to grow out of proportion, then you will probably not hit any of the cons.\n- **Microservice-based architecture:** The application is divided into small, independent services, each responsible for a specific business capability. These services communicate through APIs.\n- **Service-Oriented Architecture:** Similar to microservices, a service-oriented architecture splits functionality into individual services. The main difference is that these services aren’t as granular as a microservice, so they might incorporate functionalities related to different business entities.\n- **Event-driven architecture:** With this architecture, each system (or service) responds to events (e.g., user actions and messages from other services) by triggering actions or processes. All services communicate with each other indirectly through an event bus (also known as a “message bus”), so it removes the possibility of having two or more services coupled with each other (meaning that they can’t be treated individually).\n- **Serverless Architecture:** Also known as Function as a Service (FaaS), serverless architecture allows you to focus on writing code without worrying about the server where they’ll run. Functions are executed in response to events without the need for provisioning or managing servers (this is done FOR you automatically).\n- **Microkernel architecture:** This architecture lets you build the core, essential functionality into a small microkernel and have the rest of the features built as plugins that can be added, removed or exchanged easily.\n\nAnd if you want to know more about the patterns and principles mentioned here, please check out the [Software Design and Architecture roadmap](https://roadmap.sh/software-design-architecture).\n\n## Mastery of Database Management Systems\n\nAs a backend developer, you will undoubtedly have to deal with database administration in your daily tasks. They are the industry standard for storing persistent data.\n\nBecause of that, it’s important to understand that you should be aware of two main categories of databases: SQL databases and NoSQL databases.\n\n### SQL databases\n\nThese are the standard structured databases (A.K.A relational databases) where you need to define the schema for your data (essentially the data structures you’re dealing with), and then you’ll use a language called [SQL (Structured Query Language)](https://roadmap.sh/sql) to interact with the data inside it. Most backend developers will interact with SQL databases at some point in their career, as this is the most common type of database.\n\n### NoSQL databases\n\nAs the name implies, these are not your standard SQL databases; in fact, within this category, there are columnar databases, document-based ones (such as MongoDB), key-value-based ones (like Redis), and more. They don’t use predefined data structures, giving you more flexibility and control over what you can store and how you store it. Backend developers will deal with only a handful of these, as there are many different sub-types, and more are created every year.\n\nSome examples of these databases are:\n\n- MongoDB, a document-based database (see here a mongoDB roadmap if you’re interested).\n- Redis, an in-memory key-value pair database.\n- Neo4J, a graph database.\n- ElasticSearch, a document-based search engine.\n\nIn the end, the decision between SQL and NoSQL is about trade-offs and figuring out what works best for your particular use case.\n\n## API Development Capabilities\n\nApplication Programming Interfaces (APIs) are everywhere. They power the backend of almost all major systems out there (according to a [study conducted by O’Reilly in 2020](https://www.oreilly.com/pub/pr/3307), 77% of companies were using microservices/APIs).\n\nThat is to say, if you’re thinking about becoming a backend developer, you will be coding APIs/microservices. This is why understanding the basics of them is crucial to ensuring your relevance in the field.\n\n![System vs External System](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057608824.png)\n\nThe above diagram explains how APIs interact with whatever you might be building.\n\nNow, if you’re inside the “**The System**” box, then you need to understand how to interact with these APIs using the right tools. If you’re inside the “**External System**” box, then you need to understand the type of standards these APIs need to follow and how to implement them.\n\nDon’t worry though, for both situations, there are always frameworks and libraries you can use to simplify your task and ensure you’re following the proper industry standards.\n\n### What are the most common API types?\n\nThe most common types of APIs used in the industry currently are REST and GraphQL.\n\nAs a backend developer, it’s not mandatory that you master both of these types, but it’s definitely recommended that you have some practical experience with one of them.\n\n- **RESTful APIs.** These are APIs that work over HTTP and make extensive use of the HTTP Verbs to give meaning to each request. They’ve been the most popular type of API until recently, so there are still a lot of projects and teams that make use of it.\n- **GraphQL.** GraphQL APIs operate over HTTP as well, leveraging the HTTP protocol and its verbs. In contrast to the conventional RESTful APIs, GraphQL has emerged as a powerful alternative, offering a flexible and efficient approach to data querying and manipulation. GraphQL allows clients to request only the data they need, providing a more tailored and efficient interaction between clients and servers.\n\nIs there one better than the other? There is no easy way to answer that question as both are capable of doing everything you’d need. It’s more about your particular requirements and the preferences of your dev team.\n\n## Version Control Savvy\n\nOne mandatory skill that all backend developers should work on (actually, all developers, in general) is version control, or in other words, understanding and being familiar with version control systems.\n\nEssentially, you’ll want to know how to use the version control tool that everyone else is using. The industry standard at the moment of writing this is [Git](https://git-scm.com/), while there might be some teams using other (older) tools, as long as you understand the current one, you’ll be in good shape.\n\n### What is version control?\n\nVersion control references the ability for you and other developers to share code with each other while you’re working on the same files.\n\nWhile Git is the industry standard at the moment, GitHub has created such a popular platform around Git, that it almost makes it mandatory to learn about.\n\nSo go ahead and create an account, browse what others are doing, and upload your own personal projects. It’s definitely a great way to learn.\n\n### What should you learn about Git?\n\nIf you’re picking up Git as your version control system of choice, there are two main areas you should be focusing on.\n\n- **The basics.** Clearly understanding how Git works and the basic commands to add, push and pull changes. You should aim to learn enough about them to feel comfortable using them on your day-to-day (because you will).\n- **Branching strategies.** Sadly, using Git alone is not enough. While through Git you can already start versioning your code, when the project is complex enough and your team big enough, the tool alone will not be enough. You’ll have to come up with [branching strategies](https://learngitbranching.js.org/?locale=es_ES) to organize the whole team’s workflow.\n\nKeep in mind that Git and Git branching are not trivial topics, and they’ll take a while to master. So, while you should give yourself time to learn about them, also make sure you check with others (or use tools such as ChatGPT) to validate your commands before using them. Remember, a wrong Git command or a wrong workflow can cause major problems within a project, especially if there are many developers working on the same codebase.\n\n## Testing\n\nUnderstanding both what testing is and the importance of it within the backend development workflow is crucial for all developers, and one of the mandatory backend developer skills to focus on.\n\nTesting is the development process of making sure your code works in a way that doesn’t involve you manually testing every feature but rather using tools that allow you to test and reproduce any problems that can be found programmatically.\n\nThis, of course, helps to remove potential human error from the equation when testing big systems and to increase the speed at which these tests can be done (think seconds vs hours of you doing it manually).\n\nTesting is a far more complex discipline than I can describe here. Just know that there are many different ways to test a system, and all backend developers should be aware of the following:\n\n- **Unit testing:** This is the most common way of doing code testing. You’ll write tests using a testing framework for every publicly available function/method in your code. This way you’re making sure every piece of code that can be used is tested and performs according to plan. Running these tests is usually quite fast, so you’ll be doing it before every commit (usually).\n- **Integration testing:** If you’re building a system that consists of multiple independent systems working together (think, for instance, a microservice-based architecture), then testing each individual part is not enough. You also have to make sure systems that should interact with each other do so correctly. This is where integration tests come into play.\n- **End-to-end testing (E2E):** These tests are similar to integration tests, but they also include the UI of the system. There are tools you can use to automate actions in your UI as if a real user were performing them and then checking the result. For example, clicking on a log-out button and checking if you’re later redirected to the log-in screen. This flow would involve the backend performing some actions that result in the user being logged out.\n- **Load testing:** While not exactly the same process as with the previous test types, load testing is great for backend systems because it helps you determine if your backend is ready to deal with high amounts of traffic.\n\nYou can think of the list in graphical format as the following diagram:\n\n![Testing types](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709057834295.png)\n\nIf you’re just getting started with testing, I’d recommend focusing only on unit testing for the time being. Once you have a grasp on it, start moving out following the above diagram and slowly move into the other types as you progress.\n\n## CI/CD and DevOps Familiarity\n\nAs a backend developer, your code will be constantly deployed, either into cloud environments or perhaps even into normal, on-premise servers. The point is that what you build will run through CI/CD (Continuous Integration and Continuous Deployment) processes.\n\n![ci-cd](https://assets.roadmap.sh/guest/6529303b545cb53d4aa730ca_1709058122541.png)\n\nThese processes will automatically test it (Continuous Integration) and automatically deploy it (if all tests go well). As a backend developer, you’re not usually expected to know and understand how to configure these processes; however, it’s important that you know about them.\n\nDevOps is yet another tangential area to that of a backend developer. When teams are small enough, backend devs might be “gently pushed” into tasks such as configuring CI/CD pipelines, setting up servers, and more. These tasks are usually performed by dedicated professionals with the role of DevOps. Their specialty is automation, making the deployment process efficient and ensuring that everything runs smoothly in the real-world server environment. They play a crucial role in maintaining the reliability and performance of applications and websites.\n\nSo, while they’re not strictly the responsibilities of backend developers, they’re close enough to the role’s day-to-day that it would be a good idea to learn about them. If you’re interested in learning more about DevOps, check out [our DevOps roadmap](https://roadmap.sh/devops) containing all the key topics you should learn about if you want to become a DevOps engineer.\n\n## Soft Skills\n\nFinally, the last set of backend developer skills you should focus on are, actually, not technical skills, nor are they exclusively useful for backend developers. These are skills that every developer should work on during their career: soft skills.\n\n### Improving communication\n\nThe ability to communicate with others, both technical and non-technical people, is crucial in any developer's career.\n\nFor backend developers, it’s especially important because communicating their work and the effects of it is definitely harder than other roles, such as frontend developers who can actually showcase what they’re building.\n\nAs a backend developer, you’ll be able to better explain problems or blockers to your colleagues, you’ll be able to perform requirement gathering much more effectively, and you’ll even improve your own problem-solving skills by being better at articulating the problems and potential solutions to yourself.\n\n### Critical thinking\n\nHoning your critical thinking as a backend developer will help your ability to analyze complex problems, identify patterns much faster, and come up with innovative solutions to the problems you’re facing.\n\nPushing the limits of your critical thinking skills will also foster a more systematic and strategic approach to coding and architecting robust and efficient solutions.\n\nIn other words, it’ll make you a better and more efficient coder. And who doesn’t want that?\n\n## Conclusion\n\nTo summarize, if you expect to become a backend developer or to grow in the area of backend development:\n\n- Keep an eye on the industry to understand what’s the status quo and what’s new and hot.\n- Understand the basics of software design and architecture.\n- Look into relational databases and NoSQL databases as well; they’re both important.\n- Learn how to build and use APIs; they’ll be part of almost every project you work on.\n- Remember, testing might look like it’s not mandatory, but it’s definitely a standard practice when it comes to backend development.\n- CI/CD and DevOps are practices you’ll be involved with, either directly or indirectly, so learn about them.\n- Soft skills are just as important as technical skills if you expect to grow in your career.\n\nThat said, do not take this list as the ultimate roadmap but rather as a starting point. If you’re willing to take your backend developer career to the next level, push yourself out of your comfort zone and pursue the skills listed here and the ones listed in this detailed [backend development roadmap](https://roadmap.sh/backend).\n\nRemember, constant learning is the only absolute truth in the software development world (this is true for backend developers, too). If you keep your skillset updated with the latest trends, you’ll remain adaptable and effective as a backend developer.\n";
				}
				function compiledContent$H() {
					return html$H;
				}
				function getHeadings$H() {
					return [{"depth":2,"slug":"understanding-backend-development","text":"Understanding Backend Development"},{"depth":2,"slug":"proficiency-in-core-and-emerging-programming-languages","text":"Proficiency in Core and Emerging Programming Languages"},{"depth":3,"slug":"keeping-an-eye-on-the-rising-stars","text":"Keeping an eye on the rising stars"},{"depth":3,"slug":"the-importance-of-supporting-frameworks","text":"The importance of supporting frameworks"},{"depth":2,"slug":"software-design-and-architecture","text":"Software Design and Architecture"},{"depth":3,"slug":"most-common-backend-architectures","text":"Most common backend architectures"},{"depth":2,"slug":"mastery-of-database-management-systems","text":"Mastery of Database Management Systems"},{"depth":3,"slug":"sql-databases","text":"SQL databases"},{"depth":3,"slug":"nosql-databases","text":"NoSQL databases"},{"depth":2,"slug":"api-development-capabilities","text":"API Development Capabilities"},{"depth":3,"slug":"what-are-the-most-common-api-types","text":"What are the most common API types?"},{"depth":2,"slug":"version-control-savvy","text":"Version Control Savvy"},{"depth":3,"slug":"what-is-version-control","text":"What is version control?"},{"depth":3,"slug":"what-should-you-learn-about-git","text":"What should you learn about Git?"},{"depth":2,"slug":"testing","text":"Testing"},{"depth":2,"slug":"cicd-and-devops-familiarity","text":"CI/CD and DevOps Familiarity"},{"depth":2,"slug":"soft-skills","text":"Soft Skills"},{"depth":3,"slug":"improving-communication","text":"Improving communication"},{"depth":3,"slug":"critical-thinking","text":"Critical thinking"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$H = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$H;
					content.file = file$H;
					content.url = url$H;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$H)}`;
				});

const __vite_glob_0_2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$H,
	compiledContent: compiledContent$H,
	default: Content$H,
	file: file$H,
	frontmatter: frontmatter$H,
	getHeadings: getHeadings$H,
	rawContent: rawContent$H,
	url: url$H
}, Symbol.toStringTag, { value: 'Module' }));

const html$G = "<p>As developers, we’re not just writing code on a text editor without any other external help. Whether we realize it or not, we’re constantly using different development tools to improve the way we work and the speed at which we can deliver our code.</p>\n<p>In this article, we’ll cover 25 backend development tools that are crucial in the web development industry, and as a <a href=\"/backend\">backend developer</a>, you should be aware of them.</p>\n<p>The categories we’ll tackle are:</p>\n<ul>\n<li>IDEs and editors</li>\n<li>Database tools</li>\n<li>Collaboration</li>\n<li>Hosting Services</li>\n<li>API-Related tools</li>\n<li>Productivity tools</li>\n</ul>\n<p>So let’s get started!</p>\n<h2 id=\"beyond-programming-languages-ides-and-editors\">Beyond programming languages: IDEs and Editors</h2>\n<p>Other than the actual programming languages, the Integrated Development Environment (A.K.A your IDE) is the single most important tool you’ll have to pick and use throughout your career in software development.</p>\n<p>Some of them are generic (as in, they work for all types of development), and others will have specific backend development tools (which is what we’re focusing on right now).</p>\n<p>Let’s see some examples that are great for a web development project.</p>\n<h3 id=\"1-jetbrains-products\">1. Jetbrains Products</h3>\n<p>The <a href=\"https://www.jetbrains.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Jetbrains family</a> of IDEs targets multiple programming languages, including JavaScript, .NET, JAVA (and the Java Virtual Machine), Python, PHP, and more (mostly great options for web development).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/jetbrains-code-editor-z7z1t.png\" alt=\"Jetbrains code editor\"></p>\n<p>The benefit of using these IDEs, in comparison with others, is that given how they’re language/technology specific, they have tools designed for those programming languages and specifically for this list to help in your backend development tasks, such as:</p>\n<ul>\n<li>Debuggers.</li>\n<li>Improved IntelliSense.</li>\n<li>Improved development environment.</li>\n</ul>\n<p>The only minor issue with these IDEs, especially when compared to the rest of the options listed here, is that they’re not all free. While not all of them are priced the same, I recommend you check out your IDE’s pricing page to understand what options you have (there are free plans if you qualify for them).</p>\n<h3 id=\"2-visual-studio-code\">2. Visual Studio Code</h3>\n<p><a href=\"https://code.visualstudio.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">VSCode</a> is definitely one of the most popular alternatives these days for all types of web developers, but definitely for backend developers. This IDE’s strongest selling point is that it’s incredibly extensible through plugins. And the community using it is so big and varied that there are plugins for literally anything you need.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/vscode-code-editor-8pznw.png\" alt=\"VSCode code editor\"></p>\n<p>The other major benefit of VSCode over JetBrains products is that it gives developers a fully working IDE for FREE. While some of the extensions don’t provide exactly the same developer experience as a JetBrains IDE, the proper combination of extensions can provide a very close alternative through VSCode.</p>\n<h3 id=\"3-zed\">3. Zed</h3>\n<p><a href=\"https://zed.dev/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Zed</a> is a different type of code editor, and because of that, it might just be the right one for you.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/zed-code-editor-7ovxz.png\" alt=\"Zed code editor\"></p>\n<p>Zed, like VSCode, is an all-purpose code editor, letting you code in whatever language you want (whether you’re doing web development or not). The main reasons why you’d pick Zed over others are:</p>\n<ul>\n<li><strong>Improved performance.</strong> Zed takes advantage of your CPU AND GPU to improve the speed at which the IDE responds to your commands.</li>\n<li><strong>Multi-user support.</strong></li>\n<li><strong>Team features.</strong> Zed lets you build software while working with others by sharing notes and letting you interact with teammates through the IDE.</li>\n</ul>\n<p>Zed is an <a href=\"https://github.com/zed-industries/zed\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">open-source project</a>, but at the time of writing this article, it’s only available for macOS, so Linux and Windows users are still unable to try this excellent option.</p>\n<h3 id=\"4-sublime-text\">4. Sublime Text</h3>\n<p>Before VSCode, <a href=\"https://www.sublimetext.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Sublime Text</a> was probably one of the most popular code editors for web developers who wanted something powerful for free.</p>\n<p>Just like VSCode, Sublime supports extensibility through plugins, and the rich ecosystem of plugins makes it quite a versatile editor. As a note, this code editor also supports GPU rendering of the UI, like Zed does, so if performance is important to you, then you’ll want to keep reading.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/sublime-text-code-editor-ngtnf.png\" alt=\"Sublime code editor\"></p>\n<p>With a refreshed UI (if you’ve used Sublime Text in the past, you’ll be happily surprised!) and better internal tooling, the latest version of this editor (version 4) is trying to regain the portion of the market that VSCode took from it at the time.</p>\n<h3 id=\"5-vim---a-developer-focused-editor\">5. VIM - a developer-focused editor</h3>\n<p><a href=\"https://www.vim.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">VIM</a> is a tool that you either hate or love as a developer, but there is no middle ground.</p>\n<p>This is such an iconic text editor that all the previously mentioned IDE have what is called a “vim mode,” which allows you to use them as if you were using VIM (with the visual and input modes).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/vim-code-editor-ohiyc.png\" alt=\"Vim code editor\"></p>\n<p>Vim lets you write code without having to move your fingers away from the home row (the row where you “rest” your fingers, the one with the F and G keys). That means you can navigate documents, write code, move through projects, and more, all with minimum hand movement.</p>\n<p>This is the key philosophy behind Vim’s design, and if you embrace it, it should help to make you a very proficient developer. Of course, adapting to this way of working is not trivial, and there is a lot of muscle memory that has to be re-trained. But once you do it, it’s really hard to go back.</p>\n<p>Just like with all the generic IDEs here, you’ll have to <a href=\"https://www.vim.org/scripts/script_search_results.php?order_by=creation_date&#x26;direction=descending\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">customize it through “scripts”</a> to make it work exactly as you want for your environment.</p>\n<h2 id=\"database-tools\">Database Tools</h2>\n<p>While doing backend development, you will definitely be interacting with databases. They’re a ubiquitous backend tool in the realm of web development.</p>\n<p>Let’s take a look at some great database tools you can use as a backend developer to interact with your favorite database management systems (DBMS).</p>\n<h3 id=\"6-datagrip\">6. DataGrip</h3>\n<p><a href=\"https://www.jetbrains.com/datagrip/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Datagrip</a> is a JetBrains product, which makes it a great option if you’re also going with a JetBrains IDE.</p>\n<p>This tool lets you access all SQL databases from within the same user interface, it provides great help while browsing the data stored in the database, and it also has features that help you write better SQL queries.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/datagrip-database-explorer-l8987.png\" alt=\"DataGrip database explorer\"></p>\n<p>While the pricing of these tools might be a bit steep (especially if you go with the IDE as well), it’s definitely a solid option if you’re looking for feature-rich and stable software development tools.</p>\n<h3 id=\"7-navicat\">7. Navicat</h3>\n<p><a href=\"https://navicat.com/en/products\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Navicat</a> actually has a family of alternatives based on what you need, from the standard set of SQL databases (such as MySQL, Oracle, Postgre, and so on) up to other NoSQL databases such as MongoDB and Redis.</p>\n<p>In general, the Navicat alternatives are quite lightweight and powerful to use. They might not be as feature-rich as Datagrip, but they let you easily browse and query the data you need.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/navicat-database-explorer-r1unn.png\" alt=\"Navicat database explorer\"></p>\n<p>The free trial for Navicat only lasts 14 days, and then you’ll have to pay a monthly fee. That said, for non-commercial use, the license is quite low, which makes it accessible to almost all developers.</p>\n<p>As for features, it has all the ones you’d expect from a tool like this:</p>\n<ul>\n<li>Ability to connect to multiple databases and visually browse their content.</li>\n<li>Query editor with some IntelliSense built-in.</li>\n<li>Model representation (automatically converts a database into ER Diagrams).</li>\n<li>Simple object designer to create entities through a visual IDE.</li>\n</ul>\n<p>The Navicat series of apps are great backend tools to have at your disposal, if you don’t mind their price, that is.</p>\n<h3 id=\"8-tableplus\">8. TablePlus</h3>\n<p><a href=\"https://tableplus.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Tableplus</a> is very similar to Navicat in the sense that it’s another lightweight database manager. The main differences are:</p>\n<ul>\n<li>Tableplus only supports SQL-based databases.</li>\n<li>The pricing model is simpler, by only charging a one-time license without you having to commit to a monthly subscription.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/tableplus-database-manager-06d09.png\" alt=\"TablePlus database manager\"></p>\n<p>Some of the most relevant features of Tableplus are:</p>\n<ul>\n<li>Inline data editing.</li>\n<li>Advanced filtering lets you combine different filtering conditions when searching.</li>\n<li>Code auto-complete, which comes in very handy when writing SQL queries.</li>\n<li>Extensible through JavaScript plugins (currently in Beta).</li>\n</ul>\n<p>This is a solid backend tool alternative to any of the previous options and with a simpler price tag.</p>\n<h3 id=\"9-dbeaver\">9. DBeaver</h3>\n<p><a href=\"https://dbeaver.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">DBeaver</a> is a free, cross-platform tool that lets you connect and interact with multiple databases. While there is a PRO version with extra features, the free version is more than powerful enough to get you started with almost any database you can think of, both SQL and NoSQL alike.</p>\n<p>For a full list of supported databases on the free version, check out their <a href=\"https://dbeaver.io/about/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">about page</a>.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/dbeaver-database-manager-fvlrd.png\" alt=\"DBeaver database manager\"></p>\n<p>Some of the major features of DBeaver are:</p>\n<ul>\n<li>SQL editor with completion.</li>\n<li>ER-diagram creation from a table definition.</li>\n<li>In-line data editing.</li>\n</ul>\n<p>Task management to kill any long-lasting queries that block your database.</p>\n<h2 id=\"collaboration-tools-for-web-development\">Collaboration tools for web development</h2>\n<p>Unless you’re working as a solo-dev (and even then!), collaboration tools allow you to coordinate your work and understand who’s working on what and what you should be working on next.</p>\n<p>While these might not be considered “backend tools” per se, they definitely help improve your performance and organization, so we can still call them “development tools” as a broader term.</p>\n<h3 id=\"10-trello\">10. Trello</h3>\n<p><a href=\"https://trello.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Trello</a> is a very simple yet powerful organizational tool that lets teams build a Kanban-like board with clear states and simple UX (drag&#x26;drop is king in Trello).</p>\n<p>Setting up a new project and a team takes minutes in Trello, and through the plugin system, you can get extra features such as date reminders, calendar integrations, and more.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/trello-board-o0i4i.png\" alt=\"Trello board\"></p>\n<p>The simple UI and intuitive UX make Trello one of the best options out there for collaborative tools as long as the needs of the team are met with simple column-based layouts and minimal information.</p>\n<h3 id=\"11-monday\">11. Monday</h3>\n<p><a href=\"https://monday.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Monday</a> is a relatively new online platform for project management and collaboration. I say “new” because some of the other alternatives here have been around for over 5+ years.</p>\n<p>Their limited free plan lasts forever, so if you have a small team and limited requirements, this might just be the perfect tool for you. Also, if you actually need to pay, Monday’s plans are accessible, especially when compared to other alternatives.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/monday-project-management-tool-xws17.png\" alt=\"Monday project management tool\"></p>\n<p>Monday’s fully customizable UI lets you build the collaborative environment you need. This is a huge advantage over others who’ve been around for longer and have a fixed UI that you have to adapt to.</p>\n<h3 id=\"12-basecamp\">12. Basecamp</h3>\n<p><a href=\"https://basecamp.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Basecamp</a> is a mix between Trello, Monday, and Notion in the sense that it tries to provide developers with the best and most relevant tools from those worlds, leaving out the ones that just create “noise.”</p>\n<p><img src=\"https://assets.roadmap.sh/guest/basecamp-project-management-tool-2pusd.png\" alt=\"Basecamp project management tool\"></p>\n<p>Basecamp’s philosophy is to keep things simple and only focus on the features that truly add to collaboration:</p>\n<ul>\n<li>Simple card tables like Trello.</li>\n<li>Ability to upload and manage documents and files with your team.</li>\n<li>Integrated chat.</li>\n<li>Message boards to send notifications to everyone.</li>\n</ul>\n<p>The only “downside” to basecamp, if you will, is that there is no “forever free” plan. Both their plans are paid and have a 30-day free trial, so you can definitely give it a shot and figure out if what they offer is enough for your needs.</p>\n<h3 id=\"13-wrike\">13. Wrike</h3>\n<p><a href=\"https://www.wrike.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Wrike</a> is yet another attempt at making project management and collaboration feel organic and seamless. They have a minimalistic UI and provide you with over 400 integrations to create your own workflows based on your needs and current ecosystem.</p>\n<p>They have a free plan that, while feature-limited, it’s perfect for understanding the basic way of using Wrike and how useful it can be to you in your current project.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/wrike-project-management-tool-5g3kl.png\" alt=\"Wrike project management tool\"></p>\n<p>Their innovative use of AI allows you to create content faster, analyze project and task descriptions, and create subtasks based on it.</p>\n<p>Wrike feels efficient and powerful, even for its free plan. Give it a chance if you’re a freelancer or if you have a small team looking for something new and powerful.</p>\n<h2 id=\"hosting-services\">Hosting Services</h2>\n<p>When it comes to backend development, deploying your code and running it on the cloud will be a common thing; this is a practice known as continuous integration and continuous deployment (CI/CD). While in some situations, you’ll be dealing with a custom, in-house infrastructure, there are platforms that will make the entire process very lightweight (as in deploying with a couple of clicks).</p>\n<p>Let’s take a look at some of the most common alternatives!</p>\n<h3 id=\"14-railway\">14. Railway</h3>\n<p><a href=\"https://railway.app/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Railway.app</a> aims at giving developers all the tools they need at a click’s distance. We’re talking about:</p>\n<ul>\n<li>PR-triggered deployments.</li>\n<li>Support for all popular programming languages.</li>\n<li>Autoscaling.</li>\n<li>Load balancing.</li>\n<li>Monitoring.</li>\n<li>A great uptime (99.95%)</li>\n<li>With more than 200 ready-made templates for you to get going.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/railway-hosting-j8me8.png\" alt=\"Railway hosting\"></p>\n<p>Railway has no free plan, but their basic one is very accessible. Careful though, they also charge per resource utilization. Lucky for you, they have a <a href=\"https://railway.app/pricing\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">very handy consumption calculator</a> to avoid surprises at the end of the month!</p>\n<h3 id=\"15-heroku\">15. Heroku</h3>\n<p><a href=\"https://www.heroku.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Heroku</a> is another Platform as a Service provider. This one provides the basic services most of them do, such as autoscaling, monitoring, GitHub integration, and more.</p>\n<p>The list of supported programming languages is not huge, but the most common ones are definitely covered: Node.js, Ruby, JAVA, PHP, Python, Go, Scala, and even Clojure.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/heroku-hosting-2u6bz.png\" alt=\"Heroku hosting\"></p>\n<p>Another great selling point for Heroku is that on top of their infrastructure, they also offer a managed Postgre database as a service and a Redis one. In both situations, you’ll have to pay for the services as you use them, so keep that in mind.</p>\n<h3 id=\"16-digital-ocean\">16. Digital Ocean</h3>\n<p>As opposed to platforms such as Heroku, <a href=\"https://www.digitalocean.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Digital Ocean</a> is known as an Infrastructure as a Service provider (IaaS). They give you all the servers you need and all the resources (memory, CPU, etc) you want to pay for. However, setting up your deployment process, automating your integration tests, or even having all the required libraries to run your code is up to you.</p>\n<p>This is by no means something bad, some teams do prefer to have that freedom over other platforms like Railway and Heroku, where everything’s already managed.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/digital-ocean-hosting-i7a9c.png\" alt=\"Digital Ocean hosting\"></p>\n<p>Large-scale applications will usually require to have custom infrastructure that managed services can hardly provide. This is where IaaS providers come in.</p>\n<p>On top of their basic offering, they do offer managed databases such as MongoDB, MySQL, Redis, and others.</p>\n<h3 id=\"17-hetzner\">17. Hetzner</h3>\n<p><a href=\"https://www.hetzner.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Hetzner</a> is yet another IaaS that offers everything you need to get going if you know what to do with it. In other words, they offer all the hardware you might dream of, even in the cloud, but you have to configure it and maintain it.</p>\n<p>Their only “managed” offer is for web hosting though, so if you’re looking to host your website or app and you don’t want to have to deal with server maintenance and configuration, then this is a good option for you.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/hetzner-hosting-oupq8.jpg\" alt=\"Hetzner hosting\"></p>\n<p>Other than that, their offering is quite standard, although their pricing model might not be. While they do have the standard pricing tiers like the rest of them, they also give you the option to “bid” for used hardware that is no longer needed.</p>\n<h3 id=\"18-vercel\">18. Vercel</h3>\n<p>If you’re building a NextJS application and you’re looking for a quick way to deploy it, then there is probably no better place than <a href=\"https://vercel.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Vercel</a> (the owner of NextJS).</p>\n<p>Their platform allows you to link your GitHub account to their systems and deploy your entire application with a single push to the repo.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/vercel-hosting-9jvk9.png\" alt=\"Vercel hosting\"></p>\n<p>And since they’re experts on NextJS, your app will “just work.”</p>\n<p>Even their free plan is perfect for quick SaaS prototypes and small applications. On top of this, they offer monitoring, auto-scaling, load balancing, and everything you’d expect from a PaaS provider.</p>\n<p>While it’s true they don’t support other technologies or even offer other related services, such as managed databases, there is hardly anyone who can provide a better developer experience when it comes to deploying a NextJS application.</p>\n<h3 id=\"19-render\">19. Render</h3>\n<p>You can think of <a href=\"https://render.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Render</a> as if Vercel and Heroku had a love child. Render gives you the amazing developer experience provided by Vercel but the flexibility (or more) from Heroku.</p>\n<p>You’re not tied to a single technology; instead, you have all the major runtimes available out of the box. Much higher HTTP timeouts (up to 100 minutes, which is incredible compared to the standard 10 or 30 seconds most providers give you) and tons of other security and quality-of-life improvements.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/render-hosting-w4urq.png\" alt=\"Render hosting\"></p>\n<p>Render also offers managed MySQL and managed Redis instances for you to use, even in their free tier. In the end, unless you’ve been using Heroku for a while and you’re happy with their DX, it might be a good idea to check out Render instead.</p>\n<h3 id=\"20-ovhcloud\">20. OVHCloud</h3>\n<p><a href=\"https://www.ovhcloud.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">OVHCloud</a> is an all-in-one solution that seems to provide you with everything you need, from “bare metal” (as in infrastructure) to managed hosting for web applications, managed databases (they have many to choose from), and many other services.</p>\n<p>However, they do not seem to offer quality-of-life integrations to make your deployment workflow simple and intuitive.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/ovhcloud-hosting-ncfch.png\" alt=\"OVHCloud hosting\"></p>\n<p>Now, given how they centralize all related services from domain name registration all the way up to analytics, identity management, file storage (CDN), and even one-click install CMS (content management systems, such as WordPress), etc, it might just be a good option for you. That is if you have the expertise in your team to deal with all these options.</p>\n<h2 id=\"api-related-tools\">API-Related Tools</h2>\n<p>As backend developers, we’ll always be dealing with APIs (Application Programming Interface), either through using the ones created by others or writing our own.</p>\n<p>Whatever you’re doing, it’s always good to have some backend tools to help you build and test them faster, so let’s take a look at a few options.</p>\n<h3 id=\"21-swagger\">21. Swagger</h3>\n<p>Some developers would argue that one of the hardest parts of creating an API is documenting it. Not only because it might sound like a boring task, but explaining what the API endpoint is doing well enough is not trivial.</p>\n<p>That’s where <a href=\"https://swagger.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Swagger</a> comes into play.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/swagger-api-tool-vngxu.png\" alt=\"Swagger API tool\"></p>\n<p>This tool allows you to create interactive documentation that provides developers with all they need to understand how to use your endpoints, and at the same time, it also gives them the option to test them directly from the generated UI.</p>\n<h3 id=\"22-postman\">22. Postman</h3>\n<p><a href=\"https://www.postman.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Postman</a> is less of a documentation-only app and has grown over the years to become a testing API tool that every developer and development team should know about. Backend developers are especially benefited from using Postman because of how well it helps organize and manage APIs.</p>\n<p>With Postman, you can organize all your company’s APIs, share them with the associated dev teams, and let them use and interact with them without having to write a single line of code.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/postman-documentation-tool-cl81q.png\" alt=\"Postman documentation tool\"></p>\n<p>While Swagger is more of a development tool that every backend developer should know about, Postman is the tool that every development team should use to share &#x26; control internal API access and documentation.</p>\n<h2 id=\"productivity\">Productivity</h2>\n<p>Finally, the last category is about productivity. While some of the products and services mentioned already do provide productivity enhancements, they weren’t there for that. The following list of backend tools is created thinking only about the benefits they can bring to your productivity while working as a backend developer.</p>\n<h3 id=\"23-iterm\">23. iTerm</h3>\n<p>If you’re a macOS user, then <a href=\"https://iterm2.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">iTerm</a> is definitely one of the “must haves” you need to look into. As a backend developer, you’ll spend a lot of your day in the terminal.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/iterm-terminal-developer-tool-zze25.png\" alt=\"iTerm terminal developer tool\"></p>\n<p>iTerm will take that experience to the next level by bringing in features such as:</p>\n<ul>\n<li>Parallel panes inside the same window making it easy to multi-task.</li>\n<li>Improved auto-complete</li>\n<li>In-window search outside of the current program you’re using.</li>\n<li>Instant replay lets you review the latest content on the screen before cleaning it.</li>\n<li>Paste history, letting you move through the latest pasted content into the terminal.</li>\n</ul>\n<p>Mind you, none of these features are mandatory; you can easily work without them, but they do improve your quality of life as a developer. Hence the reason why iTerm leads this list.</p>\n<h3 id=\"24-zshohmyzsh\">24. Zsh/OhMyZsh</h3>\n<p>The combination of these two gives your terminal superpowers. <a href=\"https://zsh.sourceforge.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Zsh</a> is an improved shell that lets you work much faster and more efficiently if you’re spending several hours typing commands in your terminal. For example, you get features such as:</p>\n<ul>\n<li>Advanced tab auto-complete</li>\n<li>Extensibility</li>\n<li>Spelling corrections</li>\n<li>And more.</li>\n</ul>\n<p><img src=\"https://assets.roadmap.sh/guest/zsh-shell-ui-6s163.png\" alt=\"Oh my Zsh shell\"></p>\n<p>As mentioned above, after you have your ZSH installed and set up, you should look into installing oh-my-zsh, which helps with configuring all the customization options you have on this shell:</p>\n<ul>\n<li>It comes bundled with <a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">over 300 plugins</a>, ranging from 1password integrations to the “jump” plugin, which lets you move around the filesystem by moving from mark to mark (you can assign marks to folders).</li>\n<li><a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Plenty of themes</a> out of the box.</li>\n</ul>\n<p>If you find yourself spending hours on the terminal, consider installing this combo.</p>\n<h3 id=\"25-raycast\">25. Raycast</h3>\n<p><a href=\"https://www.raycast.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Raycast</a> allows you to improve your productivity by giving you a better application launcher. Instead of using the default launcher, you can replace it with Raycast and gain superpowers.</p>\n<p>Now, you suddenly have access to hundreds of <a href=\"https://www.raycast.com/store\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">community-created extensions</a> that allow you to directly interact with chatGPT from the app launcher, use GitHub, interact with VSCode directly, and more.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/raycast-app-launcher-w5rg3.png\" alt=\"Raycast app launcher\"></p>\n<p>While it is only available for macOS users, Raycast has become a must-have application for backend developers on this platform. In the end, the faster you can reach for your tools, the more productive you become. And a properly configured Raycast can make your web development process feel like a breeze.</p>";

				const frontmatter$G = {"title":"25 Essential Backend Development Tools for @currentYear@","description":"Elevate your development process with these 25 essential backend developer tools.","authorId":"fernando","excludedBySlug":"/backend/developer-tools","seo":{"title":"25 Essential Backend Development Tools for @currentYear@","description":"Elevate your coding with backend developer tools that bring efficiency, scalability, and innovation to your projects. Improve your development process today!","ogImageUrl":"https://assets.roadmap.sh/guest/backend-development-tools-xa6xw.jpg"},"isNew":false,"type":"textual","date":"2024-03-19T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$G = "/workspaces/developer-roadmap/src/data/guides/backend-developer-tools.md";
				const url$G = undefined;
				function rawContent$G() {
					return "\nAs developers, we’re not just writing code on a text editor without any other external help. Whether we realize it or not, we’re constantly using different development tools to improve the way we work and the speed at which we can deliver our code.\n\nIn this article, we’ll cover 25 backend development tools that are crucial in the web development industry, and as a [backend developer](/backend), you should be aware of them.\n\nThe categories we’ll tackle are:\n\n- IDEs and editors\n- Database tools\n- Collaboration\n- Hosting Services\n- API-Related tools\n- Productivity tools\n\nSo let’s get started!\n\n## Beyond programming languages: IDEs and Editors\n\nOther than the actual programming languages, the Integrated Development Environment (A.K.A your IDE) is the single most important tool you’ll have to pick and use throughout your career in software development.\n\nSome of them are generic (as in, they work for all types of development), and others will have specific backend development tools (which is what we’re focusing on right now).\n\nLet’s see some examples that are great for a web development project.\n\n### 1. Jetbrains Products\n\nThe [Jetbrains family](https://www.jetbrains.com/) of IDEs targets multiple programming languages, including JavaScript, .NET, JAVA (and the Java Virtual Machine), Python, PHP, and more (mostly great options for web development).\n\n![Jetbrains code editor](https://assets.roadmap.sh/guest/jetbrains-code-editor-z7z1t.png)\n\nThe benefit of using these IDEs, in comparison with others, is that given how they’re language/technology specific, they have tools designed for those programming languages and specifically for this list to help in your backend development tasks, such as:\n\n- Debuggers.\n- Improved IntelliSense.\n- Improved development environment.\n\nThe only minor issue with these IDEs, especially when compared to the rest of the options listed here, is that they’re not all free. While not all of them are priced the same, I recommend you check out your IDE’s pricing page to understand what options you have (there are free plans if you qualify for them).\n\n### 2. Visual Studio Code\n\n[VSCode](https://code.visualstudio.com/) is definitely one of the most popular alternatives these days for all types of web developers, but definitely for backend developers. This IDE’s strongest selling point is that it’s incredibly extensible through plugins. And the community using it is so big and varied that there are plugins for literally anything you need.\n\n![VSCode code editor](https://assets.roadmap.sh/guest/vscode-code-editor-8pznw.png)\n\nThe other major benefit of VSCode over JetBrains products is that it gives developers a fully working IDE for FREE. While some of the extensions don’t provide exactly the same developer experience as a JetBrains IDE, the proper combination of extensions can provide a very close alternative through VSCode.\n\n### 3. Zed\n\n[Zed](https://zed.dev/) is a different type of code editor, and because of that, it might just be the right one for you.\n\n![Zed code editor](https://assets.roadmap.sh/guest/zed-code-editor-7ovxz.png)\n\nZed, like VSCode, is an all-purpose code editor, letting you code in whatever language you want (whether you’re doing web development or not). The main reasons why you’d pick Zed over others are:\n\n- **Improved performance.** Zed takes advantage of your CPU AND GPU to improve the speed at which the IDE responds to your commands.\n- **Multi-user support.**\n- **Team features.** Zed lets you build software while working with others by sharing notes and letting you interact with teammates through the IDE.\n\nZed is an [open-source project](https://github.com/zed-industries/zed), but at the time of writing this article, it’s only available for macOS, so Linux and Windows users are still unable to try this excellent option.\n\n### 4. Sublime Text\n\nBefore VSCode, [Sublime Text](https://www.sublimetext.com/) was probably one of the most popular code editors for web developers who wanted something powerful for free.\n\nJust like VSCode, Sublime supports extensibility through plugins, and the rich ecosystem of plugins makes it quite a versatile editor. As a note, this code editor also supports GPU rendering of the UI, like Zed does, so if performance is important to you, then you’ll want to keep reading.\n\n![Sublime code editor](https://assets.roadmap.sh/guest/sublime-text-code-editor-ngtnf.png)\n\nWith a refreshed UI (if you’ve used Sublime Text in the past, you’ll be happily surprised!) and better internal tooling, the latest version of this editor (version 4) is trying to regain the portion of the market that VSCode took from it at the time.\n\n### 5. VIM - a developer-focused editor\n\n[VIM](https://www.vim.org/) is a tool that you either hate or love as a developer, but there is no middle ground.\n\nThis is such an iconic text editor that all the previously mentioned IDE have what is called a “vim mode,” which allows you to use them as if you were using VIM (with the visual and input modes).\n\n![Vim code editor](https://assets.roadmap.sh/guest/vim-code-editor-ohiyc.png)\n\nVim lets you write code without having to move your fingers away from the home row (the row where you “rest” your fingers, the one with the F and G keys). That means you can navigate documents, write code, move through projects, and more, all with minimum hand movement.\n\nThis is the key philosophy behind Vim’s design, and if you embrace it, it should help to make you a very proficient developer. Of course, adapting to this way of working is not trivial, and there is a lot of muscle memory that has to be re-trained. But once you do it, it’s really hard to go back.\n\nJust like with all the generic IDEs here, you’ll have to [customize it through “scripts”](https://www.vim.org/scripts/script_search_results.php?order_by=creation_date&direction=descending) to make it work exactly as you want for your environment.\n\n## Database Tools\n\nWhile doing backend development, you will definitely be interacting with databases. They’re a ubiquitous backend tool in the realm of web development.\n\nLet’s take a look at some great database tools you can use as a backend developer to interact with your favorite database management systems (DBMS).\n\n### 6. DataGrip\n\n[Datagrip](https://www.jetbrains.com/datagrip/) is a JetBrains product, which makes it a great option if you’re also going with a JetBrains IDE.\n\nThis tool lets you access all SQL databases from within the same user interface, it provides great help while browsing the data stored in the database, and it also has features that help you write better SQL queries.\n\n![DataGrip database explorer](https://assets.roadmap.sh/guest/datagrip-database-explorer-l8987.png)\n\nWhile the pricing of these tools might be a bit steep (especially if you go with the IDE as well), it’s definitely a solid option if you’re looking for feature-rich and stable software development tools.\n\n### 7. Navicat\n\n[Navicat](https://navicat.com/en/products) actually has a family of alternatives based on what you need, from the standard set of SQL databases (such as MySQL, Oracle, Postgre, and so on) up to other NoSQL databases such as MongoDB and Redis.\n\nIn general, the Navicat alternatives are quite lightweight and powerful to use. They might not be as feature-rich as Datagrip, but they let you easily browse and query the data you need.\n\n![Navicat database explorer](https://assets.roadmap.sh/guest/navicat-database-explorer-r1unn.png)\n\nThe free trial for Navicat only lasts 14 days, and then you’ll have to pay a monthly fee. That said, for non-commercial use, the license is quite low, which makes it accessible to almost all developers.\n\nAs for features, it has all the ones you’d expect from a tool like this:\n\n- Ability to connect to multiple databases and visually browse their content.\n- Query editor with some IntelliSense built-in.\n- Model representation (automatically converts a database into ER Diagrams).\n- Simple object designer to create entities through a visual IDE.\n\nThe Navicat series of apps are great backend tools to have at your disposal, if you don’t mind their price, that is.\n\n### 8. TablePlus\n\n[Tableplus](https://tableplus.com/) is very similar to Navicat in the sense that it’s another lightweight database manager. The main differences are:\n\n- Tableplus only supports SQL-based databases.\n- The pricing model is simpler, by only charging a one-time license without you having to commit to a monthly subscription.\n\n![TablePlus database manager](https://assets.roadmap.sh/guest/tableplus-database-manager-06d09.png)\n\nSome of the most relevant features of Tableplus are:\n\n- Inline data editing.\n- Advanced filtering lets you combine different filtering conditions when searching.\n- Code auto-complete, which comes in very handy when writing SQL queries.\n- Extensible through JavaScript plugins (currently in Beta).\n\nThis is a solid backend tool alternative to any of the previous options and with a simpler price tag.\n\n### 9. DBeaver\n\n[DBeaver](https://dbeaver.io/) is a free, cross-platform tool that lets you connect and interact with multiple databases. While there is a PRO version with extra features, the free version is more than powerful enough to get you started with almost any database you can think of, both SQL and NoSQL alike.\n\nFor a full list of supported databases on the free version, check out their [about page](https://dbeaver.io/about/).\n\n![DBeaver database manager](https://assets.roadmap.sh/guest/dbeaver-database-manager-fvlrd.png)\n\nSome of the major features of DBeaver are:\n\n- SQL editor with completion.\n- ER-diagram creation from a table definition.\n- In-line data editing.\n\nTask management to kill any long-lasting queries that block your database.\n\n## Collaboration tools for web development\n\nUnless you’re working as a solo-dev (and even then!), collaboration tools allow you to coordinate your work and understand who’s working on what and what you should be working on next.\n\nWhile these might not be considered “backend tools” per se, they definitely help improve your performance and organization, so we can still call them “development tools” as a broader term.\n\n### 10. Trello\n\n[Trello](https://trello.com/) is a very simple yet powerful organizational tool that lets teams build a Kanban-like board with clear states and simple UX (drag&drop is king in Trello).\n\nSetting up a new project and a team takes minutes in Trello, and through the plugin system, you can get extra features such as date reminders, calendar integrations, and more.\n\n![Trello board](https://assets.roadmap.sh/guest/trello-board-o0i4i.png)\n\nThe simple UI and intuitive UX make Trello one of the best options out there for collaborative tools as long as the needs of the team are met with simple column-based layouts and minimal information.\n\n### 11. Monday\n\n[Monday](https://monday.com/) is a relatively new online platform for project management and collaboration. I say “new” because some of the other alternatives here have been around for over 5+ years.\n\nTheir limited free plan lasts forever, so if you have a small team and limited requirements, this might just be the perfect tool for you. Also, if you actually need to pay, Monday’s plans are accessible, especially when compared to other alternatives.\n\n![Monday project management tool](https://assets.roadmap.sh/guest/monday-project-management-tool-xws17.png)\n\nMonday’s fully customizable UI lets you build the collaborative environment you need. This is a huge advantage over others who've been around for longer and have a fixed UI that you have to adapt to.\n\n### 12. Basecamp\n\n[Basecamp](https://basecamp.com/) is a mix between Trello, Monday, and Notion in the sense that it tries to provide developers with the best and most relevant tools from those worlds, leaving out the ones that just create “noise.”\n\n![Basecamp project management tool](https://assets.roadmap.sh/guest/basecamp-project-management-tool-2pusd.png)\n\nBasecamp’s philosophy is to keep things simple and only focus on the features that truly add to collaboration:\n\n- Simple card tables like Trello.\n- Ability to upload and manage documents and files with your team.\n- Integrated chat.\n- Message boards to send notifications to everyone.\n\nThe only “downside” to basecamp, if you will, is that there is no “forever free” plan. Both their plans are paid and have a 30-day free trial, so you can definitely give it a shot and figure out if what they offer is enough for your needs.\n\n### 13. Wrike\n\n[Wrike](https://www.wrike.com/) is yet another attempt at making project management and collaboration feel organic and seamless. They have a minimalistic UI and provide you with over 400 integrations to create your own workflows based on your needs and current ecosystem.\n\nThey have a free plan that, while feature-limited, it’s perfect for understanding the basic way of using Wrike and how useful it can be to you in your current project.\n\n![Wrike project management tool](https://assets.roadmap.sh/guest/wrike-project-management-tool-5g3kl.png)\n\nTheir innovative use of AI allows you to create content faster, analyze project and task descriptions, and create subtasks based on it.\n\nWrike feels efficient and powerful, even for its free plan. Give it a chance if you’re a freelancer or if you have a small team looking for something new and powerful.\n\n## Hosting Services\n\nWhen it comes to backend development, deploying your code and running it on the cloud will be a common thing; this is a practice known as continuous integration and continuous deployment (CI/CD). While in some situations, you’ll be dealing with a custom, in-house infrastructure, there are platforms that will make the entire process very lightweight (as in deploying with a couple of clicks).\n\nLet’s take a look at some of the most common alternatives!\n\n### 14. Railway\n\n[Railway.app](https://railway.app/) aims at giving developers all the tools they need at a click’s distance. We’re talking about:\n\n- PR-triggered deployments.\n- Support for all popular programming languages.\n- Autoscaling.\n- Load balancing.\n- Monitoring.\n- A great uptime (99.95%)\n- With more than 200 ready-made templates for you to get going.\n\n![Railway hosting](https://assets.roadmap.sh/guest/railway-hosting-j8me8.png)\n\nRailway has no free plan, but their basic one is very accessible. Careful though, they also charge per resource utilization. Lucky for you, they have a [very handy consumption calculator](https://railway.app/pricing) to avoid surprises at the end of the month!\n\n### 15. Heroku\n\n[Heroku](https://www.heroku.com/) is another Platform as a Service provider. This one provides the basic services most of them do, such as autoscaling, monitoring, GitHub integration, and more.\n\nThe list of supported programming languages is not huge, but the most common ones are definitely covered: Node.js, Ruby, JAVA, PHP, Python, Go, Scala, and even Clojure.\n\n![Heroku hosting](https://assets.roadmap.sh/guest/heroku-hosting-2u6bz.png)\n\nAnother great selling point for Heroku is that on top of their infrastructure, they also offer a managed Postgre database as a service and a Redis one. In both situations, you’ll have to pay for the services as you use them, so keep that in mind.\n\n### 16. Digital Ocean\n\nAs opposed to platforms such as Heroku, [Digital Ocean](https://www.digitalocean.com/) is known as an Infrastructure as a Service provider (IaaS). They give you all the servers you need and all the resources (memory, CPU, etc) you want to pay for. However, setting up your deployment process, automating your integration tests, or even having all the required libraries to run your code is up to you.\n\nThis is by no means something bad, some teams do prefer to have that freedom over other platforms like Railway and Heroku, where everything’s already managed.\n\n![Digital Ocean hosting](https://assets.roadmap.sh/guest/digital-ocean-hosting-i7a9c.png)\n\nLarge-scale applications will usually require to have custom infrastructure that managed services can hardly provide. This is where IaaS providers come in.\n\nOn top of their basic offering, they do offer managed databases such as MongoDB, MySQL, Redis, and others.\n\n### 17. Hetzner\n\n[Hetzner](https://www.hetzner.com/) is yet another IaaS that offers everything you need to get going if you know what to do with it. In other words, they offer all the hardware you might dream of, even in the cloud, but you have to configure it and maintain it.\n\nTheir only “managed” offer is for web hosting though, so if you’re looking to host your website or app and you don’t want to have to deal with server maintenance and configuration, then this is a good option for you.\n\n![Hetzner hosting](https://assets.roadmap.sh/guest/hetzner-hosting-oupq8.jpg)\n\nOther than that, their offering is quite standard, although their pricing model might not be. While they do have the standard pricing tiers like the rest of them, they also give you the option to “bid” for used hardware that is no longer needed.\n\n### 18. Vercel\n\nIf you’re building a NextJS application and you’re looking for a quick way to deploy it, then there is probably no better place than [Vercel](https://vercel.com/) (the owner of NextJS).\n\nTheir platform allows you to link your GitHub account to their systems and deploy your entire application with a single push to the repo.\n\n![Vercel hosting](https://assets.roadmap.sh/guest/vercel-hosting-9jvk9.png)\n\nAnd since they’re experts on NextJS, your app will “just work.”\n\nEven their free plan is perfect for quick SaaS prototypes and small applications. On top of this, they offer monitoring, auto-scaling, load balancing, and everything you’d expect from a PaaS provider.\n\nWhile it’s true they don’t support other technologies or even offer other related services, such as managed databases, there is hardly anyone who can provide a better developer experience when it comes to deploying a NextJS application.\n\n### 19. Render\n\nYou can think of [Render](https://render.com/) as if Vercel and Heroku had a love child. Render gives you the amazing developer experience provided by Vercel but the flexibility (or more) from Heroku.\n\nYou’re not tied to a single technology; instead, you have all the major runtimes available out of the box. Much higher HTTP timeouts (up to 100 minutes, which is incredible compared to the standard 10 or 30 seconds most providers give you) and tons of other security and quality-of-life improvements.\n\n![Render hosting](https://assets.roadmap.sh/guest/render-hosting-w4urq.png)\n\nRender also offers managed MySQL and managed Redis instances for you to use, even in their free tier. In the end, unless you’ve been using Heroku for a while and you’re happy with their DX, it might be a good idea to check out Render instead.\n\n### 20. OVHCloud\n\n[OVHCloud](https://www.ovhcloud.com/) is an all-in-one solution that seems to provide you with everything you need, from “bare metal” (as in infrastructure) to managed hosting for web applications, managed databases (they have many to choose from), and many other services.\n\nHowever, they do not seem to offer quality-of-life integrations to make your deployment workflow simple and intuitive.\n\n![OVHCloud hosting](https://assets.roadmap.sh/guest/ovhcloud-hosting-ncfch.png)\n\nNow, given how they centralize all related services from domain name registration all the way up to analytics, identity management, file storage (CDN), and even one-click install CMS (content management systems, such as WordPress), etc, it might just be a good option for you. That is if you have the expertise in your team to deal with all these options.\n\n## API-Related Tools\n\nAs backend developers, we’ll always be dealing with APIs (Application Programming Interface), either through using the ones created by others or writing our own.\n\nWhatever you’re doing, it’s always good to have some backend tools to help you build and test them faster, so let’s take a look at a few options.\n\n### 21. Swagger\n\nSome developers would argue that one of the hardest parts of creating an API is documenting it. Not only because it might sound like a boring task, but explaining what the API endpoint is doing well enough is not trivial.\n\nThat’s where [Swagger](https://swagger.io/) comes into play.\n\n![Swagger API tool](https://assets.roadmap.sh/guest/swagger-api-tool-vngxu.png)\n\nThis tool allows you to create interactive documentation that provides developers with all they need to understand how to use your endpoints, and at the same time, it also gives them the option to test them directly from the generated UI.\n\n### 22. Postman\n\n[Postman](https://www.postman.com/) is less of a documentation-only app and has grown over the years to become a testing API tool that every developer and development team should know about. Backend developers are especially benefited from using Postman because of how well it helps organize and manage APIs.\n\nWith Postman, you can organize all your company’s APIs, share them with the associated dev teams, and let them use and interact with them without having to write a single line of code.\n\n![Postman documentation tool](https://assets.roadmap.sh/guest/postman-documentation-tool-cl81q.png)\n\nWhile Swagger is more of a development tool that every backend developer should know about, Postman is the tool that every development team should use to share & control internal API access and documentation.\n\n## Productivity\n\nFinally, the last category is about productivity. While some of the products and services mentioned already do provide productivity enhancements, they weren’t there for that. The following list of backend tools is created thinking only about the benefits they can bring to your productivity while working as a backend developer.\n\n### 23. iTerm\n\nIf you’re a macOS user, then [iTerm](https://iterm2.com/) is definitely one of the “must haves” you need to look into. As a backend developer, you’ll spend a lot of your day in the terminal.\n\n![iTerm terminal developer tool](https://assets.roadmap.sh/guest/iterm-terminal-developer-tool-zze25.png)\n\niTerm will take that experience to the next level by bringing in features such as:\n\n- Parallel panes inside the same window making it easy to multi-task.\n- Improved auto-complete\n- In-window search outside of the current program you’re using.\n- Instant replay lets you review the latest content on the screen before cleaning it.\n- Paste history, letting you move through the latest pasted content into the terminal.\n\nMind you, none of these features are mandatory; you can easily work without them, but they do improve your quality of life as a developer. Hence the reason why iTerm leads this list.\n\n### 24. Zsh/OhMyZsh\n\nThe combination of these two gives your terminal superpowers. [Zsh](https://zsh.sourceforge.io/) is an improved shell that lets you work much faster and more efficiently if you’re spending several hours typing commands in your terminal. For example, you get features such as:\n\n- Advanced tab auto-complete\n- Extensibility\n- Spelling corrections\n- And more.\n\n![Oh my Zsh shell](https://assets.roadmap.sh/guest/zsh-shell-ui-6s163.png)\n\nAs mentioned above, after you have your ZSH installed and set up, you should look into installing oh-my-zsh, which helps with configuring all the customization options you have on this shell:\n\n- It comes bundled with [over 300 plugins](https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins), ranging from 1password integrations to the “jump” plugin, which lets you move around the filesystem by moving from mark to mark (you can assign marks to folders).\n- [Plenty of themes](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes) out of the box.\n\nIf you find yourself spending hours on the terminal, consider installing this combo.\n\n### 25. Raycast\n\n[Raycast](https://www.raycast.com/) allows you to improve your productivity by giving you a better application launcher. Instead of using the default launcher, you can replace it with Raycast and gain superpowers.\n\nNow, you suddenly have access to hundreds of [community-created extensions](https://www.raycast.com/store) that allow you to directly interact with chatGPT from the app launcher, use GitHub, interact with VSCode directly, and more.\n\n![Raycast app launcher](https://assets.roadmap.sh/guest/raycast-app-launcher-w5rg3.png)\n\nWhile it is only available for macOS users, Raycast has become a must-have application for backend developers on this platform. In the end, the faster you can reach for your tools, the more productive you become. And a properly configured Raycast can make your web development process feel like a breeze.\n";
				}
				function compiledContent$G() {
					return html$G;
				}
				function getHeadings$G() {
					return [{"depth":2,"slug":"beyond-programming-languages-ides-and-editors","text":"Beyond programming languages: IDEs and Editors"},{"depth":3,"slug":"1-jetbrains-products","text":"1. Jetbrains Products"},{"depth":3,"slug":"2-visual-studio-code","text":"2. Visual Studio Code"},{"depth":3,"slug":"3-zed","text":"3. Zed"},{"depth":3,"slug":"4-sublime-text","text":"4. Sublime Text"},{"depth":3,"slug":"5-vim---a-developer-focused-editor","text":"5. VIM - a developer-focused editor"},{"depth":2,"slug":"database-tools","text":"Database Tools"},{"depth":3,"slug":"6-datagrip","text":"6. DataGrip"},{"depth":3,"slug":"7-navicat","text":"7. Navicat"},{"depth":3,"slug":"8-tableplus","text":"8. TablePlus"},{"depth":3,"slug":"9-dbeaver","text":"9. DBeaver"},{"depth":2,"slug":"collaboration-tools-for-web-development","text":"Collaboration tools for web development"},{"depth":3,"slug":"10-trello","text":"10. Trello"},{"depth":3,"slug":"11-monday","text":"11. Monday"},{"depth":3,"slug":"12-basecamp","text":"12. Basecamp"},{"depth":3,"slug":"13-wrike","text":"13. Wrike"},{"depth":2,"slug":"hosting-services","text":"Hosting Services"},{"depth":3,"slug":"14-railway","text":"14. Railway"},{"depth":3,"slug":"15-heroku","text":"15. Heroku"},{"depth":3,"slug":"16-digital-ocean","text":"16. Digital Ocean"},{"depth":3,"slug":"17-hetzner","text":"17. Hetzner"},{"depth":3,"slug":"18-vercel","text":"18. Vercel"},{"depth":3,"slug":"19-render","text":"19. Render"},{"depth":3,"slug":"20-ovhcloud","text":"20. OVHCloud"},{"depth":2,"slug":"api-related-tools","text":"API-Related Tools"},{"depth":3,"slug":"21-swagger","text":"21. Swagger"},{"depth":3,"slug":"22-postman","text":"22. Postman"},{"depth":2,"slug":"productivity","text":"Productivity"},{"depth":3,"slug":"23-iterm","text":"23. iTerm"},{"depth":3,"slug":"24-zshohmyzsh","text":"24. Zsh/OhMyZsh"},{"depth":3,"slug":"25-raycast","text":"25. Raycast"}];
				}

				const Content$G = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$G;
					content.file = file$G;
					content.url = url$G;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$G)}`;
				});

const __vite_glob_0_3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$G,
	compiledContent: compiledContent$G,
	default: Content$G,
	file: file$G,
	frontmatter: frontmatter$G,
	getHeadings: getHeadings$G,
	rawContent: rawContent$G,
	url: url$G
}, Symbol.toStringTag, { value: 'Module' }));

const html$F = "<p>Web development is typically divided into two main categories: <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend development</a> and <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">frontend development</a>. Frontend development focuses on the visible part of the application for end-users, i.e. the part that users interact with, while backend development involves writing code that remains unseen but is essential for the functioning of all applications—the business logic.</p>\n<p>Two of the key components when it comes to backend development are the programming language that you are going to code in and the database. In this article, we will be looking into a subset of programming languages that could be used for backend development. We will be discussing the pros and cons of each and the community to help you pick the best programming language for backend development.</p>\n<p>Diving straight in, I will cover the top 5 backend programming languages that you should to learn if you’re looking to broaden your horizons in the server-side world.</p>\n<h2 id=\"top-5-backend-languages-to-learn-for-web-development\">Top 5 Backend Languages to Learn for Web Development</h2>\n<p>The best backend languages to learn in 2024 are:</p>\n<ul>\n<li>Python</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>Go</li>\n</ul>\n<p>Why these languages specifically?</p>\n<p>They’re some of the most known and used languages in the industry right now (see <a href=\"https://survey.stackoverflow.co/2023/#most-popular-technologies-language-prof\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">StackOverflow’s 2023 Developer Survey</a>). That said, keep in mind that these are all great options, and they’re not presented here in any particular order.</p>\n<h3 id=\"python\">Python</h3>\n<p>Python has been around for decades already and while it’s never been the most popular option, it has always managed to stay within the top 5 choices. People love it for being easy to read, straightforward, and able to handle all sorts of tasks, making it a top pick for developers globally. Sure, Python’s got a big name in data processing and machine learning, but let’s not forget its solid impact on web development!.</p>\n<p>What makes Python extra appealing, especially for beginners, is the fact that reading and writing it feels very much like English (or at least, as pseudo code). This makes it a top choice for folks just starting out in coding.</p>\n<h4 id=\"beginner-accessibility-and-learning-resources\">Beginner Accessibility and Learning Resources</h4>\n<p>One of Python’s standout features is its beginner-friendly syntax, making it an ideal language for those new to programming. The emphasis on readability and the absence of complex syntax (for the most part), eases the learning curve, enabling new developers to quickly grasp fundamental concepts.</p>\n<p>Python’s community plays a critical role in its accessibility. Abundant learning resources, tutorials, and documentation are readily available, empowering beginners to progress from basic programming principles to advanced backend development seamlessly. Online platforms like Codecademy, Coursera, realpython.com, and even Google offer comprehensive courses tailored to all skill levels.</p>\n<h4 id=\"practical-applications-and-popular-frameworks\">Practical Applications and Popular Frameworks</h4>\n<p>Python’s versatility is evident in its applicability across a spectrum of industries, from web development and data science to artificial intelligence and automation. In the context of backend development, Python shines brightly with its two standout frameworks: <a href=\"https://www.djangoproject.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Django</a> and <a href=\"https://github.com/pallets/flask\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Flask</a>.</p>\n<h5 id=\"django\">Django</h5>\n<p>So, let’s talk about Django – it’s like the superhero of web frameworks, at least in the world of Python. This high-level powerhouse is all about that “batteries-included” style, giving you a whole package of tools and features that make development lightning-fast. It follows the <a href=\"https://www.crio.do/blog/understand-mvc-architecture/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Model-View-Controller</a> (MVC) architecture that gives your web applications a solid structure, making them scalable and easy to keep up.</p>\n<p>Part of that whole “batteries-included” motto means that it comes with an admin panel, an <a href=\"https://www.freecodecamp.org/news/what-is-an-orm-the-meaning-of-object-relational-mapping-database-tools/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ORM</a> (Object-Relational Mapping) for smooth data handling, and security features that make sure your project is secured out-of-the-box. All these goodies work together, making Django a top choice for projects, whether they’re a walk in the park or a brain-bending challenge.</p>\n<h5 id=\"flask\">Flask</h5>\n<p>On the other hand, Flask, a micro-framework, takes a minimalist approach, providing developers with the flexibility to choose components as needed. While Flask may be lighter than Django, it doesn’t compromise on functionality. Its simplicity and modularity make it an excellent choice for small to medium-sized projects, allowing developers to tailor the framework to meet specific project requirements.</p>\n<p>Both Django and Flask underscore Python’s suitability for backend development, offering developers frameworks that cater to diverse project needs while maintaining Python’s hallmark readability and efficiency.</p>\n<h4 id=\"pros-and-cons-of-python\">Pros and Cons of Python</h4>\n<p>As with all other backend languages in this article, Python has some pros and cons you should consider before picking it as your first backend language.</p>\n<h5 id=\"pros\">Pros</h5>\n<ul>\n<li>The syntax is very easy to learn because it’s very much like writing English.</li>\n<li>The ecosystem is quite mature and has some nice frameworks that will contain all the tools you need to get started</li>\n</ul>\n<h5 id=\"cons\">Cons</h5>\n<ul>\n<li>It’s not the most popular backend language, so while the frameworks available are constantly updated, they aren’t necessarily using the latest technology trends.</li>\n<li>The GIL (Global Interpreter Lock) limits Python’s performance in multi-threaded applications.</li>\n</ul>\n<h3 id=\"java\">Java</h3>\n<p>Java has a massive presence and for good reason (according to <a href=\"https://w3techs.com/technologies/details/pl-php\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">JetBrain’s survey in 2022, Java was used by 48% of developers</a>).It’s the kind of programming language that’s everywhere – serving up websites, running your favorite apps, and even powering big-scale enterprise systems.</p>\n<h4 id=\"is-it-worth-learning-java\">Is it worth learning Java?</h4>\n<p>Now, learning Java, (a strongly typed, object oriented programming language (OOP), is a journey worth taking, but it’s not a walk in the park. It’s a bit like climbing a mountain – you start at the bottom with the basics, and as you ascend, you get into the nitty-gritty of things like object-oriented programming. The process will force you to learn a lot, which is a great thing, by the end you’ll have a lot of understanding of mechanics and concepts around OOP that can be extrapolated into other languages. However, that can also be overwhelming to some developers who just want to learn by building mini-projects. In those situations, the learning curve of Java might be too long (not steep, but long because there is a lot more to cover than with alternatives such as Python or JavaScript).</p>\n<p>That said, the community is big and there are tons of resources, from online courses to forums, helping you navigate the Java landscape. And good reason, considering Java has been around for quite a while.</p>\n<h4 id=\"use-cases-and-robust-ecosystem\">Use Cases and Robust Ecosystem</h4>\n<p>Java’s everywhere. From web development to mobile apps, and even diving into the world of big data, Java’s got its fingerprints all over. And if it’s not the language itself, it’s the Java Virtual Machine (JVM) powering some other language, like Spark.</p>\n<p>Java’s the language of choice for many big enterprises given its innate robustness (the first version of the language was released in 1995, it’s had quite a long time to evolve), and its robust ecosystem of libraries and frameworks makes it a go-to for developers.</p>\n<h4 id=\"pros-and-cons-of-java\">Pros and Cons of Java</h4>\n<p>For all its power and robustness, there are some negative (and positive) aspects to picking Java as your first backend language.</p>\n<h5 id=\"pros-1\">Pros</h5>\n<ul>\n<li>Java has a mature ecosystem with a varied array of libraries and frameworks for you to try. The community has been working on them and evolving them for years in many cases, so they’re quite ready to develop enterprise-ready solutions.</li>\n<li>Java’s multithreading support makes it ideal for some processing-heavy tasks in the backend of big applications.</li>\n<li>Java’s heavy focus on object oriented programming makes it a great option for developers who enjoy that paradigm.</li>\n</ul>\n<h5 id=\"cons-1\">Cons</h5>\n<ul>\n<li>Java’s verbose syntax might be a problem for some people. While you can still code without an issue, it all comes down to personal preference. If you like to write less and do more with your code, Java might not be the ideal pick for you. It’s verbosity can increase development time in some situations.</li>\n<li>Java applications can have higher memory consumption than others, especially compared to others like PHP. While the reason for this is their entire architecture, the fact remains.</li>\n</ul>\n<h3 id=\"javascript-nodejs\">JavaScript (Node.js)</h3>\n<p>With Node.js in the mix, JavaScript becomes a lingua franca in web development. In other words, you can use the same language both for the frontend (client side) and for the backend (server side) of your application.</p>\n<p>That said, keep in mind that depending on the framework you’re using, while it might be JavaScript on both sides, the code and logic you use can be considerably different.</p>\n<p>Remember that frontend code is often confused with framework code (as in React, Angular, Vue, etc) by some developers, simply because it’s all JavaScript. But don’t be confused, the backend lacks a lot of the extra “juice” added by the browser (like the DOM API and others).</p>\n<h4 id=\"learning-advantages-of-nodejs\">Learning Advantages of Node.js</h4>\n<p>If you’ve got the basics of JavaScript down, even if your experience has only been on the frontend, diving into Node.js is like leveling up. It lets you use the same language for both frontend and backend, which means less time juggling languages and more time building cool stuff.</p>\n<p>The event-driven, non-blocking architecture is one of the main features that make the language so special – it makes your web apps fast and efficient without you having to learn more complex concepts such as multi-threading. Plus, the community is constantly growing and there are tutorials everywhere to guide you through the Node.js universe.</p>\n<p>If you were to rank languages based on the amount of content out there to learn them, JavaScript would be one of the first ones (if not the first one) on the list.</p>\n<h4 id=\"key-frameworks-and-development-tools\">Key Frameworks and Development Tools</h4>\n<p>Now, let’s talk about frameworks. In the case of JavaScript, this topic is so varied that recommending a single option for someone just getting started is really hard.</p>\n<p>For example, if you want to go frontend agnostic, or in other words, you don’t care about the technology being used to develop the client side of your app, then a good starting option would be <a href=\"https://expressjs.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Express.js</a>. This framework used to be the industry standard. And while that’s no longer the case, it’s still a perfect first choice if you’re looking for something with the required functionality to make your life a lot easier.</p>\n<p>Now, if on the other hand, you’re looking to build the frontend and the backend at the same time, then I would recommend going with <a href=\"https://nextjs.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Next.js</a> if you’re already familiar with React. Or if on the other hand, you prefer Vue.js, then definitely try <a href=\"https://nuxt.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Nuxt</a>. Either one of those will help you get the job done with all the bells and whistles you can think of.</p>\n<h4 id=\"does-it-make-sense-to-pick-up-javascript-as-a-backend-language\">Does it make sense to pick up JavaScript as a backend language?</h4>\n<p>The answer to this question is always going to be “yes”, whether you’re coming from the frontend and you already have JS experience or if you’re picking it up from scratch. In fact, according to <a href=\"https://survey.stackoverflow.co/2023/#most-popular-technologies-language-prof\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">StackOverflow’s 2023 survey, JavaScript is the most used language by professionals</a> (with 65.85% of the votes).</p>\n<p><img src=\"/guides/backend-languages/javascript-interest.png\" alt=\"JavaScript Interest\"></p>\n<p>If you’re coming from the client side, then adopting JS for your backend will let you start working in minutes. You’ll probably spend more time learning the backend-specific concepts than the language itself.</p>\n<p>On the other hand, if you’re coming from zero, or from other programming languages, JS has some quirks, for sure, but if you go the JS route, you’re already making way for a potential switch into the frontend in the future. Who knows, maybe in a few months you’ll also want to start working on the frontend, and by having picked up JS as your main backend language, you have 90% of the work already cut for you.</p>\n<p>There is really no downside to picking JS as your first backend language.</p>\n<h4 id=\"pros-and-cons-of-javascript\">Pros and Cons of JavaScript</h4>\n<p>While there might not be a downside to picking JS, there is no perfect language out there, so let’s take a look at some of the pros and cons before moving on to the next one.</p>\n<h5 id=\"pros-2\">Pros</h5>\n<ul>\n<li>Going with JavaScript, you’re using the same language on the backend and on the frontend. There is less cognitive load while switching environments if you’re the one coding both sides of the app.</li>\n<li>The ecosystem around JavaScript is one of the richest ones you can find. The community is constantly pushing the limits of the language and coming up with new solutions to everyday problems.</li>\n<li>The simple syntax allows you to reduce development time because you don’t have to write as much code to achieve good results.</li>\n</ul>\n<h5 id=\"cons-2\">Cons</h5>\n<ul>\n<li>Asynchronous programming can be hard for some developers coming from other languages, like Python for example.</li>\n<li>The lack of strong types in JavaScript can cause some problems for big codebases.</li>\n<li>The single-thread nature of the language makes it really hard to implement CPU-intensive tasks. While there is support for multi-threading, it’s not extensive nor commonly used.</li>\n<li>Debugging asynchronous code can be difficult for new developers given the non-linear nature of it.</li>\n</ul>\n<h3 id=\"php\">PHP</h3>\n<p>Now, if you’re looking for something very well established in the web development industry, just like Java but with a shorter learning curve, then you’re probably looking for PHP.</p>\n<blockquote>\n<p>As a note about PHP’s relevancy, while many developers might claim that PHP is a dying tech, according to <a href=\"https://w3techs.com/technologies/details/pl-php\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">W3Techs, over 75% of websites with a backend use PHP</a>.</p>\n</blockquote>\n<p>It’s the glue that holds a ton of websites together, and its longevity in the web development scene is no accident.</p>\n<h4 id=\"ease-of-mastery-and-vast-library-support\">Ease of Mastery and Vast Library Support</h4>\n<p>If you’re diving into PHP, you wouldn’t be so wrong (no matter what others might tell you). It’s got a gentle learning curve, which means you can start building things pretty quickly. Getting everything set up and working will probably take you 10 minutes, and you’ll be writing your first “hello world” 5 minutes after that.</p>\n<p>The vast community support and an ocean of online resources make mastering PHP a breeze. Plus, its library support is like having a toolkit that’s always expanding – you’ll find what you need, whether you’re wrangling databases, handling forms, or making your website dance with dynamic content.</p>\n<p>If you’re looking to pick up PHP, look for the LAMP stack, which stands for <strong>L</strong>inux, <strong>A</strong>pache, <strong>M</strong>ySQL, and <strong>P</strong>HP. With that tech stack, you’ll have everything you need to start creating websites in no time.</p>\n<h4 id=\"modern-php-frameworks-and-their-impact\">Modern PHP Frameworks and Their Impact</h4>\n<p>If we’re talking about PHP frameworks, then we gotta talk about <a href=\"https://laravel.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Laravel</a> and <a href=\"https://symfony.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Symfony</a>. They are like the rockstars of the modern PHP world.</p>\n<p>Laravel comes with a lot of tools and features that help you speed up your development process. On the other side, Symfony has a modular architecture, making it a solid choice for projects of all sizes.</p>\n<p>These frameworks showcase how PHP has evolved, staying relevant and powerful in the ever-changing landscape of web development.</p>\n<h4 id=\"pros-and-cons-of-php\">Pros and Cons of PHP</h4>\n<p>Let’s take a look at some of the most common advantages of going with PHP for the backend and some cons to discuss why it might not be the best choice for you.</p>\n<h5 id=\"pros-3\">Pros</h5>\n<ul>\n<li>PHP is designed for web development, which still makes it a very popular choice for a backend language.</li>\n<li>PHP’s community is quite big, considering how old the language is, so if you need help, chances are, someone has the answer you’re looking for.</li>\n</ul>\n<h5 id=\"cons-3\">Cons</h5>\n<ul>\n<li>One of the major complaints developers have about the language is its inconsistent function naming convention. While not a huge problem, it makes it very hard for developers to intuitively find the right function by name. This causes you to constantly verify your code against the documentation to make sure you’re not making mistakes.</li>\n</ul>\n<h3 id=\"go\">Go</h3>\n<p>Now, let’s close in on Go, the programming language born at Google that’s all about simplicity and efficiency. Go embraces a clean and straightforward syntax. Despite its simplicity, it focuses heavily on performance, making it an excellent choice for building modern, scalable applications.</p>\n<p>According to the <a href=\"https://pypl.github.io/PYPL.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">PYPL index</a> (using Google searches to weigh interest of developers in a particular language), we can see a clear worldwide growing interest in Go from the development community:</p>\n<p><img src=\"/guides/backend-languages/pypl-go-index.png\" alt=\"Go Interest\"></p>\n<h4 id=\"concurrency-and-scalability\">Concurrency and Scalability</h4>\n<p>Go stands out in the crowd, especially when it comes to handling concurrency and scalability. Its built-in support for concurrent programming, through goroutines and channels, makes it a standout choice for applications that need to juggle multiple tasks simultaneously. This makes Go particularly adept at handling the demands of today’s highly concurrent and distributed systems. In other words, Go is a great choice for building microservices, a type of system that is very commonly used as the backend for complex web applications.</p>\n<p>So yes, very relevant.</p>\n<h4 id=\"learning-curve-and-developer-productivity\">Learning Curve and Developer Productivity</h4>\n<p>Learning Go is a smooth ride, thanks to its simplicity and extensive documentation. Developers often find themselves quickly transitioning from understanding the basics to building robust applications.</p>\n<p>The language’s focus on developer productivity is evident in its quick compilation times and the absence of excessive boilerplate code, allowing developers to concentrate on building features rather than wrestling with the language itself.</p>\n<h4 id=\"pros-and-cons-of-go\">Pros and Cons of Go</h4>\n<p>Let’s take a look at some pros and cons for the last programming language on our list.</p>\n<h5 id=\"pros-4\">Pros</h5>\n<ul>\n<li>Go code compiles quickly, which in turn leads to very fast development cycles. This is a big plus if you’re developing a big application with a large codebase because other options might slow down your process with their compilation times.</li>\n<li>Go’s syntax is simple enough to make it easy to learn and understand for new developers.</li>\n</ul>\n<h5 id=\"cons-4\">Cons</h5>\n<ul>\n<li>Go’s ecosystem is quite young when compared to the other alternatives here, so the maturity of the tools available might not be the same as, for example, Java or JavaScript tooling.</li>\n</ul>\n<h2 id=\"choosing-the-ideal-backend-language\">Choosing the Ideal Backend Language</h2>\n<p>So, are these the best backend programming languages out there? Is there an absolute “best” backend programming language?</p>\n<p>As you’ve probably seen by now, there is no “perfect” or “ideal” backend language. When it comes to picking one out of the huge number of alternatives, you have to consider other aspects outside of the language itself:</p>\n<ul>\n<li>What’s the size of your project? Are you building a large-scale platform? Or just a basic static website?</li>\n<li>Do you mind spending more time learning or do you need to be efficient and start coding right away?</li>\n<li>Do you already have some programming knowledge and would like to pick something that resembles what you already know? Or would you like to pick up something that’s entirely different?</li>\n<li>Are you alone? Or are you part of a team?</li>\n</ul>\n<p>Once you’ve answered those questions, you’ll probably have some idea of where to go, but then you should look into the language itself, specifically into:</p>\n<ul>\n<li>Does it have enough learning resources for you?</li>\n<li>How big and active is the community around it?</li>\n<li>Are the main frameworks still under development? Or have they been parked for a while?</li>\n</ul>\n<p>In the end, you’re evaluating the language and its ecosystem, making sure they’re both evolving right along the web industry. If you find that there are aspects that are falling behind, then it probably isn’t a good choice.</p>\n<p>A handy tool when trying to evaluate a language like that is <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap.sh</a>.</p>\n<p><a href=\"https://roadmap.sh/backend\" target=\"_blank\"><img src=\"/guides/backend-languages/backend-roadmap-part.png\" alt=\"Roadmap.sh\"></a></p>\n<p align=\"center\" style=\"font-size: 14px; margin-top: -10px; text-align: center\">Small section of the full backend roadmap available on <a href=\"https://roadmap.sh/backend\">roadmap.sh</a></p>\n<p>There you’ll find community-maintained roadmaps for many career paths within software development. In particular, for this article, the <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend roadmap</a> is a great place to start, because while picking a backend language is important, you’ll see there that it’s not just about the language. In fact, there is a lot of tech around the language that is also required (I’m referring to databases, git, understanding how client-server communication works, and a big “etc).</p>\n<h2 id=\"what-are-backend-languages\">What are backend languages?</h2>\n<p>When it comes to web development, there is a very clear distinction between frontend and backend technologies.</p>\n<p>While the frontend ecosystem is quite limited to JavaScript (and other JavaScript-based languages, like TypeScript) due to Browser compatibility, the backend (A.K.A server-side) is a very different scenario.</p>\n<p><img src=\"/guides/backend-languages/back-vs-front.png\" alt=\"Backend Languages\"></p>\n<p>Please note that neither of those lists is extensive, as they’re both constantly growing.</p>\n<p>You can think of a backend language as one that “runs on the server side”. That said, by that definition, any language is a backend language because even JavaScript nowadays can be used on the backend as well (thanks to Node, Bun, and Deno).</p>\n<p>However, we can go one step further and say:</p>\n<blockquote>\n<p>“A backend language is a server side programming language that has the tools and frameworks required to build web backends”</p>\n</blockquote>\n<p>That will narrow down the list a little bit. But essentially, we can think of backend languages as anything that fits the following list:</p>\n<ul>\n<li>Is able to listen for incoming HTTP/S connections.</li>\n<li>Can access databases.</li>\n<li>Can send HTTP/S requests.</li>\n<li>Can access the filesystem.</li>\n<li>Has a rich ecosystem of tools and frameworks to build web applications.</li>\n</ul>\n<p>With those features and a rich ecosystem of libraries and frameworks, a language can definitely be considered “backend-ready”.</p>\n<h2 id=\"why-learn-a-backend-programming-language\">Why learn a backend programming language?</h2>\n<p>If you’re already a backend developer, then the main reason would be to become a more versatile developer. The more languages you know, the better code you’ll write. Either because you’ve learned different ways of solving the same problem, or simply because you’ll be able to contribute to more projects.</p>\n<p>If, on the other hand, you’re just getting started, the main reason would be that you’re entering an industry that’s always looking for people.</p>\n<h2 id=\"is-the-market-in-demand-for-backend-developers\">Is the market in demand for backend developers?</h2>\n<p>One thing to keep in mind right now is that the software development market is always in demand for devs. For example, the <a href=\"https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">U.S. Bureau of Labor Statistics gives our industry a 25% growth rate</a> (demand-wise) from 2022 to 2023, whereas the mean for other industries is 3%.</p>\n<p>According to <a href=\"https://www.jetbrains.com/lp/devecosystem-2022/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">JetBrains, during 2022, 75% of developers were involved with web development</a> in one fashion or another, so whether you’re backend devs or frontend devs, there is always someone looking for you.</p>\n<p>That said, we also have to consider that this industry is becoming a global industry. While some countries might still be fighting that process back, most developers can directly access the global market and work for any company in the world.</p>\n<p>That is a great opportunity for a backend developer who lives in an area where there isn’t a big IT industry; however, it also means competing with every other developer in the world. That might cause the illusion that the IT industry is in recession or that there are no job opportunities for developers.</p>\n<p>There are always opportunities; it’s just that you’re now after the same job that many others from around the world are after as well.</p>\n<p>That said, backend devs are always in high demand because they’re the bread and butter of any web application. They’re always required to create the underlying platform that will power most systems, so the key to standing out here is to stay up-to-date with the industry’s trends and technologies.</p>\n<p>Don’t get me wrong. You can’t possibly be expected to keep up with every single programming language that is released or with all the new frameworks that are created every month. However, keeping an eye on the industry and understanding what survives long enough to become a new industry standard is important. You have to keep updating yourself and learning new technologies/skills constantly; that way, you’ll stay relevant.</p>\n<h2 id=\"is-learning-a-backend-language-good-for-your-career\">Is learning a backend language good for your career?</h2>\n<p>Whether you’re a frontend developer looking to become full-stack (someone who can code both the backend and the frontend of an application), or if you’re new to the industry and you’re thinking if this might be the best place for you, the answer is “yes”.</p>\n<p>Backend developers are always in demand, so adding a new tool to your already existing toolbelt (if you’re already a dev) will only make you more flexible in the eyes of your employer.</p>\n<p>But remember, a language is just a language until you give it context. If you’re wondering whether or not one of the backend languages in this article might be for you, the answer will always be “yes”. However, understand that if backend development is new to you, you will also need to pick up other skills and backend technologies around the language, such as:</p>\n<ul>\n<li>Understanding HTTP.</li>\n<li>Learning Structured Query Language (SQL) to query your databases.</li>\n<li>Understanding how APIs work.</li>\n<li>What server side rendering means and how to take advantage of it.</li>\n<li>What web servers are and how to use them/build them.</li>\n</ul>\n<p>Otherwise, you’ll understand the language, but you won’t know how to use it for the role of backend development.</p>\n<h2 id=\"jumpstarting-your-backend-development-journey\">Jumpstarting Your Backend Development Journey</h2>\n<p>To get started with your backend development journey, it’s crucial to have a roadmap that guides you through the learning process and equips you with the skills to build robust and scalable backend systems.</p>\n<p>Lucky for you, if you’re reading this, that means you’ve found the most complete and comprehensive roadmap online: <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap.sh</a>, the current <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend roadmap</a> is filled with details of everything you should and could (optionally) learn in your journey to becoming a backend developer.</p>\n<h2 id=\"guided-learning-from-online-courses-to-bootcamps\">Guided Learning: From Online Courses to Bootcamps</h2>\n<p>Online courses and bootcamps serve as invaluable companions on your learning expedition. Platforms like Udemy, Coursera, and freeCodeCamp offer comprehensive backend development courses.</p>\n<p>These resources not only cover programming languages like Python, Java, or JavaScript but also dive deep into frameworks like Django, Express.js, or Laravel. For those seeking a more immersive experience, coding bootcamps provide intensive, hands-on training to fast-track your backend development skills.</p>\n<p>Whatever choice you go for, make sure you’re not following trends or just copying the learning methods of others. Learning is a very personal experience and what works for others might not work for you, and vice versa. So make sure to do the proper research and figure out what option works best for you.</p>\n<h2 id=\"building-community-connections-for-learning-support\">Building Community Connections for Learning Support</h2>\n<p>Joining developer communities (there are several on Twitter for example), forums like Stack Overflow, or participating in social media groups dedicated to backend development creates a network of support.</p>\n<p>Engaging with experienced developers, sharing challenges, and seeking advice fosters a collaborative learning environment. Attend local meetups or virtual events if you can to connect with professionals in the field, gaining insights and building relationships that can prove invaluable throughout your journey.</p>\n<h2 id=\"think-about-you-and-your-project\">Think about you and your project</h2>\n<p>There are many ways to go about picking the ideal backend language for you. If there is anything you should take home with you after reading this article, it is that most languages are equivalent in the sense that you’ll be able to do pretty much everything with any of them.</p>\n<p>So what criteria can you use to pick the “right one” for you?</p>\n<p>The questions you should also be asking yourself are:</p>\n<ul>\n<li>What’s your preference for a language? Do you like Object Oriented Programming (OOP) or are you more of a functional programming type of dev? Do you like statically typed programming languages or loosely typed ones? Personal preferences should also play an important role at the time of picking your ideal programming language.</li>\n<li>What does my project need? After all, project requirements sometimes dictate technology. Keep that in mind, check if the project’s needs and your personal preferences align, and try to weigh in pros and cons if they don’t.</li>\n</ul>\n<p>In the end, personal preference and actual project requirements (if you have any) are very important, because both will influence how much you enjoy (or don’t enjoy) the learning process.</p>\n<h2 id=\"crafting-a-portfolio-to-display-your-backend-skills\">Crafting a Portfolio to Display Your Backend Skills:</h2>\n<p>As you accumulate skills and knowledge, showcase your journey through a well-crafted portfolio. Include projects that highlight your backend skills, demonstrating your ability to - design databases, implement server-side logic, and integrate with client side technologies. Whether it’s a dynamic web application, a RESTful API, or a data-driven project, your portfolio becomes a tangible representation of your backend development capabilities for potential employers or collaborators.</p>\n<p>When it comes to deciding where to publish this portfolio, you have some options, such as directly on your GitHub profile (if you have one), or perhaps on your own personal website where you can share some design thoughts about each project along with the code.</p>\n<p>In the end, the important thing is that you should be sharing your experience somewhere, especially when you don’t have working experience in the field.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In the end, there are many backend programming languages to choose from, and what language you go for, is up to you and your particular context/needs. All I can do is guide you to the door, but you have to cross it yourself. Some interesting options are:</p>\n<ul>\n<li>Python with its English-like syntax.</li>\n<li>Java with its formal syntax and enterprise support.</li>\n<li>JavaScript with its flexibility and ability to jump between frontend and backend.</li>\n<li>PHP with its proven record of success.</li>\n<li>And Go, with its performance and scalability focus.</li>\n</ul>\n<p>You’re the one who gets to decide, but just know that no matter what you choose, getting started in backend development is a one-way street. You’ll be learning from this moment on, and you’ll be jumping from one language to the other as the field evolves.</p>\n<p>Remember that there is a very detailed version of a <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend roadmap here</a>, it might be a great place to get started! And if you’re also interested in frontend development, there is an <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">equally handy roadmap</a> here as well!</p>";

				const frontmatter$F = {"title":"The 5 Best Backend Development Languages to Master (@currentYear@)","description":"Discover the best backend development languages to master in @currentYear@.","authorId":"fernando","excludedBySlug":"/backend/languages","seo":{"title":"The 5 Best Backend Development Languages to Master (@currentYear@)","description":"Discover the best backend development languages to learn right now for career development, with practical tips from an experienced developer.","ogImageUrl":"https://assets.roadmap.sh/guest/backend-development-languages-78dxq.jpg"},"isNew":false,"type":"textual","date":"2024-01-18T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$F = "/workspaces/developer-roadmap/src/data/guides/backend-languages.md";
				const url$F = undefined;
				function rawContent$F() {
					return "\nWeb development is typically divided into two main categories: [backend development](https://roadmap.sh/backend) and [frontend development](https://roadmap.sh/frontend). Frontend development focuses on the visible part of the application for end-users, i.e. the part that users interact with, while backend development involves writing code that remains unseen but is essential for the functioning of all applications—the business logic.\n\nTwo of the key components when it comes to backend development are the programming language that you are going to code in and the database. In this article, we will be looking into a subset of programming languages that could be used for backend development. We will be discussing the pros and cons of each and the community to help you pick the best programming language for backend development.\n\nDiving straight in, I will cover the top 5 backend programming languages that you should to learn if you’re looking to broaden your horizons in the server-side world.\n\n## Top 5 Backend Languages to Learn for Web Development\n\nThe best backend languages to learn in 2024 are:\n\n- Python\n- Java\n- JavaScript\n- PHP\n- Go\n\nWhy these languages specifically?\n\nThey’re some of the most known and used languages in the industry right now (see [StackOverflow’s 2023 Developer Survey](https://survey.stackoverflow.co/2023/#most-popular-technologies-language-prof)). That said, keep in mind that these are all great options, and they’re not presented here in any particular order.\n\n### Python\n\nPython has been around for decades already and while it’s never been the most popular option, it has always managed to stay within the top 5 choices. People love it for being easy to read, straightforward, and able to handle all sorts of tasks, making it a top pick for developers globally. Sure, Python's got a big name in data processing and machine learning, but let's not forget its solid impact on web development!.\n\nWhat makes Python extra appealing, especially for beginners, is the fact that reading and writing it feels very much like English (or at least, as pseudo code). This makes it a top choice for folks just starting out in coding.\n\n#### Beginner Accessibility and Learning Resources\n\nOne of Python's standout features is its beginner-friendly syntax, making it an ideal language for those new to programming. The emphasis on readability and the absence of complex syntax (for the most part), eases the learning curve, enabling new developers to quickly grasp fundamental concepts.\n\nPython's community plays a critical role in its accessibility. Abundant learning resources, tutorials, and documentation are readily available, empowering beginners to progress from basic programming principles to advanced backend development seamlessly. Online platforms like Codecademy, Coursera, realpython.com, and even Google offer comprehensive courses tailored to all skill levels.\n\n#### Practical Applications and Popular Frameworks\n\nPython's versatility is evident in its applicability across a spectrum of industries, from web development and data science to artificial intelligence and automation. In the context of backend development, Python shines brightly with its two standout frameworks: [Django](https://www.djangoproject.com/) and [Flask](https://github.com/pallets/flask).\n\n##### Django\n\nSo, let's talk about Django – it's like the superhero of web frameworks, at least in the world of Python. This high-level powerhouse is all about that \"batteries-included\" style, giving you a whole package of tools and features that make development lightning-fast. It follows the [Model-View-Controller](https://www.crio.do/blog/understand-mvc-architecture/) (MVC) architecture that gives your web applications a solid structure, making them scalable and easy to keep up.\n\nPart of that whole “batteries-included” motto means that it comes with an admin panel, an [ORM](https://www.freecodecamp.org/news/what-is-an-orm-the-meaning-of-object-relational-mapping-database-tools/) (Object-Relational Mapping) for smooth data handling, and security features that make sure your project is secured out-of-the-box. All these goodies work together, making Django a top choice for projects, whether they're a walk in the park or a brain-bending challenge.\n\n##### Flask\n\nOn the other hand, Flask, a micro-framework, takes a minimalist approach, providing developers with the flexibility to choose components as needed. While Flask may be lighter than Django, it doesn't compromise on functionality. Its simplicity and modularity make it an excellent choice for small to medium-sized projects, allowing developers to tailor the framework to meet specific project requirements.\n\nBoth Django and Flask underscore Python's suitability for backend development, offering developers frameworks that cater to diverse project needs while maintaining Python's hallmark readability and efficiency.\n\n#### Pros and Cons of Python\n\nAs with all other backend languages in this article, Python has some pros and cons you should consider before picking it as your first backend language.\n\n##### Pros\n\n- The syntax is very easy to learn because it’s very much like writing English.\n- The ecosystem is quite mature and has some nice frameworks that will contain all the tools you need to get started\n\n##### Cons\n\n- It’s not the most popular backend language, so while the frameworks available are constantly updated, they aren’t necessarily using the latest technology trends.\n- The GIL (Global Interpreter Lock) limits Python’s performance in multi-threaded applications.\n\n### Java\n\nJava has a massive presence and for good reason (according to [JetBrain’s survey in 2022, Java was used by 48% of developers](https://w3techs.com/technologies/details/pl-php)).It's the kind of programming language that's everywhere – serving up websites, running your favorite apps, and even powering big-scale enterprise systems.\n\n#### Is it worth learning Java?\n\nNow, learning Java, (a strongly typed, object oriented programming language (OOP), is a journey worth taking, but it's not a walk in the park. It's a bit like climbing a mountain – you start at the bottom with the basics, and as you ascend, you get into the nitty-gritty of things like object-oriented programming. The process will force you to learn a lot, which is a great thing, by the end you’ll have a lot of understanding of mechanics and concepts around OOP that can be extrapolated into other languages. However, that can also be overwhelming to some developers who just want to learn by building mini-projects. In those situations, the learning curve of Java might be too long (not steep, but long because there is a lot more to cover than with alternatives such as Python or JavaScript).\n\nThat said, the community is big and there are tons of resources, from online courses to forums, helping you navigate the Java landscape. And good reason, considering Java has been around for quite a while.\n\n#### Use Cases and Robust Ecosystem\n\nJava's everywhere. From web development to mobile apps, and even diving into the world of big data, Java's got its fingerprints all over. And if it’s not the language itself, it’s the Java Virtual Machine (JVM) powering some other language, like Spark.\n\nJava’s the language of choice for many big enterprises given its innate robustness (the first version of the language was released in 1995, it’s had quite a long time to evolve), and its robust ecosystem of libraries and frameworks makes it a go-to for developers.\n\n#### Pros and Cons of Java\n\nFor all its power and robustness, there are some negative (and positive) aspects to picking Java as your first backend language.\n\n##### Pros\n\n- Java has a mature ecosystem with a varied array of libraries and frameworks for you to try. The community has been working on them and evolving them for years in many cases, so they’re quite ready to develop enterprise-ready solutions.\n- Java’s multithreading support makes it ideal for some processing-heavy tasks in the backend of big applications.\n- Java’s heavy focus on object oriented programming makes it a great option for developers who enjoy that paradigm.\n\n##### Cons\n\n- Java’s verbose syntax might be a problem for some people. While you can still code without an issue, it all comes down to personal preference. If you like to write less and do more with your code, Java might not be the ideal pick for you. It’s verbosity can increase development time in some situations.\n- Java applications can have higher memory consumption than others, especially compared to others like PHP. While the reason for this is their entire architecture, the fact remains.\n\n### JavaScript (Node.js)\n\nWith Node.js in the mix, JavaScript becomes a lingua franca in web development. In other words, you can use the same language both for the frontend (client side) and for the backend (server side) of your application.\n\nThat said, keep in mind that depending on the framework you’re using, while it might be JavaScript on both sides, the code and logic you use can be considerably different.\n\nRemember that frontend code is often confused with framework code (as in React, Angular, Vue, etc) by some developers, simply because it’s all JavaScript. But don’t be confused, the backend lacks a lot of the extra “juice” added by the browser (like the DOM API and others).\n\n#### Learning Advantages of Node.js\n\nIf you've got the basics of JavaScript down, even if your experience has only been on the frontend, diving into Node.js is like leveling up. It lets you use the same language for both frontend and backend, which means less time juggling languages and more time building cool stuff.\n\nThe event-driven, non-blocking architecture is one of the main features that make the language so special – it makes your web apps fast and efficient without you having to learn more complex concepts such as multi-threading. Plus, the community is constantly growing and there are tutorials everywhere to guide you through the Node.js universe.\n\nIf you were to rank languages based on the amount of content out there to learn them, JavaScript would be one of the first ones (if not the first one) on the list.\n\n#### Key Frameworks and Development Tools\n\nNow, let's talk about frameworks. In the case of JavaScript, this topic is so varied that recommending a single option for someone just getting started is really hard.\n\nFor example, if you want to go frontend agnostic, or in other words, you don’t care about the technology being used to develop the client side of your app, then a good starting option would be [Express.js](https://expressjs.com/). This framework used to be the industry standard. And while that’s no longer the case, it’s still a perfect first choice if you’re looking for something with the required functionality to make your life a lot easier.\n\nNow, if on the other hand, you’re looking to build the frontend and the backend at the same time, then I would recommend going with [Next.js](https://nextjs.org/) if you’re already familiar with React. Or if on the other hand, you prefer Vue.js, then definitely try [Nuxt](https://nuxt.com/). Either one of those will help you get the job done with all the bells and whistles you can think of.\n\n#### Does it make sense to pick up JavaScript as a backend language?\n\nThe answer to this question is always going to be “yes”, whether you’re coming from the frontend and you already have JS experience or if you’re picking it up from scratch. In fact, according to [StackOverflow’s 2023 survey, JavaScript is the most used language by professionals](https://survey.stackoverflow.co/2023/#most-popular-technologies-language-prof) (with 65.85% of the votes).\n\n![JavaScript Interest](/guides/backend-languages/javascript-interest.png)\n\nIf you’re coming from the client side, then adopting JS for your backend will let you start working in minutes. You’ll probably spend more time learning the backend-specific concepts than the language itself.\n\nOn the other hand, if you’re coming from zero, or from other programming languages, JS has some quirks, for sure, but if you go the JS route, you’re already making way for a potential switch into the frontend in the future. Who knows, maybe in a few months you’ll also want to start working on the frontend, and by having picked up JS as your main backend language, you have 90% of the work already cut for you.\n\nThere is really no downside to picking JS as your first backend language.\n\n#### Pros and Cons of JavaScript\n\nWhile there might not be a downside to picking JS, there is no perfect language out there, so let’s take a look at some of the pros and cons before moving on to the next one.\n\n##### Pros\n\n- Going with JavaScript, you’re using the same language on the backend and on the frontend. There is less cognitive load while switching environments if you’re the one coding both sides of the app.\n- The ecosystem around JavaScript is one of the richest ones you can find. The community is constantly pushing the limits of the language and coming up with new solutions to everyday problems.\n- The simple syntax allows you to reduce development time because you don’t have to write as much code to achieve good results.\n\n##### Cons\n\n- Asynchronous programming can be hard for some developers coming from other languages, like Python for example.\n- The lack of strong types in JavaScript can cause some problems for big codebases.\n- The single-thread nature of the language makes it really hard to implement CPU-intensive tasks. While there is support for multi-threading, it’s not extensive nor commonly used.\n- Debugging asynchronous code can be difficult for new developers given the non-linear nature of it.\n\n### PHP\n\nNow, if you’re looking for something very well established in the web development industry, just like Java but with a shorter learning curve, then you’re probably looking for PHP.\n\n> As a note about PHP’s relevancy, while many developers might claim that PHP is a dying tech, according to [W3Techs, over 75% of websites with a backend use PHP](https://w3techs.com/technologies/details/pl-php).\n\nIt's the glue that holds a ton of websites together, and its longevity in the web development scene is no accident.\n\n#### Ease of Mastery and Vast Library Support\n\nIf you're diving into PHP, you wouldn’t be so wrong (no matter what others might tell you). It's got a gentle learning curve, which means you can start building things pretty quickly. Getting everything set up and working will probably take you 10 minutes, and you’ll be writing your first “hello world” 5 minutes after that.\n\nThe vast community support and an ocean of online resources make mastering PHP a breeze. Plus, its library support is like having a toolkit that's always expanding – you'll find what you need, whether you're wrangling databases, handling forms, or making your website dance with dynamic content.\n\nIf you’re looking to pick up PHP, look for the LAMP stack, which stands for **L**inux, **A**pache, **M**ySQL, and **P**HP. With that tech stack, you’ll have everything you need to start creating websites in no time.\n\n#### Modern PHP Frameworks and Their Impact\n\nIf we’re talking about PHP frameworks, then we gotta talk about [Laravel](https://laravel.com/) and [Symfony](https://symfony.com/). They are like the rockstars of the modern PHP world.\n\nLaravel comes with a lot of tools and features that help you speed up your development process. On the other side, Symfony has a modular architecture, making it a solid choice for projects of all sizes.\n\nThese frameworks showcase how PHP has evolved, staying relevant and powerful in the ever-changing landscape of web development.\n\n#### Pros and Cons of PHP\n\nLet’s take a look at some of the most common advantages of going with PHP for the backend and some cons to discuss why it might not be the best choice for you.\n\n##### Pros\n\n- PHP is designed for web development, which still makes it a very popular choice for a backend language.\n- PHP’s community is quite big, considering how old the language is, so if you need help, chances are, someone has the answer you’re looking for.\n\n##### Cons\n\n- One of the major complaints developers have about the language is its inconsistent function naming convention. While not a huge problem, it makes it very hard for developers to intuitively find the right function by name. This causes you to constantly verify your code against the documentation to make sure you’re not making mistakes.\n\n### Go\n\nNow, let's close in on Go, the programming language born at Google that's all about simplicity and efficiency. Go embraces a clean and straightforward syntax. Despite its simplicity, it focuses heavily on performance, making it an excellent choice for building modern, scalable applications.\n\nAccording to the [PYPL index](https://pypl.github.io/PYPL.html) (using Google searches to weigh interest of developers in a particular language), we can see a clear worldwide growing interest in Go from the development community:\n\n![Go Interest](/guides/backend-languages/pypl-go-index.png)\n\n#### Concurrency and Scalability\n\nGo stands out in the crowd, especially when it comes to handling concurrency and scalability. Its built-in support for concurrent programming, through goroutines and channels, makes it a standout choice for applications that need to juggle multiple tasks simultaneously. This makes Go particularly adept at handling the demands of today's highly concurrent and distributed systems. In other words, Go is a great choice for building microservices, a type of system that is very commonly used as the backend for complex web applications.\n\nSo yes, very relevant.\n\n#### Learning Curve and Developer Productivity\n\nLearning Go is a smooth ride, thanks to its simplicity and extensive documentation. Developers often find themselves quickly transitioning from understanding the basics to building robust applications.\n\nThe language's focus on developer productivity is evident in its quick compilation times and the absence of excessive boilerplate code, allowing developers to concentrate on building features rather than wrestling with the language itself.\n\n#### Pros and Cons of Go\n\nLet’s take a look at some pros and cons for the last programming language on our list.\n\n##### Pros\n\n- Go code compiles quickly, which in turn leads to very fast development cycles. This is a big plus if you’re developing a big application with a large codebase because other options might slow down your process with their compilation times.\n- Go's syntax is simple enough to make it easy to learn and understand for new developers.\n\n##### Cons\n\n- Go’s ecosystem is quite young when compared to the other alternatives here, so the maturity of the tools available might not be the same as, for example, Java or JavaScript tooling.\n\n## Choosing the Ideal Backend Language\n\nSo, are these the best backend programming languages out there? Is there an absolute “best” backend programming language?\n\nAs you’ve probably seen by now, there is no “perfect” or “ideal” backend language. When it comes to picking one out of the huge number of alternatives, you have to consider other aspects outside of the language itself:\n\n- What’s the size of your project? Are you building a large-scale platform? Or just a basic static website?\n- Do you mind spending more time learning or do you need to be efficient and start coding right away?\n- Do you already have some programming knowledge and would like to pick something that resembles what you already know? Or would you like to pick up something that’s entirely different?\n- Are you alone? Or are you part of a team?\n\nOnce you’ve answered those questions, you’ll probably have some idea of where to go, but then you should look into the language itself, specifically into:\n\n- Does it have enough learning resources for you?\n- How big and active is the community around it?\n- Are the main frameworks still under development? Or have they been parked for a while?\n\nIn the end, you’re evaluating the language and its ecosystem, making sure they’re both evolving right along the web industry. If you find that there are aspects that are falling behind, then it probably isn’t a good choice.\n\nA handy tool when trying to evaluate a language like that is [roadmap.sh](https://roadmap.sh).\n\n[![Roadmap.sh](/guides/backend-languages/backend-roadmap-part.png)](https://roadmap.sh/backend)\n\n<p align=\"center\" style=\"font-size: 14px; margin-top: -10px; text-align: center\">Small section of the full backend roadmap available on <a href=\"https://roadmap.sh/backend\">roadmap.sh</a></p>\n\nThere you’ll find community-maintained roadmaps for many career paths within software development. In particular, for this article, the [backend roadmap](https://roadmap.sh/backend) is a great place to start, because while picking a backend language is important, you’ll see there that it’s not just about the language. In fact, there is a lot of tech around the language that is also required (I’m referring to databases, git, understanding how client-server communication works, and a big “etc).\n\n## What are backend languages?\n\nWhen it comes to web development, there is a very clear distinction between frontend and backend technologies.\n\nWhile the frontend ecosystem is quite limited to JavaScript (and other JavaScript-based languages, like TypeScript) due to Browser compatibility, the backend (A.K.A server-side) is a very different scenario.\n\n![Backend Languages](/guides/backend-languages/back-vs-front.png)\n\nPlease note that neither of those lists is extensive, as they’re both constantly growing.\n\nYou can think of a backend language as one that “runs on the server side”. That said, by that definition, any language is a backend language because even JavaScript nowadays can be used on the backend as well (thanks to Node, Bun, and Deno).\n\nHowever, we can go one step further and say:\n\n> “A backend language is a server side programming language that has the tools and frameworks required to build web backends”\n\nThat will narrow down the list a little bit. But essentially, we can think of backend languages as anything that fits the following list:\n\n- Is able to listen for incoming HTTP/S connections.\n- Can access databases.\n- Can send HTTP/S requests.\n- Can access the filesystem.\n- Has a rich ecosystem of tools and frameworks to build web applications.\n\nWith those features and a rich ecosystem of libraries and frameworks, a language can definitely be considered “backend-ready”.\n\n## Why learn a backend programming language?\n\nIf you’re already a backend developer, then the main reason would be to become a more versatile developer. The more languages you know, the better code you’ll write. Either because you’ve learned different ways of solving the same problem, or simply because you’ll be able to contribute to more projects.\n\nIf, on the other hand, you’re just getting started, the main reason would be that you’re entering an industry that’s always looking for people.\n\n## Is the market in demand for backend developers?\n\nOne thing to keep in mind right now is that the software development market is always in demand for devs. For example, the [U.S. Bureau of Labor Statistics gives our industry a 25% growth rate](https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm) (demand-wise) from 2022 to 2023, whereas the mean for other industries is 3%.\n\nAccording to [JetBrains, during 2022, 75% of developers were involved with web development](https://www.jetbrains.com/lp/devecosystem-2022/) in one fashion or another, so whether you’re backend devs or frontend devs, there is always someone looking for you.\n\nThat said, we also have to consider that this industry is becoming a global industry. While some countries might still be fighting that process back, most developers can directly access the global market and work for any company in the world.\n\nThat is a great opportunity for a backend developer who lives in an area where there isn’t a big IT industry; however, it also means competing with every other developer in the world. That might cause the illusion that the IT industry is in recession or that there are no job opportunities for developers.\n\nThere are always opportunities; it’s just that you're now after the same job that many others from around the world are after as well.\n\nThat said, backend devs are always in high demand because they’re the bread and butter of any web application. They’re always required to create the underlying platform that will power most systems, so the key to standing out here is to stay up-to-date with the industry’s trends and technologies.\n\nDon’t get me wrong. You can’t possibly be expected to keep up with every single programming language that is released or with all the new frameworks that are created every month. However, keeping an eye on the industry and understanding what survives long enough to become a new industry standard is important. You have to keep updating yourself and learning new technologies/skills constantly; that way, you’ll stay relevant.\n\n## Is learning a backend language good for your career?\n\nWhether you’re a frontend developer looking to become full-stack (someone who can code both the backend and the frontend of an application), or if you’re new to the industry and you’re thinking if this might be the best place for you, the answer is “yes”.\n\nBackend developers are always in demand, so adding a new tool to your already existing toolbelt (if you’re already a dev) will only make you more flexible in the eyes of your employer.\n\nBut remember, a language is just a language until you give it context. If you’re wondering whether or not one of the backend languages in this article might be for you, the answer will always be “yes”. However, understand that if backend development is new to you, you will also need to pick up other skills and backend technologies around the language, such as:\n\n- Understanding HTTP.\n- Learning Structured Query Language (SQL) to query your databases.\n- Understanding how APIs work.\n- What server side rendering means and how to take advantage of it.\n- What web servers are and how to use them/build them.\n\nOtherwise, you’ll understand the language, but you won’t know how to use it for the role of backend development.\n\n## Jumpstarting Your Backend Development Journey\n\nTo get started with your backend development journey, it's crucial to have a roadmap that guides you through the learning process and equips you with the skills to build robust and scalable backend systems.\n\nLucky for you, if you’re reading this, that means you’ve found the most complete and comprehensive roadmap online: [roadmap.sh](https://roadmap.sh), the current [backend roadmap](https://roadmap.sh/backend) is filled with details of everything you should and could (optionally) learn in your journey to becoming a backend developer.\n\n## Guided Learning: From Online Courses to Bootcamps\n\nOnline courses and bootcamps serve as invaluable companions on your learning expedition. Platforms like Udemy, Coursera, and freeCodeCamp offer comprehensive backend development courses.\n\nThese resources not only cover programming languages like Python, Java, or JavaScript but also dive deep into frameworks like Django, Express.js, or Laravel. For those seeking a more immersive experience, coding bootcamps provide intensive, hands-on training to fast-track your backend development skills.\n\nWhatever choice you go for, make sure you’re not following trends or just copying the learning methods of others. Learning is a very personal experience and what works for others might not work for you, and vice versa. So make sure to do the proper research and figure out what option works best for you.\n\n## Building Community Connections for Learning Support\n\nJoining developer communities (there are several on Twitter for example), forums like Stack Overflow, or participating in social media groups dedicated to backend development creates a network of support.\n\nEngaging with experienced developers, sharing challenges, and seeking advice fosters a collaborative learning environment. Attend local meetups or virtual events if you can to connect with professionals in the field, gaining insights and building relationships that can prove invaluable throughout your journey.\n\n## Think about you and your project\n\nThere are many ways to go about picking the ideal backend language for you. If there is anything you should take home with you after reading this article, it is that most languages are equivalent in the sense that you’ll be able to do pretty much everything with any of them.\n\nSo what criteria can you use to pick the “right one” for you?\n\nThe questions you should also be asking yourself are:\n\n- What’s your preference for a language? Do you like Object Oriented Programming (OOP) or are you more of a functional programming type of dev? Do you like statically typed programming languages or loosely typed ones? Personal preferences should also play an important role at the time of picking your ideal programming language.\n- What does my project need? After all, project requirements sometimes dictate technology. Keep that in mind, check if the project’s needs and your personal preferences align, and try to weigh in pros and cons if they don’t.\n\nIn the end, personal preference and actual project requirements (if you have any) are very important, because both will influence how much you enjoy (or don’t enjoy) the learning process.\n\n## Crafting a Portfolio to Display Your Backend Skills:\n\nAs you accumulate skills and knowledge, showcase your journey through a well-crafted portfolio. Include projects that highlight your backend skills, demonstrating your ability to - design databases, implement server-side logic, and integrate with client side technologies. Whether it's a dynamic web application, a RESTful API, or a data-driven project, your portfolio becomes a tangible representation of your backend development capabilities for potential employers or collaborators.\n\nWhen it comes to deciding where to publish this portfolio, you have some options, such as directly on your GitHub profile (if you have one), or perhaps on your own personal website where you can share some design thoughts about each project along with the code.\n\nIn the end, the important thing is that you should be sharing your experience somewhere, especially when you don’t have working experience in the field.\n\n## Conclusion\n\nIn the end, there are many backend programming languages to choose from, and what language you go for, is up to you and your particular context/needs. All I can do is guide you to the door, but you have to cross it yourself. Some interesting options are:\n\n- Python with its English-like syntax.\n- Java with its formal syntax and enterprise support.\n- JavaScript with its flexibility and ability to jump between frontend and backend.\n- PHP with its proven record of success.\n- And Go, with its performance and scalability focus.\n\nYou’re the one who gets to decide, but just know that no matter what you choose, getting started in backend development is a one-way street. You’ll be learning from this moment on, and you’ll be jumping from one language to the other as the field evolves.\n\nRemember that there is a very detailed version of a [backend roadmap here](https://roadmap.sh/backend), it might be a great place to get started! And if you’re also interested in frontend development, there is an [equally handy roadmap](https://roadmap.sh/frontend) here as well!\n";
				}
				function compiledContent$F() {
					return html$F;
				}
				function getHeadings$F() {
					return [{"depth":2,"slug":"top-5-backend-languages-to-learn-for-web-development","text":"Top 5 Backend Languages to Learn for Web Development"},{"depth":3,"slug":"python","text":"Python"},{"depth":4,"slug":"beginner-accessibility-and-learning-resources","text":"Beginner Accessibility and Learning Resources"},{"depth":4,"slug":"practical-applications-and-popular-frameworks","text":"Practical Applications and Popular Frameworks"},{"depth":5,"slug":"django","text":"Django"},{"depth":5,"slug":"flask","text":"Flask"},{"depth":4,"slug":"pros-and-cons-of-python","text":"Pros and Cons of Python"},{"depth":5,"slug":"pros","text":"Pros"},{"depth":5,"slug":"cons","text":"Cons"},{"depth":3,"slug":"java","text":"Java"},{"depth":4,"slug":"is-it-worth-learning-java","text":"Is it worth learning Java?"},{"depth":4,"slug":"use-cases-and-robust-ecosystem","text":"Use Cases and Robust Ecosystem"},{"depth":4,"slug":"pros-and-cons-of-java","text":"Pros and Cons of Java"},{"depth":5,"slug":"pros-1","text":"Pros"},{"depth":5,"slug":"cons-1","text":"Cons"},{"depth":3,"slug":"javascript-nodejs","text":"JavaScript (Node.js)"},{"depth":4,"slug":"learning-advantages-of-nodejs","text":"Learning Advantages of Node.js"},{"depth":4,"slug":"key-frameworks-and-development-tools","text":"Key Frameworks and Development Tools"},{"depth":4,"slug":"does-it-make-sense-to-pick-up-javascript-as-a-backend-language","text":"Does it make sense to pick up JavaScript as a backend language?"},{"depth":4,"slug":"pros-and-cons-of-javascript","text":"Pros and Cons of JavaScript"},{"depth":5,"slug":"pros-2","text":"Pros"},{"depth":5,"slug":"cons-2","text":"Cons"},{"depth":3,"slug":"php","text":"PHP"},{"depth":4,"slug":"ease-of-mastery-and-vast-library-support","text":"Ease of Mastery and Vast Library Support"},{"depth":4,"slug":"modern-php-frameworks-and-their-impact","text":"Modern PHP Frameworks and Their Impact"},{"depth":4,"slug":"pros-and-cons-of-php","text":"Pros and Cons of PHP"},{"depth":5,"slug":"pros-3","text":"Pros"},{"depth":5,"slug":"cons-3","text":"Cons"},{"depth":3,"slug":"go","text":"Go"},{"depth":4,"slug":"concurrency-and-scalability","text":"Concurrency and Scalability"},{"depth":4,"slug":"learning-curve-and-developer-productivity","text":"Learning Curve and Developer Productivity"},{"depth":4,"slug":"pros-and-cons-of-go","text":"Pros and Cons of Go"},{"depth":5,"slug":"pros-4","text":"Pros"},{"depth":5,"slug":"cons-4","text":"Cons"},{"depth":2,"slug":"choosing-the-ideal-backend-language","text":"Choosing the Ideal Backend Language"},{"depth":2,"slug":"what-are-backend-languages","text":"What are backend languages?"},{"depth":2,"slug":"why-learn-a-backend-programming-language","text":"Why learn a backend programming language?"},{"depth":2,"slug":"is-the-market-in-demand-for-backend-developers","text":"Is the market in demand for backend developers?"},{"depth":2,"slug":"is-learning-a-backend-language-good-for-your-career","text":"Is learning a backend language good for your career?"},{"depth":2,"slug":"jumpstarting-your-backend-development-journey","text":"Jumpstarting Your Backend Development Journey"},{"depth":2,"slug":"guided-learning-from-online-courses-to-bootcamps","text":"Guided Learning: From Online Courses to Bootcamps"},{"depth":2,"slug":"building-community-connections-for-learning-support","text":"Building Community Connections for Learning Support"},{"depth":2,"slug":"think-about-you-and-your-project","text":"Think about you and your project"},{"depth":2,"slug":"crafting-a-portfolio-to-display-your-backend-skills","text":"Crafting a Portfolio to Display Your Backend Skills:"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$F = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$F;
					content.file = file$F;
					content.url = url$F;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$F)}`;
				});

const __vite_glob_0_4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$F,
	compiledContent: compiledContent$F,
	default: Content$F,
	file: file$F,
	frontmatter: frontmatter$F,
	getHeadings: getHeadings$F,
	rawContent: rawContent$F,
	url: url$F
}, Symbol.toStringTag, { value: 'Module' }));

const html$E = "<p>As backend developers, showcasing our work to others is not straightforward, given that what we do is not very visible.</p>\n<p>That said, having a project portfolio, even as backend developers, it’s very important, as it can lead to new job opportunities.</p>\n<p>As an added bonus, the experience you get out of the entire process of building the apps for your portfolio will help you improve your coding skills.</p>\n<p>Let’s take a look at 20 of the best backend projects you can work on to improve both your project portfolio and to <a href=\"https://roadmap.sh/backend\" target=\"_blank\">learn backend development</a>.</p>\n<p>Keep in mind that these project ideas are organized from easiest to hardest to complete, and the entire list should take you at least a year to complete, if you’re not rushing the process.</p>\n<p>So sit back, grab a cup of your favorite hot drink, and let’s get started!</p>\n<h2 id=\"1-personal-blogging-platform-api\">1. Personal Blogging Platform API</h2>\n<p><strong>Difficulty</strong>: Easy</p>\n<p><strong><em>Skills and technologies used</em></strong>: CRUD for main operations, databases (SQL or NoSQL), server-side RESTful API.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/blogging-platform-api.png\" alt=\"Blogging Platform API\"></p>\n<p>Let’s start with a very common one when it comes to backend projects.</p>\n<p>This is a RESTful API that would power a personal blog. This implies that you’d have to create a backend API with the following responsibilities:</p>\n<ul>\n<li>Return a list of articles. You can add filters such as publishing date, or tags.</li>\n<li>Return a single article, specified by the ID of the article.</li>\n<li>Create a new article to be published.</li>\n<li>Delete a single article, specified by the ID.</li>\n<li>Update a single article, again, you’d specify the article using its ID.</li>\n</ul>\n<p>And with those endpoints you’ve covered the basic CRUD operations (<strong>C</strong>reate, <strong>R</strong>ead, <strong>U</strong>pdate and <strong>D</strong>elete).</p>\n<p>As a recommendation for techstack, you could use <a href=\"https://fastify.dev/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Fastify</a> as the main backend framework if you’re going with Node, or perhaps <a href=\"https://www.djangoproject.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Django</a> for Python or even <a href=\"https://rubyonrails.org/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Ruby on Rails</a> or <a href=\"https://sinatrarb.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Sinatra</a> for Ruby. As for your database, you could use <a href=\"https://www.mongodb.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">MongoDB</a> if you want to try NoSQL or <a href=\"https://www.mysql.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">MySQL</a> if you’re looking to get started with relational databases first.</p>\n<h2 id=\"2-to-do-list-api\">2. To-Do List API</h2>\n<p><strong><em>Difficulty</em></strong>: Easy</p>\n<p><strong><em>Skills and technologies used</em></strong>: REST API design, JSON, basic authentication middleware.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/todo-list-api-bsrdd.png\" alt=\"To-Do List API\"></p>\n<p>We’re continuing with the APIs for our backend project ideas, this time around for a To-Do application. Why is it different from the previous one?</p>\n<p>While the previous project only focused on the main CRUD operations, here we’ll add some more interesting responsibilities, such as:</p>\n<ol>\n<li>An authentication logic, which means you’ll have to keep a new table of users and their credentials</li>\n<li>You’ll have to create both users and tasks.</li>\n<li>You’ll also have to be able to update tasks (their status) and even delete them.</li>\n<li>Get a list of tasks, filter them by status and get the details of each one.</li>\n</ol>\n<p>You’re free to implement this with whatever programming language and framework you want, however, you could continue using the same stack from the previous project.</p>\n<h2 id=\"3-weather-api-wrapper-service\">3. Weather API Wrapper Service</h2>\n<p><strong><em>Difficulty</em></strong>: Easy</p>\n<p><strong><em>Skills and technologies used</em></strong>: Third-party API integration, caching strategy, environment variable management.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/weather-api-f8i1q.png\" alt=\"Weather API Wrapper Service\"></p>\n<p>Let’s take our API magic to the next level with this new backend project. Now instead of just relying on a database, we’re going to tackle two new topics:</p>\n<ul>\n<li>Using external services.</li>\n<li>Adding caching through the use of a quick in-memory storage.</li>\n</ul>\n<p>As for the actual weather API to use, you can use your favorite one, as a suggestion, here is a link to <a href=\"https://www.visualcrossing.com/weather-api\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Visual Crossing’s API</a>, it’s completely FREE and easy to use.</p>\n<p>Regarding the in-memory cache, a pretty common recommendation is to use <a href=\"https://redis.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Redis</a>, you can read more about it <a href=\"https://redis.io/docs/manual/client-side-caching/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">here</a>, and as a recommendation, you could use the city code entered by the user as the key, and save there the result from calling the API.</p>\n<p>At the same time, when you “set” the value in the cache, you can also give it an expiration time in seconds (using the EX flag on the <a href=\"https://redis.io/commands/set/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">SET command</a>). That way the cache (the keys) will automatically clean itself when the data is old enough (for example, giving it a 12-hours expiration time).</p>\n<h2 id=\"4-expense-tracker-api\">4. Expense Tracker API</h2>\n<p><strong><em>Difficulty</em></strong>: Easy</p>\n<p><strong><em>Skills and technologies used</em></strong>: Data modeling, user authentication (JWT).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/expense-tracker-api-m72p5.png\" alt=\"Expense Tracker API\"></p>\n<p>For the last of our “easy” backend projects, let’s cover one more API, an expense tracker API. This API should let you:</p>\n<ul>\n<li>Sign up as a new user.</li>\n<li>Generate and validate JWT tokens for handling authentication and user session.</li>\n<li>List and filter your past expenses. You can add the following filters:\n<ul>\n<li>Past week.</li>\n<li>Last month.</li>\n<li>Last 3 months.</li>\n<li>Custom (to specify a start and end date of your choosing).</li>\n</ul>\n</li>\n<li>Add new expenses.</li>\n<li>Remove existing expenses.</li>\n<li>Update existing expenses.</li>\n</ul>\n<p>Let’s now add some constraints:</p>\n<ul>\n<li>You’ll be using <a href=\"https://itnext.io/demystifying-jwt-a-guide-for-front-end-developers-ead6574531c3\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">JWT</a> (JSON Web Token) to protect the endpoints and to identify the requester.</li>\n<li>For the different expense categories, you can use the following list (feel free to decide how to implement this as part of your data model):\n<ul>\n<li>Groceries</li>\n<li>Leisure</li>\n<li>Electronics</li>\n<li>Utilities</li>\n<li>Clothing</li>\n<li>Health</li>\n<li>Others.</li>\n</ul>\n</li>\n</ul>\n<p>As a recommendation, you can use MongoDB or an ORM for this project, such as <a href=\"https://mongoosejs.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Mongoose</a> (if you’re using JavaScript/Node for this).</p>\n<p>From everything you’ve done so far, you should feel pretty confident next time you have to build a new API.</p>\n<h2 id=\"5-markdown-note-taking-app\">5. Markdown Note-taking App</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: Text processing, Markdown libraries, persistent storage, REST API with file upload.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/markdown-note-taking-app-tymi3.png\" alt=\"Markdown Note-taking App\"></p>\n<p>You’ve been building APIs all this time, so that concept alone should not be a problem by now. However, we’re increasing the difficulty by allowing file uploads through your RESTful API. You’ll need to understand how that part works inside a RESTful environment and then figure out a strategy to store those files while avoiding name collisions.</p>\n<p>You’ll also have to process the text in the following ways:</p>\n<ul>\n<li>You’ll provide an endpoint to check the grammar of the note.</li>\n<li>You’ll also provide an endpoint to save the note that can be passed in as Markdown text.</li>\n<li>Return the HTML version of the Markdown note (rendered note) through another endpoint.</li>\n</ul>\n<p>As a recommendation, if you’re using JavaScript for this particular project, you could use a library such as <a href=\"https://www.npmjs.com/package/multer\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Multer</a>, which is a Node.js module.</p>\n<h2 id=\"6-url-shortening-service\">6. URL Shortening Service</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: Database indexing, HTTP redirects, RESTful endpoints</p>\n<p><img src=\"https://assets.roadmap.sh/guest/url-shortening-service-c1nzi.png\" alt=\"URL Shortening Service\"></p>\n<p>We’re now moving away from your standard APIs, and tackling URL shortening. This is a very common service, which allows you to shorten very long URLs, especially when looking to share them on social media or make them easily memorable.</p>\n<p>For this project idea let’s focus on the following features, which you should be more than capable of implementing on your local environment, no matter your OS.</p>\n<ul>\n<li>Ability to pass a long URL as part of the request and get a shorter version of it. You’re free to decide how you’ll perform the shortening .</li>\n<li>Save the shorter and longer versions of the URL in the database to be used later during redirection.</li>\n<li>Configure a catch-all route on your service that gets all the traffic (no matter the URI used), finds the correct longer version and performs a redirection so the user is seamlessly redirected to the proper destination.</li>\n</ul>\n<h2 id=\"7-real-time-polling-app\">7. Real-time Polling App</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: WebSockets, live data updates, state management</p>\n<p><img src=\"https://assets.roadmap.sh/guest/realtime-polling-app-8qx5h.png\" alt=\"Real-time Polling App\"></p>\n<p>Time to leave APIs alone for a while and focus on real-time interactions, another hot topic in web development. In fact, let’s try to use some sockets.</p>\n<p>Sockets are a fantastic way of enabling 2-way communication between two or more parties (systems) with very few lines of code. Read more about sockets <a href=\"https://www.digitalocean.com/community/tutorials/understanding-sockets\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">here</a>.</p>\n<p>That being said, we’re building both a client and a server for this project. The client can easily be a CLI (Command Line Interface) tool or a terminal program that will connect to the server and show the information being returned in real-time.</p>\n<p>The flow for this first socket-based project is simple:</p>\n<ul>\n<li>The client connects to the server and sends a pre-defined request.</li>\n<li>The server upon receiving this request, will send, through the same channel, an automatic response.</li>\n</ul>\n<p>While the flow might seem very similar to how HTTP-based communication works, the implementation is going to be very different. Keep in mind that from the client perspective, the request is sent, and there is no waiting logic, instead, the client will have code that gets triggered when the message from the server is received.</p>\n<p>This is a great first step towards building more complex socket-based systems.</p>\n<h2 id=\"8-simple-e-commerce-api\">8. Simple E-commerce API</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: Shopping cart logic, payment gateway integration (Stripe, PayPal), product inventory management</p>\n<p><img src=\"https://assets.roadmap.sh/guest/simple-ecommerce-api-thzqo.png\" alt=\"Simple E-commerce API\"></p>\n<p>Back to the world of APIs, this time around we’re pushing for a logic-heavy implementation.</p>\n<p>For this one, you’ll have to keep in mind everything we’ve been covering so far:</p>\n<ul>\n<li>JWT authentication to ensure many users can interact with it.</li>\n<li>Interaction with external services. Here you’ll be integrating with payment gateways such as Stripe.</li>\n<li>A complex data model that can handle products, shopping carts, and more.</li>\n</ul>\n<p>With that in mind, let’s take a look at the responsibilities of this system:</p>\n<ul>\n<li>JWT token creation and validation to handle authorization.</li>\n<li>Ability to create new users.</li>\n<li>Shopping cart management, which involves payment gateway integration as well.</li>\n<li>Product listings.</li>\n<li>Ability to create and edit products in the database.</li>\n</ul>\n<p>This project might not seem like it has a lot of features, but it compensates in complexity, so don’t skip it, as it acts as a great progress check since it’s re-using almost every skill you’ve picked up so far.</p>\n<h2 id=\"9-fitness-workout-tracker\">9. Fitness Workout Tracker</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: User-specific data storage, CRUD for workout sessions, date-time manipulation.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/fitness-workout-tracker-82uux.png\" alt=\"Fitness Workout Tracker\"></p>\n<p>This backend project is not just about taking in user-generated notes, but rather, about letting users create their own workout schedules with their own exercises and then go through them, checking the ones they’ve done, and the ones they haven’t.</p>\n<p>Making sure you also give them the space to add custom notes, with remarks about how the exercise in question felt and if they want to tweak it in the future.</p>\n<p>Keep in mind the following responsibilities for this backend project:</p>\n<ul>\n<li>There needs to be a user sign-up and log-in flow in this backend system, as many users should be able to use it.</li>\n<li>There needs to be a secure JWT flow for authentication.</li>\n<li>The system should let users create workouts composed of multiple exercises.</li>\n<li>For each workout, the user will be able to update it and provide comments on it.</li>\n<li>The schedule the user creates needs to be associated to a specific date, and any listing of active or pending workouts needs to also be sorted by date (and time if you want to take it one step further).</li>\n<li>There should also be a report of past workouts, showing the percentage of finished workouts during the queried period.</li>\n</ul>\n<p>The data model for this one can also be complex, as you’ll have predefined exercises that need to be grouped into workout sessions, and those can then have associated comments (input from the user).</p>\n<p><img src=\"https://assets.roadmap.sh/guest/fitness-workout-tracker-datamodel-5mrkq.png\" alt=\"Fitness Workout Tracker Data Model\"></p>\n<p>Consider the benefits of using a structured model here vs something document-based, such as MongoDB and pick the one that feels better for your implementation.</p>\n<h2 id=\"10-recipe-sharing-platform\">10. Recipe Sharing Platform</h2>\n<p><strong><em>Difficulty</em></strong>: Moderate</p>\n<p><strong><em>Skills and technologies used</em></strong>: File uploads and image processing (like Sharp), user permissions, complex querying</p>\n<p><img src=\"https://assets.roadmap.sh/guest/recipe-sharing-platform-jzs08.png\" alt=\"Recipe Sharing Platform\"></p>\n<p>While this project might feel a lot like the first one, the personal blogging platform, we’re taking the same concept, and then adding a lot more on top of it.</p>\n<p>We’re building a RESTful API (or rather several) that will let you perform the following actions:</p>\n<ul>\n<li>Access a list of recipes. You should be able to filter by keywords (text input), publication date, by chef, and by labels. Access to this endpoint should be public.</li>\n<li>The list should be paginated, and as part of the response on every page.</li>\n<li>Users should be able to sign up as chefs to the system to upload their own recipes.</li>\n<li>A JWT-secured login flow must be present to protect the endpoints in charge of creating new recipe posts.</li>\n<li>Images uploaded as part of the recipe should be processed to be re-sized into a standard size (you pick the dimensions). You can use a library such as <a href=\"https://sharp.pixelplumbing.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Sharp</a> for this.</li>\n</ul>\n<h2 id=\"11-movie-reservation-system\">11. Movie Reservation System</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Relational data modeling (SQL), seat reservation logic, transaction management, schedule management.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/movie-reservation-system-5823e.png\" alt=\"Movie Reservation System\"></p>\n<p>There are very expensive pre-made tools that handle all this logic for companies, and the following diagram shows you a glimpse of that complexity.</p>\n<p>As backend projects go, this one is a great example of the many different problems you might need to solve while working in web development.</p>\n<p>A movie reservation system should allow any user to get tickets and their associated seats for any movie playing the specific day the user is looking to attend. This description alone already provides a lot of features and constraints we have to keep in mind:</p>\n<ul>\n<li>We’re going to have a list of movies (and maybe theaters as well).</li>\n<li>Each movie will have a recurring schedule for some time and then it’ll be taken out to never return.</li>\n<li>Users should be able to list movies, search for them and filter by dates, genres and even actors.</li>\n<li>Once found, the user should be able to pick the seats for their particular movie of choice, and for their date of choice.</li>\n<li>This leads us to you having to keep a virtual representation of your movie theater to understand seating distribution and availability.</li>\n<li>In the end, the user should also be able to pay using an external payment gateway such as Stripe (we’ve already covered this step in the past).</li>\n</ul>\n<h2 id=\"12-restaurant-review-platform-api-with-automatic-nlp-analysis\">12. Restaurant Review Platform (API) with automatic NLP analysis</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: RESTful API, In-memory database (for live leaderboard), SQL, Natural Language Processing to auto-label positive and negative comments.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/restaurant-review-platform-26c1f.png\" alt=\"Restaurant Review Platform\"></p>\n<p>Now this project takes a turn into the land of noSQL and AI by leading with user input. The aim of this particular backend project is to provide a very simple API that will let users:</p>\n<ul>\n<li>Input their own review of a restaurant (ideally, the API should request the restaurant’s ID to make sure users are reviewing the correct one).</li>\n<li>Keep a leaderboard of restaurants with a generic positive or negative score, based on the type of reviews these restaurants get. For this, you can use Redis as an in-memory leaderboard to have your API query it, instead of hitting the database you’re using. This also implies that you’ll have to keep the leaderboard updated on Redis as well (as a hint: look for type <a href=\"https://redis.io/docs/data-types/sorted-sets/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">SortedSet</a> data type to understand how to do this).</li>\n<li>Perform NLP (Natural Language Processing) on the user’s text portion of the review, to understand if it’s a positive one or a negative one.</li>\n<li>Use the result of the NLP as a scoring system for the leaderboard.</li>\n</ul>\n<p>As a recommendation, you might want to use Python on this project, as there tend to be more libraries around NLP for this language.</p>\n<h2 id=\"13-multiplayer-battleship-game-server\">13. Multiplayer Battleship Game Server</h2>\n<p><strong>Difficulty</strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Game state synchronization, low-latency networking, concurrency control.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/multiplayer-battleship-lv5oj.png\" alt=\"Multiplayer Battleship Game Server\"></p>\n<p>For this project you’re not going to build a full game from scratch, so don’t worry.</p>\n<p>You will however, build a game server. Your game server will have to maintain the internal state of each player’s board, and it should also enable communication between them by broadcasting their actions and results. Since we have “low-latency networking” as a constraint here, the logical implementation would be through the use of Sockets (so if you haven’t done it yet, go back to project 7 and work on it first).</p>\n<p>You’re free to pick the programming language you feel more comfortable with, however, keep the mind that you’ll have to:</p>\n<ul>\n<li>Keep track of the player’s state and game state.</li>\n<li>Enable 2-way communication between players and server.</li>\n<li>Allow players to join the game and set up their initial state somehow.</li>\n</ul>\n<p>This can be a very fun project to work on, even if you’re “just” building a terminal version of this multiplayer game, as you’ll be using several of the concepts and technologies covered so far on this list.</p>\n<h2 id=\"14-database-backup-cli-utility\">14. Database Backup CLI utility</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Advanced SQL, Database fundamentals, CLI development, Node.js (for CLI)</p>\n<p><img src=\"https://assets.roadmap.sh/guest/database-backup-cli-jwrcj.png\" alt=\"Database Backup CLI utility\"></p>\n<p>We’re now moving away from the API world for a while, and into the world of command line interfaces, which is another very common space for backend developers to work on.</p>\n<p>This time around, the project is a CLI utility to back up an entire database.</p>\n<p>So for this project, you’ll be creating a command line utility that takes the following attributes:</p>\n<ul>\n<li><strong>Host:</strong> the host of your database (it can be localhost or anything else).</li>\n<li><strong>Username</strong>: the utility will need a username to login and query the database.</li>\n<li><strong>Password</strong>: same with the password, usually databases are protected this way.</li>\n<li><strong>DB Name</strong>: the name of the database to backup. We’re backing up the entire set of tables inside this database.</li>\n<li><strong>Destination folder</strong>: the folder where all the dump files will be stored.</li>\n</ul>\n<p>With all that information, your utility should be able to connect to the database, pull the list of tables, and for each one understand its structure and its data. In the end, the resulting files inside the destination folder should have everything you need to restore the database on another server simply by using these files.</p>\n<p>Finally, if you haven’t heard of it yet, you might want to check out the <a href=\"https://dev.mysql.com/doc/refman/8.3/en/show-create-table.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">SHOW CREATE TABLE</a> statement.</p>\n<h2 id=\"15-online-code-compiler-api\">15. Online Code Compiler API</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Sandboxing code execution, integration with compilers, WebSocket communication.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/online-code-compiler-c7xjb.png\" alt=\"Online Code Compiler API\"></p>\n<p>For this project, you’ll be building the backend of a remote code execution application. In other words, your APIs will allow you to receive source code written using a specific language of choice (you can pick the one you want, and only allow that one), run it and then return the output of that execution.</p>\n<p>Of course, doing this without any restrictions is not worth it for being in the “difficult” section of this list, so let’s kick it up a notch:</p>\n<ul>\n<li>The code execution should be done inside a safe sandbox, which means that the code can’t hurt or affect the system it’s running on, no matter what the code or the logic dictates.</li>\n<li>On top of that, for long-running tasks, the API should also provide a status report containing the following information:</li>\n<li>Time running.</li>\n<li>Start time of the execution.</li>\n<li>Lines of code being executed.</li>\n</ul>\n<h2 id=\"16-messaging-platform-backend\">16. Messaging Platform Backend</h2>\n<p><strong><em>Difficulty</em></strong>: Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Real-time messaging, end-to-end encryption, contact synchronization</p>\n<p><img src=\"https://assets.roadmap.sh/guest/messaging-platform-backend-96jpw.png\" alt=\"Messaging Platform Backend\"></p>\n<p>Yes, we’re talking about a chat platform here. And as a backend developer you’re more than ready to implement both the server and the client application.</p>\n<p>This backend project would take project #7 to the next level, by implementing the following responsibilities:</p>\n<ul>\n<li>Adding message encryption between client applications</li>\n<li>The ability to understand who’s online</li>\n<li>Understand if those users are interacting with you (a.k.a showing the “[username] is typing” message in real-time).</li>\n<li>Sending a message from one of the clients into the server should be broadcasted to the rest of the clients connected.</li>\n</ul>\n<p>As a recommendation for technology implementing this project, <a href=\"http://socket.io\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Socket.io</a> would be a perfect match. This means you’d be using JavaScript (node.js) for this.</p>\n<h2 id=\"17-content-delivery-network-cdn-simulator\">17. Content Delivery Network (CDN) Simulator</h2>\n<p><strong><em>Difficulty</em></strong>: Very Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Load balancing algorithms, caching strategies, network latency simulation</p>\n<p><img src=\"https://assets.roadmap.sh/guest/cdn-simulator-lv7kl.png\" alt=\"Content Delivery Network (CDN) Simulator\"></p>\n<p>For this particular backend project, we’re not going to focus on coding, but rather on backend tools and their configuration. A <a href=\"https://aws.amazon.com/es/what-is/cdn/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">CDN</a> (or Content Delivery Network) is a platform that allows you to serve static content (like text files, images, audio, etc) safely and reliably.</p>\n<p>Instead of having all files inside the same server, the content is replicated and distributed across a network of servers that can provide you with the files at any given point in time.</p>\n<p>The point of this project is for you to figure out a way to set up your own CDN keeping in mind the following points:</p>\n<ul>\n<li>Use cloud servers (you can pick your favorite cloud provider for this)</li>\n<li>Configure a load balancer to distribute the load between all servers.</li>\n<li>Set up a caching strategy.</li>\n</ul>\n<p>Remember that all major cloud providers have a free tier that allows you to use all their services for some time. AWS for example, allows for a full year of free tier limited to the type of resources you can use.</p>\n<h2 id=\"18-time-tracking-cli-for-freelancers\">18. Time-tracking CLI for Freelancers</h2>\n<p><strong><em>Difficulty</em></strong>: Very Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: time tracking, interactive CLI, Day.js for time operations, reporting.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/time-tracking-cli-freelancers-x7ldv.png\" alt=\"Time-tracking CLI for Freelancers\"></p>\n<p>As freelancers, sometimes understanding what you’re working on, or understanding how much time you’ve spent on a particular project once it’s time to get paid, can be a challenge.</p>\n<p>So, with this command line interface tool, we’ll try to solve that pain for freelancers. The tool you’re developing should let you specify that you’re starting to work on a project, and once you’re done, you should also be able to say that you’ve stopped.</p>\n<p>On top of that, there should be an interactive reporting mode that should tell you the amount of time spent so far on a particular project (with the ability to filter by date and time), so you can know exactly how much to charge each client.</p>\n<p>From the user’s POV, you could have commands like this:</p>\n<ul>\n<li>freelance start project1</li>\n<li>freelance stop project2</li>\n</ul>\n<p>And when in interactive mode, something like this should work:</p>\n<ul>\n<li>report project1 since 1/2/24</li>\n</ul>\n<p>The challenge on this backend project is not just the CLI itself, which you’ve built in the past, but the actual time tracking logic that needs to happen internally. You’ll be keeping track of small chunks of time associated with different backend projects, and once the report is requested, you need to properly query your DB and get only the right chunks, so you can later add them up and return a valid number.</p>\n<h2 id=\"19-js-obfuscator-cli-utility\">19. JS Obfuscator CLI utility</h2>\n<p><strong><em>Difficulty</em></strong>: Very Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: code obfuscation, batch processing of files using a CLI, Node.js.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/js-obfuscator-utility-f0dfi.png\" alt=\"JS Obfuscator CLI utility\"></p>\n<p>Code obfuscation happens when you turn a perfectly readable code into something that only a machine can understand, without changing the plain text nature of the file. In other words, you just make it impossible for a human to read and understand.</p>\n<p>Many tools do this in the JS ecosystem, it’s now your turn to create a new tool and perform the exact same action. As an added difficulty, you’ll be coding a tool that does this to an entire folder filled with files (not just one at the time).</p>\n<p>Make sure the output for each file is placed inside the same folder, with a “.obs.js” extension, and that you’re also navigating sub-folders searching for more files.</p>\n<p>Try to avoid libraries that already perform these exact same tasks, as you’ll be skipping through all the potential problems you can find, and effectively learning nothing from the experience.</p>\n<h2 id=\"20-web-scraper-cli\">20. Web Scraper CLI</h2>\n<p><strong><em>Difficulty</em></strong>: Very Difficult</p>\n<p><strong><em>Skills and technologies used</em></strong>: Web scraping, headless browsing, rules engine</p>\n<p><img src=\"https://assets.roadmap.sh/guest/webscraper-cli-ja5h2.png\" alt=\"Web Scraper CLI\"></p>\n<p>A web scraper is a tool that allows you to navigate a website through code, and in the process, capture information from the presented web pages.</p>\n<p>As part of the last backend project of this list, you’ll be implementing your very own web scraper CLI tool. This tool will take input from the user with a list of preset commands, such as:</p>\n<ul>\n<li>show code: to list the HTML code of the current page.</li>\n<li>navigate: to open a new URL</li>\n<li>capture: this will return a subsection of the HTML of the current page using the CSS selector you specify.</li>\n<li>click on: this command will trigger a click on a particular HTML element using a CSS selector provided.</li>\n</ul>\n<p>Feel free to add extra commands to make the navigation even more interactive.</p>\n<p>With the last of our backend project ideas, you’ve covered all the major areas involved in backend development and you’re more than ready to apply for a backend development job if you haven’t already.</p>\n<p>If you find a piece of technology that wasn’t covered here, you’ll have the skills required to pick it up in no time.</p>";

				const frontmatter$E = {"title":"20 Backend Project Ideas to take you from Beginner to Pro","description":"Seeking backend projects to enhance your skills? Explore our top 20 project ideas, from simple apps to complex systems. Start building today!","authorId":"fernando","excludedBySlug":"/backend/project-ideas","seo":{"title":"20 Backend Project Ideas to take you from Beginner to Pro","description":"Seeking backend projects to enhance your skills? Explore our top 20 project ideas, from simple apps to complex systems. Start building today!","ogImageUrl":"https://assets.roadmap.sh/guest/backend-project-ideas-ovr48.jpg"},"isNew":false,"type":"textual","date":"2024-05-09T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$E = "/workspaces/developer-roadmap/src/data/guides/backend-project-ideas.md";
				const url$E = undefined;
				function rawContent$E() {
					return "\nAs backend developers, showcasing our work to others is not straightforward, given that what we do is not very visible.\n\nThat said, having a project portfolio, even as backend developers, it’s very important, as it can lead to new job opportunities.\n\nAs an added bonus, the experience you get out of the entire process of building the apps for your portfolio will help you improve your coding skills.\n\nLet’s take a look at 20 of the best backend projects you can work on to improve both your project portfolio and to [learn backend development](https://roadmap.sh/backend).\n\nKeep in mind that these project ideas are organized from easiest to hardest to complete, and the entire list should take you at least a year to complete, if you’re not rushing the process.\n\nSo sit back, grab a cup of your favorite hot drink, and let’s get started!\n\n## 1. Personal Blogging Platform API\n\n**Difficulty**: Easy\n\n**_Skills and technologies used_**: CRUD for main operations, databases (SQL or NoSQL), server-side RESTful API.\n\n![Blogging Platform API](https://assets.roadmap.sh/guest/blogging-platform-api.png)\n\nLet’s start with a very common one when it comes to backend projects.\n\nThis is a RESTful API that would power a personal blog. This implies that you’d have to create a backend API with the following responsibilities:\n\n- Return a list of articles. You can add filters such as publishing date, or tags.\n- Return a single article, specified by the ID of the article.\n- Create a new article to be published.\n- Delete a single article, specified by the ID.\n- Update a single article, again, you’d specify the article using its ID.\n\nAnd with those endpoints you’ve covered the basic CRUD operations (**C**reate, **R**ead, **U**pdate and **D**elete).\n\nAs a recommendation for techstack, you could use [Fastify](https://fastify.dev/) as the main backend framework if you’re going with Node, or perhaps [Django](https://www.djangoproject.com/) for Python or even [Ruby on Rails](https://rubyonrails.org/) or [Sinatra](https://sinatrarb.com/) for Ruby. As for your database, you could use [MongoDB](https://www.mongodb.com/) if you want to try NoSQL or [MySQL](https://www.mysql.com/) if you’re looking to get started with relational databases first.\n\n## 2. To-Do List API\n\n**_Difficulty_**: Easy\n\n**_Skills and technologies used_**: REST API design, JSON, basic authentication middleware.\n\n![To-Do List API](https://assets.roadmap.sh/guest/todo-list-api-bsrdd.png)\n\nWe’re continuing with the APIs for our backend project ideas, this time around for a To-Do application. Why is it different from the previous one?\n\nWhile the previous project only focused on the main CRUD operations, here we’ll add some more interesting responsibilities, such as:\n\n1. An authentication logic, which means you’ll have to keep a new table of users and their credentials\n2. You’ll have to create both users and tasks.\n3. You’ll also have to be able to update tasks (their status) and even delete them.\n4. Get a list of tasks, filter them by status and get the details of each one.\n\nYou’re free to implement this with whatever programming language and framework you want, however, you could continue using the same stack from the previous project.\n\n## 3. Weather API Wrapper Service\n\n**_Difficulty_**: Easy\n\n**_Skills and technologies used_**: Third-party API integration, caching strategy, environment variable management.\n\n![Weather API Wrapper Service](https://assets.roadmap.sh/guest/weather-api-f8i1q.png)\n\nLet’s take our API magic to the next level with this new backend project. Now instead of just relying on a database, we’re going to tackle two new topics:\n\n- Using external services.\n- Adding caching through the use of a quick in-memory storage.\n\nAs for the actual weather API to use, you can use your favorite one, as a suggestion, here is a link to [Visual Crossing’s API](https://www.visualcrossing.com/weather-api), it’s completely FREE and easy to use.\n\nRegarding the in-memory cache, a pretty common recommendation is to use [Redis](https://redis.io/), you can read more about it [here](https://redis.io/docs/manual/client-side-caching/), and as a recommendation, you could use the city code entered by the user as the key, and save there the result from calling the API.\n\nAt the same time, when you “set” the value in the cache, you can also give it an expiration time in seconds (using the EX flag on the [SET command](https://redis.io/commands/set/)). That way the cache (the keys) will automatically clean itself when the data is old enough (for example, giving it a 12-hours expiration time).\n\n## 4. Expense Tracker API\n\n**_Difficulty_**: Easy\n\n**_Skills and technologies used_**: Data modeling, user authentication (JWT).\n\n![Expense Tracker API](https://assets.roadmap.sh/guest/expense-tracker-api-m72p5.png)\n\nFor the last of our “easy” backend projects, let’s cover one more API, an expense tracker API. This API should let you:\n\n- Sign up as a new user.\n- Generate and validate JWT tokens for handling authentication and user session.\n- List and filter your past expenses. You can add the following filters:\n    - Past week.\n    - Last month.\n    - Last 3 months.\n    - Custom (to specify a start and end date of your choosing).\n- Add new expenses.\n- Remove existing expenses.\n- Update existing expenses.\n\nLet’s now add some constraints:\n\n- You’ll be using [JWT](https://itnext.io/demystifying-jwt-a-guide-for-front-end-developers-ead6574531c3) (JSON Web Token) to protect the endpoints and to identify the requester.\n- For the different expense categories, you can use the following list (feel free to decide how to implement this as part of your data model):\n    - Groceries\n    - Leisure\n    - Electronics\n    - Utilities\n    - Clothing\n    - Health\n    - Others.\n\nAs a recommendation, you can use MongoDB or an ORM for this project, such as [Mongoose](https://mongoosejs.com/) (if you’re using JavaScript/Node for this).\n\nFrom everything you’ve done so far, you should feel pretty confident next time you have to build a new API.\n\n## 5. Markdown Note-taking App\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: Text processing, Markdown libraries, persistent storage, REST API with file upload.\n\n![Markdown Note-taking App](https://assets.roadmap.sh/guest/markdown-note-taking-app-tymi3.png)\n\nYou’ve been building APIs all this time, so that concept alone should not be a problem by now. However, we’re increasing the difficulty by allowing file uploads through your RESTful API. You’ll need to understand how that part works inside a RESTful environment and then figure out a strategy to store those files while avoiding name collisions.\n\nYou’ll also have to process the text in the following ways:\n\n- You’ll provide an endpoint to check the grammar of the note.\n- You’ll also provide an endpoint to save the note that can be passed in as Markdown text.\n- Return the HTML version of the Markdown note (rendered note) through another endpoint.\n\nAs a recommendation, if you’re using JavaScript for this particular project, you could use a library such as [Multer](https://www.npmjs.com/package/multer), which is a Node.js module.\n\n## 6. URL Shortening Service\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: Database indexing, HTTP redirects, RESTful endpoints\n\n![URL Shortening Service](https://assets.roadmap.sh/guest/url-shortening-service-c1nzi.png)\n\nWe’re now moving away from your standard APIs, and tackling URL shortening. This is a very common service, which allows you to shorten very long URLs, especially when looking to share them on social media or make them easily memorable.\n\nFor this project idea let’s focus on the following features, which you should be more than capable of implementing on your local environment, no matter your OS.\n\n- Ability to pass a long URL as part of the request and get a shorter version of it. You’re free to decide how you’ll perform the shortening .\n- Save the shorter and longer versions of the URL in the database to be used later during redirection.\n- Configure a catch-all route on your service that gets all the traffic (no matter the URI used), finds the correct longer version and performs a redirection so the user is seamlessly redirected to the proper destination.\n\n## 7. Real-time Polling App\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: WebSockets, live data updates, state management\n\n![Real-time Polling App](https://assets.roadmap.sh/guest/realtime-polling-app-8qx5h.png)\n\nTime to leave APIs alone for a while and focus on real-time interactions, another hot topic in web development. In fact, let’s try to use some sockets.\n\nSockets are a fantastic way of enabling 2-way communication between two or more parties (systems) with very few lines of code. Read more about sockets [here](https://www.digitalocean.com/community/tutorials/understanding-sockets).\n\nThat being said, we’re building both a client and a server for this project. The client can easily be a CLI (Command Line Interface) tool or a terminal program that will connect to the server and show the information being returned in real-time.\n\nThe flow for this first socket-based project is simple:\n\n- The client connects to the server and sends a pre-defined request.\n- The server upon receiving this request, will send, through the same channel, an automatic response.\n\nWhile the flow might seem very similar to how HTTP-based communication works, the implementation is going to be very different. Keep in mind that from the client perspective, the request is sent, and there is no waiting logic, instead, the client will have code that gets triggered when the message from the server is received.\n\nThis is a great first step towards building more complex socket-based systems.\n\n## 8. Simple E-commerce API\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: Shopping cart logic, payment gateway integration (Stripe, PayPal), product inventory management\n\n![Simple E-commerce API](https://assets.roadmap.sh/guest/simple-ecommerce-api-thzqo.png)\n\nBack to the world of APIs, this time around we’re pushing for a logic-heavy implementation.\n\nFor this one, you’ll have to keep in mind everything we’ve been covering so far:\n\n- JWT authentication to ensure many users can interact with it.\n- Interaction with external services. Here you’ll be integrating with payment gateways such as Stripe.\n- A complex data model that can handle products, shopping carts, and more.\n\nWith that in mind, let’s take a look at the responsibilities of this system:\n\n- JWT token creation and validation to handle authorization.\n- Ability to create new users.\n- Shopping cart management, which involves payment gateway integration as well.\n- Product listings.\n- Ability to create and edit products in the database.\n\nThis project might not seem like it has a lot of features, but it compensates in complexity, so don’t skip it, as it acts as a great progress check since it’s re-using almost every skill you’ve picked up so far.\n\n## 9. Fitness Workout Tracker\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: User-specific data storage, CRUD for workout sessions, date-time manipulation.\n\n![Fitness Workout Tracker](https://assets.roadmap.sh/guest/fitness-workout-tracker-82uux.png)\n\nThis backend project is not just about taking in user-generated notes, but rather, about letting users create their own workout schedules with their own exercises and then go through them, checking the ones they’ve done, and the ones they haven't.\n\nMaking sure you also give them the space to add custom notes, with remarks about how the exercise in question felt and if they want to tweak it in the future.\n\nKeep in mind the following responsibilities for this backend project:\n\n- There needs to be a user sign-up and log-in flow in this backend system, as many users should be able to use it.\n- There needs to be a secure JWT flow for authentication.\n- The system should let users create workouts composed of multiple exercises.\n- For each workout, the user will be able to update it and provide comments on it.\n- The schedule the user creates needs to be associated to a specific date, and any listing of active or pending workouts needs to also be sorted by date (and time if you want to take it one step further).\n- There should also be a report of past workouts, showing the percentage of finished workouts during the queried period.\n\nThe data model for this one can also be complex, as you’ll have predefined exercises that need to be grouped into workout sessions, and those can then have associated comments (input from the user).\n\n![Fitness Workout Tracker Data Model](https://assets.roadmap.sh/guest/fitness-workout-tracker-datamodel-5mrkq.png)\n\nConsider the benefits of using a structured model here vs something document-based, such as MongoDB and pick the one that feels better for your implementation.\n\n## 10. Recipe Sharing Platform\n\n**_Difficulty_**: Moderate\n\n**_Skills and technologies used_**: File uploads and image processing (like Sharp), user permissions, complex querying\n\n![Recipe Sharing Platform](https://assets.roadmap.sh/guest/recipe-sharing-platform-jzs08.png)\n\nWhile this project might feel a lot like the first one, the personal blogging platform, we’re taking the same concept, and then adding a lot more on top of it.\n\nWe’re building a RESTful API (or rather several) that will let you perform the following actions:\n\n- Access a list of recipes. You should be able to filter by keywords (text input), publication date, by chef, and by labels. Access to this endpoint should be public.\n- The list should be paginated, and as part of the response on every page.\n- Users should be able to sign up as chefs to the system to upload their own recipes.\n- A JWT-secured login flow must be present to protect the endpoints in charge of creating new recipe posts.\n- Images uploaded as part of the recipe should be processed to be re-sized into a standard size (you pick the dimensions). You can use a library such as [Sharp](https://sharp.pixelplumbing.com/) for this.\n\n## 11. Movie Reservation System\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: Relational data modeling (SQL), seat reservation logic, transaction management, schedule management.\n\n![Movie Reservation System](https://assets.roadmap.sh/guest/movie-reservation-system-5823e.png)\n\nThere are very expensive pre-made tools that handle all this logic for companies, and the following diagram shows you a glimpse of that complexity.\n\nAs backend projects go, this one is a great example of the many different problems you might need to solve while working in web development.\n\nA movie reservation system should allow any user to get tickets and their associated seats for any movie playing the specific day the user is looking to attend. This description alone already provides a lot of features and constraints we have to keep in mind:\n\n- We’re going to have a list of movies (and maybe theaters as well).\n- Each movie will have a recurring schedule for some time and then it’ll be taken out to never return.\n- Users should be able to list movies, search for them and filter by dates, genres and even actors.\n- Once found, the user should be able to pick the seats for their particular movie of choice, and for their date of choice.\n- This leads us to you having to keep a virtual representation of your movie theater to understand seating distribution and availability.\n- In the end, the user should also be able to pay using an external payment gateway such as Stripe (we’ve already covered this step in the past).\n\n## 12. Restaurant Review Platform (API) with automatic NLP analysis\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: RESTful API, In-memory database (for live leaderboard), SQL, Natural Language Processing to auto-label positive and negative comments.\n\n![Restaurant Review Platform](https://assets.roadmap.sh/guest/restaurant-review-platform-26c1f.png)\n\nNow this project takes a turn into the land of noSQL and AI by leading with user input. The aim of this particular backend project is to provide a very simple API that will let users:\n\n- Input their own review of a restaurant (ideally, the API should request the restaurant’s ID to make sure users are reviewing the correct one).\n- Keep a leaderboard of restaurants with a generic positive or negative score, based on the type of reviews these restaurants get. For this, you can use Redis as an in-memory leaderboard to have your API query it, instead of hitting the database you’re using. This also implies that you’ll have to keep the leaderboard updated on Redis as well (as a hint: look for type [SortedSet](https://redis.io/docs/data-types/sorted-sets/) data type to understand how to do this).\n- Perform NLP (Natural Language Processing) on the user’s text portion of the review, to understand if it’s a positive one or a negative one.\n- Use the result of the NLP as a scoring system for the leaderboard.\n\nAs a recommendation, you might want to use Python on this project, as there tend to be more libraries around NLP for this language.\n\n## 13. Multiplayer Battleship Game Server\n\n**Difficulty**: Difficult\n\n**_Skills and technologies used_**: Game state synchronization, low-latency networking, concurrency control.\n\n![Multiplayer Battleship Game Server](https://assets.roadmap.sh/guest/multiplayer-battleship-lv5oj.png)\n\nFor this project you’re not going to build a full game from scratch, so don’t worry.\n\nYou will however, build a game server. Your game server will have to maintain the internal state of each player’s board, and it should also enable communication between them by broadcasting their actions and results. Since we have “low-latency networking” as a constraint here, the logical implementation would be through the use of Sockets (so if you haven’t done it yet, go back to project 7 and work on it first).\n\nYou’re free to pick the programming language you feel more comfortable with, however, keep the mind that you’ll have to:\n\n- Keep track of the player's state and game state.\n- Enable 2-way communication between players and server.\n- Allow players to join the game and set up their initial state somehow.\n\nThis can be a very fun project to work on, even if you’re “just” building a terminal version of this multiplayer game, as you’ll be using several of the concepts and technologies covered so far on this list.\n\n## 14. Database Backup CLI utility\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: Advanced SQL, Database fundamentals, CLI development, Node.js (for CLI)\n\n![Database Backup CLI utility](https://assets.roadmap.sh/guest/database-backup-cli-jwrcj.png)\n\nWe’re now moving away from the API world for a while, and into the world of command line interfaces, which is another very common space for backend developers to work on.\n\nThis time around, the project is a CLI utility to back up an entire database.\n\nSo for this project, you’ll be creating a command line utility that takes the following attributes:\n\n- **Host:** the host of your database (it can be localhost or anything else).\n- **Username**: the utility will need a username to login and query the database.\n- **Password**: same with the password, usually databases are protected this way.\n- **DB Name**: the name of the database to backup. We’re backing up the entire set of tables inside this database.\n- **Destination folder**: the folder where all the dump files will be stored.\n\nWith all that information, your utility should be able to connect to the database, pull the list of tables, and for each one understand its structure and its data. In the end, the resulting files inside the destination folder should have everything you need to restore the database on another server simply by using these files.\n\nFinally, if you haven’t heard of it yet, you might want to check out the [SHOW CREATE TABLE](https://dev.mysql.com/doc/refman/8.3/en/show-create-table.html) statement.\n\n## 15. Online Code Compiler API\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: Sandboxing code execution, integration with compilers, WebSocket communication.\n\n![Online Code Compiler API](https://assets.roadmap.sh/guest/online-code-compiler-c7xjb.png)\n\nFor this project, you’ll be building the backend of a remote code execution application. In other words, your APIs will allow you to receive source code written using a specific language of choice (you can pick the one you want, and only allow that one), run it and then return the output of that execution.\n\nOf course, doing this without any restrictions is not worth it for being in the “difficult” section of this list, so let’s kick it up a notch:\n\n- The code execution should be done inside a safe sandbox, which means that the code can’t hurt or affect the system it’s running on, no matter what the code or the logic dictates.\n- On top of that, for long-running tasks, the API should also provide a status report containing the following information:\n- Time running.\n- Start time of the execution.\n- Lines of code being executed.\n\n## 16. Messaging Platform Backend\n\n**_Difficulty_**: Difficult\n\n**_Skills and technologies used_**: Real-time messaging, end-to-end encryption, contact synchronization\n\n![Messaging Platform Backend](https://assets.roadmap.sh/guest/messaging-platform-backend-96jpw.png)\n\nYes, we’re talking about a chat platform here. And as a backend developer you’re more than ready to implement both the server and the client application.\n\nThis backend project would take project #7 to the next level, by implementing the following responsibilities:\n\n- Adding message encryption between client applications\n- The ability to understand who’s online\n- Understand if those users are interacting with you (a.k.a showing the “\\[username\\] is typing” message in real-time).\n- Sending a message from one of the clients into the server should be broadcasted to the rest of the clients connected.\n\nAs a recommendation for technology implementing this project, [Socket.io](http://socket.io) would be a perfect match. This means you’d be using JavaScript (node.js) for this.\n\n## 17. Content Delivery Network (CDN) Simulator\n\n**_Difficulty_**: Very Difficult\n\n**_Skills and technologies used_**: Load balancing algorithms, caching strategies, network latency simulation\n\n![Content Delivery Network (CDN) Simulator](https://assets.roadmap.sh/guest/cdn-simulator-lv7kl.png)\n\nFor this particular backend project, we’re not going to focus on coding, but rather on backend tools and their configuration. A [CDN](https://aws.amazon.com/es/what-is/cdn/) (or Content Delivery Network) is a platform that allows you to serve static content (like text files, images, audio, etc) safely and reliably.\n\nInstead of having all files inside the same server, the content is replicated and distributed across a network of servers that can provide you with the files at any given point in time.\n\nThe point of this project is for you to figure out a way to set up your own CDN keeping in mind the following points:\n\n- Use cloud servers (you can pick your favorite cloud provider for this)\n- Configure a load balancer to distribute the load between all servers.\n- Set up a caching strategy.\n\nRemember that all major cloud providers have a free tier that allows you to use all their services for some time. AWS for example, allows for a full year of free tier limited to the type of resources you can use.\n\n## 18. Time-tracking CLI for Freelancers\n\n**_Difficulty_**: Very Difficult\n\n**_Skills and technologies used_**: time tracking, interactive CLI, Day.js for time operations, reporting.\n\n![Time-tracking CLI for Freelancers](https://assets.roadmap.sh/guest/time-tracking-cli-freelancers-x7ldv.png)\n\nAs freelancers, sometimes understanding what you’re working on, or understanding how much time you’ve spent on a particular project once it’s time to get paid, can be a challenge.\n\nSo, with this command line interface tool, we’ll try to solve that pain for freelancers. The tool you’re developing should let you specify that you’re starting to work on a project, and once you’re done, you should also be able to say that you’ve stopped.\n\nOn top of that, there should be an interactive reporting mode that should tell you the amount of time spent so far on a particular project (with the ability to filter by date and time), so you can know exactly how much to charge each client.\n\nFrom the user’s POV, you could have commands like this:\n\n- freelance start project1\n- freelance stop project2\n\nAnd when in interactive mode, something like this should work:\n\n- report project1 since 1/2/24\n\nThe challenge on this backend project is not just the CLI itself, which you’ve built in the past, but the actual time tracking logic that needs to happen internally. You’ll be keeping track of small chunks of time associated with different backend projects, and once the report is requested, you need to properly query your DB and get only the right chunks, so you can later add them up and return a valid number.\n\n## 19. JS Obfuscator CLI utility\n\n**_Difficulty_**: Very Difficult\n\n**_Skills and technologies used_**: code obfuscation, batch processing of files using a CLI, Node.js.\n\n![JS Obfuscator CLI utility](https://assets.roadmap.sh/guest/js-obfuscator-utility-f0dfi.png)\n\nCode obfuscation happens when you turn a perfectly readable code into something that only a machine can understand, without changing the plain text nature of the file. In other words, you just make it impossible for a human to read and understand.\n\nMany tools do this in the JS ecosystem, it’s now your turn to create a new tool and perform the exact same action. As an added difficulty, you’ll be coding a tool that does this to an entire folder filled with files (not just one at the time).\n\nMake sure the output for each file is placed inside the same folder, with a “.obs.js” extension, and that you’re also navigating sub-folders searching for more files.\n\nTry to avoid libraries that already perform these exact same tasks, as you’ll be skipping through all the potential problems you can find, and effectively learning nothing from the experience.\n\n## 20. Web Scraper CLI\n\n**_Difficulty_**: Very Difficult\n\n**_Skills and technologies used_**: Web scraping, headless browsing, rules engine\n\n![Web Scraper CLI](https://assets.roadmap.sh/guest/webscraper-cli-ja5h2.png)\n\nA web scraper is a tool that allows you to navigate a website through code, and in the process, capture information from the presented web pages.\n\nAs part of the last backend project of this list, you’ll be implementing your very own web scraper CLI tool. This tool will take input from the user with a list of preset commands, such as:\n\n- show code: to list the HTML code of the current page.\n- navigate: to open a new URL\n- capture: this will return a subsection of the HTML of the current page using the CSS selector you specify.\n- click on: this command will trigger a click on a particular HTML element using a CSS selector provided.\n\nFeel free to add extra commands to make the navigation even more interactive.\n\nWith the last of our backend project ideas, you’ve covered all the major areas involved in backend development and you’re more than ready to apply for a backend development job if you haven’t already.\n\nIf you find a piece of technology that wasn’t covered here, you’ll have the skills required to pick it up in no time.";
				}
				function compiledContent$E() {
					return html$E;
				}
				function getHeadings$E() {
					return [{"depth":2,"slug":"1-personal-blogging-platform-api","text":"1. Personal Blogging Platform API"},{"depth":2,"slug":"2-to-do-list-api","text":"2. To-Do List API"},{"depth":2,"slug":"3-weather-api-wrapper-service","text":"3. Weather API Wrapper Service"},{"depth":2,"slug":"4-expense-tracker-api","text":"4. Expense Tracker API"},{"depth":2,"slug":"5-markdown-note-taking-app","text":"5. Markdown Note-taking App"},{"depth":2,"slug":"6-url-shortening-service","text":"6. URL Shortening Service"},{"depth":2,"slug":"7-real-time-polling-app","text":"7. Real-time Polling App"},{"depth":2,"slug":"8-simple-e-commerce-api","text":"8. Simple E-commerce API"},{"depth":2,"slug":"9-fitness-workout-tracker","text":"9. Fitness Workout Tracker"},{"depth":2,"slug":"10-recipe-sharing-platform","text":"10. Recipe Sharing Platform"},{"depth":2,"slug":"11-movie-reservation-system","text":"11. Movie Reservation System"},{"depth":2,"slug":"12-restaurant-review-platform-api-with-automatic-nlp-analysis","text":"12. Restaurant Review Platform (API) with automatic NLP analysis"},{"depth":2,"slug":"13-multiplayer-battleship-game-server","text":"13. Multiplayer Battleship Game Server"},{"depth":2,"slug":"14-database-backup-cli-utility","text":"14. Database Backup CLI utility"},{"depth":2,"slug":"15-online-code-compiler-api","text":"15. Online Code Compiler API"},{"depth":2,"slug":"16-messaging-platform-backend","text":"16. Messaging Platform Backend"},{"depth":2,"slug":"17-content-delivery-network-cdn-simulator","text":"17. Content Delivery Network (CDN) Simulator"},{"depth":2,"slug":"18-time-tracking-cli-for-freelancers","text":"18. Time-tracking CLI for Freelancers"},{"depth":2,"slug":"19-js-obfuscator-cli-utility","text":"19. JS Obfuscator CLI utility"},{"depth":2,"slug":"20-web-scraper-cli","text":"20. Web Scraper CLI"}];
				}

				const Content$E = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$E;
					content.file = file$E;
					content.url = url$E;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$E)}`;
				});

const __vite_glob_0_5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$E,
	compiledContent: compiledContent$E,
	default: Content$E,
	file: file$E,
	frontmatter: frontmatter$E,
	getHeadings: getHeadings$E,
	rawContent: rawContent$E,
	url: url$E
}, Symbol.toStringTag, { value: 'Module' }));

const html$D = "<p><a href=\"/guides/basic-authentication.png\"><img src=\"/guides/basic-authentication.png\" alt=\"Basic Authentication\"></a></p>";

				const frontmatter$D = {"title":"Basic Authentication","description":"Understand what is basic authentication and how it is implemented","authorId":"kamran","seo":{"title":"Basic Authentication - roadmap.sh","description":"Understand what is basic authentication and how it is implemented"},"isNew":false,"type":"visual","date":"2021-05-19T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$D = "/workspaces/developer-roadmap/src/data/guides/basic-authentication.md";
				const url$D = undefined;
				function rawContent$D() {
					return "\n[![Basic Authentication](/guides/basic-authentication.png)](/guides/basic-authentication.png)\n";
				}
				function compiledContent$D() {
					return html$D;
				}
				function getHeadings$D() {
					return [];
				}

				const Content$D = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$D;
					content.file = file$D;
					content.url = url$D;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$D)}`;
				});

const __vite_glob_0_6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$D,
	compiledContent: compiledContent$D,
	default: Content$D,
	file: file$D,
	frontmatter: frontmatter$D,
	getHeadings: getHeadings$D,
	rawContent: rawContent$D,
	url: url$D
}, Symbol.toStringTag, { value: 'Module' }));

const html$C = "<p>Our last video series was about data structures. We looked at the most common data structures, their use cases, pros and cons, and the different operations you could perform on each data structure.</p>\n<p>Today, we are kicking off a similar series for Authentication strategies where we will discuss everything you need to know about authentication and authentication strategies.</p>\n<p>In this guide today will be talking about what authentication is, and we will cover some terminology that will help us later in the series. You can watch the video below or continue reading this guide.</p>\n<iframe class=\"w-full aspect-video mb-5\" src=\"https://www.youtube.com/embed/Mcyt9SrZT6g\" title=\"Basics of Authentication\"></iframe>\n<h2 id=\"what-is-authentication\">What is Authentication?</h2>\n<p>Authentication is the process of verifying someone’s identity. A real-world example of that would be when you board a plane, the airline worker checks your passport to verify your identity, so the airport worker authenticates you.</p>\n<p>If we talk about computers, when you log in to any website, you usually authenticate yourself by entering your username and password, which is then checked by the website to ensure that you are who you claim to be. There are two things you should keep in mind:</p>\n<ul>\n<li>Authentication is not only for the persons</li>\n<li>And username and password are not the only way to authenticate.</li>\n</ul>\n<p>Some other examples are:</p>\n<ul>\n<li>\n<p>When you open a website in the browser. If the website uses HTTP, TLS is used to authenticate the server and avoid the fake loading of websites.</p>\n</li>\n<li>\n<p>There might be server-to-server communication on the website. The server may need to authenticate the incoming request to avoid malicious usage.</p>\n</li>\n</ul>\n<h2 id=\"how-does-authentication-work\">How does Authentication Work?</h2>\n<p>On a high level, we have the following factors used for authentication.</p>\n<ul>\n<li><strong>Username and Password</strong></li>\n<li><strong>Security Codes, Pin Codes, or Security Questions</strong> — An example would be the pin code you enter at an ATM to withdraw cash.</li>\n<li><strong>Hard Tokens and Soft Tokens</strong> — Hard tokens are the special hardware devices that you attach to your device to authenticate yourself. Soft tokens, unlike hard tokens, don’t have any authentication-specific device; we must verify the possession of a device that was used to set up the identity. For example, you may receive an OTP to log in to your account on a website.</li>\n<li><strong>Biometric Authentication</strong> — In biometric authentication, we authenticate using biometrics such as iris, facial, or voice recognition.</li>\n</ul>\n<p>We can categorize the factors above into three different types.</p>\n<ul>\n<li>\n<p>Username / Password and Security codes rely on the person’s knowledge: we can group them under the <strong>Knowledge Factor</strong>.</p>\n</li>\n<li>\n<p>In hard and soft tokens, we authenticate by checking the possession of hardware, so this would be a <strong>Possession Factor</strong>.</p>\n</li>\n<li>\n<p>And in biometrics, we test the person’s inherent qualities, i.e., iris, face, or voice, so this would be a <strong>Qualities</strong> factor.</p>\n</li>\n</ul>\n<p>This brings us to our next topic: Multi-factor Authentication and Two-Factor Authentication.</p>\n<h2 id=\"multifactor-authentication\">Multifactor Authentication</h2>\n<p>Multifactor authentication is the type of authentication in which we rely on more than one factor to authenticate a user.</p>\n<p>For example, if we pick up username/password from the <strong>knowledge factor</strong>. And we pick soft tokens from the <strong>possession factor</strong>, and we say that for a user to authenticate, they must enter their credentials and an OTP, which will be sent to their mobile phone, so this would be an example of multifactor authentication.</p>\n<p>In multifactor authentication, since we rely on more than one factor, this way of authentication is much more secure than single-factor authentication.</p>\n<p>One important thing to note here is that the factors you pick for authentication, they must differ. So, for example, if we pick up a username/password and security question or security codes, it is still not true multifactor authentication because we still rely on the knowledge factor. The factors have to be different from each other.</p>\n<h3 id=\"two-factor-authentication\">Two-Factor Authentication</h3>\n<p>Two-factor authentication is similar to multifactor authentication. The only difference is that there are precisely two factors in 2FA. In MFA, we can have 2, 3, 4, or any authentication factors; 2FA has exactly two factors. We can say that 2FA is always MFA, because there are more than one factors. MFA is not always 2FA because there may be more than two factors involved.</p>\n<p>Next we have the difference between authentication and authorization. This comes up a lot in the interviews, and beginners often confuse them.</p>\n<h3 id=\"what-is-authentication-1\">What is Authentication</h3>\n<p>Authentication is the process of verifying the identity. For example, when you enter your credentials at a login screen, the application here identifies you through your credentials. So this is what the authentication is, the process of verifying the identity.</p>\n<p>In case of an authentication failure, for example, if you enter an invalid username and password, the HTTP response code is “Unauthorized” 401.</p>\n<h3 id=\"what-is-authorization\">What is Authorization</h3>\n<p>Authorization is the process of checking permission. Once the user has logged in, i.e., the user has been authenticated, the process of reviewing the permission to see if the user can perform the relevant operation or not is called authorization.</p>\n<p>And in case of authorization failure, i.e., if the user tries to perform an operation they are not allowed to perform, the HTTP response code is forbidden 403.</p>\n<h2 id=\"authentication-strategies\">Authentication Strategies</h2>\n<p>Given below is the list of common authentication strategies:</p>\n<ul>\n<li>Basics of Authentication</li>\n<li>Session Based Authentication</li>\n<li>Token-Based Authentication</li>\n<li>JWT Authentication</li>\n<li>OAuth - Open Authorization</li>\n<li>Single Sign On (SSO)</li>\n</ul>\n<p>In this series of illustrated videos and textual guides, we will be going through each of the strategies discussing what they are, how they are implemented, the pros and cons and so on.</p>\n<p>So stay tuned, and I will see you in the next one.</p>";

				const frontmatter$C = {"title":"Basics of Authentication","description":"Learn the basics of Authentication and Authorization","authorId":"kamran","seo":{"title":"Basics of Authentication - roadmap.sh","description":"Learn the basics of Authentication and Authorization"},"isNew":false,"type":"textual","date":"2022-09-21T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$C = "/workspaces/developer-roadmap/src/data/guides/basics-of-authentication.md";
				const url$C = undefined;
				function rawContent$C() {
					return "\nOur last video series was about data structures. We looked at the most common data structures, their use cases, pros and cons, and the different operations you could perform on each data structure.\n\nToday, we are kicking off a similar series for Authentication strategies where we will discuss everything you need to know about authentication and authentication strategies.\n\nIn this guide today will be talking about what authentication is, and we will cover some terminology that will help us later in the series. You can watch the video below or continue reading this guide.\n\n<iframe class=\"w-full aspect-video mb-5\" src=\"https://www.youtube.com/embed/Mcyt9SrZT6g\" title=\"Basics of Authentication\"></iframe>\n\n## What is Authentication?\n\nAuthentication is the process of verifying someone's identity. A real-world example of that would be when you board a plane, the airline worker checks your passport to verify your identity, so the airport worker authenticates you.\n\nIf we talk about computers, when you log in to any website, you usually authenticate yourself by entering your username and password, which is then checked by the website to ensure that you are who you claim to be. There are two things you should keep in mind:\n\n- Authentication is not only for the persons\n- And username and password are not the only way to authenticate.\n\nSome other examples are:\n\n- When you open a website in the browser. If the website uses HTTP, TLS is used to authenticate the server and avoid the fake loading of websites.\n\n- There might be server-to-server communication on the website. The server may need to authenticate the incoming request to avoid malicious usage.\n\n## How does Authentication Work?\n\nOn a high level, we have the following factors used for authentication.\n\n- **Username and Password**\n- **Security Codes, Pin Codes, or Security Questions** — An example would be the pin code you enter at an ATM to withdraw cash.\n- **Hard Tokens and Soft Tokens** — Hard tokens are the special hardware devices that you attach to your device to authenticate yourself. Soft tokens, unlike hard tokens, don't have any authentication-specific device; we must verify the possession of a device that was used to set up the identity. For example, you may receive an OTP to log in to your account on a website.\n- **Biometric Authentication** — In biometric authentication, we authenticate using biometrics such as iris, facial, or voice recognition.\n\nWe can categorize the factors above into three different types.\n\n- Username / Password and Security codes rely on the person's knowledge: we can group them under the **Knowledge Factor**.\n\n- In hard and soft tokens, we authenticate by checking the possession of hardware, so this would be a **Possession Factor**.\n\n- And in biometrics, we test the person's inherent qualities, i.e., iris, face, or voice, so this would be a **Qualities** factor.\n\nThis brings us to our next topic: Multi-factor Authentication and Two-Factor Authentication.\n\n## Multifactor Authentication\n\nMultifactor authentication is the type of authentication in which we rely on more than one factor to authenticate a user.\n\nFor example, if we pick up username/password from the **knowledge factor**. And we pick soft tokens from the **possession factor**, and we say that for a user to authenticate, they must enter their credentials and an OTP, which will be sent to their mobile phone, so this would be an example of multifactor authentication.\n\nIn multifactor authentication, since we rely on more than one factor, this way of authentication is much more secure than single-factor authentication.\n\nOne important thing to note here is that the factors you pick for authentication, they must differ. So, for example, if we pick up a username/password and security question or security codes, it is still not true multifactor authentication because we still rely on the knowledge factor. The factors have to be different from each other.\n\n### Two-Factor Authentication\n\nTwo-factor authentication is similar to multifactor authentication. The only difference is that there are precisely two factors in 2FA. In MFA, we can have 2, 3, 4, or any authentication factors; 2FA has exactly two factors. We can say that 2FA is always MFA, because there are more than one factors. MFA is not always 2FA because there may be more than two factors involved.\n\nNext we have the difference between authentication and authorization. This comes up a lot in the interviews, and beginners often confuse them.\n\n### What is Authentication\n\nAuthentication is the process of verifying the identity. For example, when you enter your credentials at a login screen, the application here identifies you through your credentials. So this is what the authentication is, the process of verifying the identity.\n\nIn case of an authentication failure, for example, if you enter an invalid username and password, the HTTP response code is \"Unauthorized\" 401.\n\n### What is Authorization\n\nAuthorization is the process of checking permission. Once the user has logged in, i.e., the user has been authenticated, the process of reviewing the permission to see if the user can perform the relevant operation or not is called authorization.\n\nAnd in case of authorization failure, i.e., if the user tries to perform an operation they are not allowed to perform, the HTTP response code is forbidden 403.\n\n## Authentication Strategies\n\nGiven below is the list of common authentication strategies:\n\n- Basics of Authentication\n- Session Based Authentication\n- Token-Based Authentication\n- JWT Authentication\n- OAuth - Open Authorization\n- Single Sign On (SSO)\n\nIn this series of illustrated videos and textual guides, we will be going through each of the strategies discussing what they are, how they are implemented, the pros and cons and so on.\n\nSo stay tuned, and I will see you in the next one.\n";
				}
				function compiledContent$C() {
					return html$C;
				}
				function getHeadings$C() {
					return [{"depth":2,"slug":"what-is-authentication","text":"What is Authentication?"},{"depth":2,"slug":"how-does-authentication-work","text":"How does Authentication Work?"},{"depth":2,"slug":"multifactor-authentication","text":"Multifactor Authentication"},{"depth":3,"slug":"two-factor-authentication","text":"Two-Factor Authentication"},{"depth":3,"slug":"what-is-authentication-1","text":"What is Authentication"},{"depth":3,"slug":"what-is-authorization","text":"What is Authorization"},{"depth":2,"slug":"authentication-strategies","text":"Authentication Strategies"}];
				}

				const Content$C = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$C;
					content.file = file$C;
					content.url = url$C;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$C)}`;
				});

const __vite_glob_0_7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$C,
	compiledContent: compiledContent$C,
	default: Content$C,
	file: file$C,
	frontmatter: frontmatter$C,
	getHeadings: getHeadings$C,
	rawContent: rawContent$C,
	url: url$C
}, Symbol.toStringTag, { value: 'Module' }));

const html$B = "<p>Big-O notation is the mathematical notation that helps analyse the algorithms to get an idea about how they might perform as the input grows. The image below explains Big-O in a simple way without using any fancy terminology.</p>\n<p><a href=\"/guides/big-o-notation.png\"><img src=\"/guides/big-o-notation.png\" alt=\"Big-O Notation\"></a></p>";

				const frontmatter$B = {"title":"Big-O Notation","description":"Easy to understand explanation of Big-O notation without any fancy terms","authorId":"kamran","seo":{"title":"Big-O Notation - roadmap.sh","description":"Easy to understand explanation of Big-O notation without any fancy terms"},"isNew":false,"type":"visual","date":"2021-03-15T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$B = "/workspaces/developer-roadmap/src/data/guides/big-o-notation.md";
				const url$B = undefined;
				function rawContent$B() {
					return "\nBig-O notation is the mathematical notation that helps analyse the algorithms to get an idea about how they might perform as the input grows. The image below explains Big-O in a simple way without using any fancy terminology.\n\n[![Big-O Notation](/guides/big-o-notation.png)](/guides/big-o-notation.png)\n";
				}
				function compiledContent$B() {
					return html$B;
				}
				function getHeadings$B() {
					return [];
				}

				const Content$B = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$B;
					content.file = file$B;
					content.url = url$B;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$B)}`;
				});

const __vite_glob_0_8 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$B,
	compiledContent: compiledContent$B,
	default: Content$B,
	file: file$B,
	frontmatter: frontmatter$B,
	getHeadings: getHeadings$B,
	rawContent: rawContent$B,
	url: url$B
}, Symbol.toStringTag, { value: 'Module' }));

const html$A = "<p><a href=\"/guides/character-encodings.png\"><img src=\"/guides/character-encodings.png\" alt=\"Character Encodings\"></a></p>";

				const frontmatter$A = {"title":"Character Encodings","description":"Covers the basics of character encodings and explains ASCII vs Unicode","authorId":"kamran","seo":{"title":"Character Encodings - roadmap.sh","description":"Covers the basics of character encodings and explains ASCII vs Unicode"},"isNew":false,"type":"visual","date":"2021-05-14T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$A = "/workspaces/developer-roadmap/src/data/guides/character-encodings.md";
				const url$A = undefined;
				function rawContent$A() {
					return "\n[![Character Encodings](/guides/character-encodings.png)](/guides/character-encodings.png)\n";
				}
				function compiledContent$A() {
					return html$A;
				}
				function getHeadings$A() {
					return [];
				}

				const Content$A = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$A;
					content.file = file$A;
					content.url = url$A;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$A)}`;
				});

const __vite_glob_0_9 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$A,
	compiledContent: compiledContent$A,
	default: Content$A,
	file: file$A,
	frontmatter: frontmatter$A,
	getHeadings: getHeadings$A,
	rawContent: rawContent$A,
	url: url$A
}, Symbol.toStringTag, { value: 'Module' }));

const html$z = "<p>The image below details the differences between the continuous integration and continuous delivery. Also, here is the <a href=\"https://www.youtube.com/watch?v=nyKZTKQS_EQ\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">accompanying video on implementing that with GitHub actions</a>.</p>\n<p><a href=\"/guides/ci-cd.png\"><img src=\"/guides/ci-cd.png\" alt=\"CI vs CD\"></a></p>";

				const frontmatter$z = {"title":"What is CI and CD?","description":"Learn the basics of CI/CD and how to implement that with GitHub Actions.","authorId":"kamran","seo":{"title":"What is CI and CD? - roadmap.sh","description":"Learn the basics of CI/CD and how to implement that with GitHub Actions."},"isNew":false,"type":"visual","date":"2021-07-09T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$z = "/workspaces/developer-roadmap/src/data/guides/ci-cd.md";
				const url$z = undefined;
				function rawContent$z() {
					return "\nThe image below details the differences between the continuous integration and continuous delivery. Also, here is the [accompanying video on implementing that with GitHub actions](https://www.youtube.com/watch?v=nyKZTKQS_EQ).\n\n[![CI vs CD](/guides/ci-cd.png)](/guides/ci-cd.png)\n";
				}
				function compiledContent$z() {
					return html$z;
				}
				function getHeadings$z() {
					return [];
				}

				const Content$z = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$z;
					content.file = file$z;
					content.url = url$z;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$z)}`;
				});

const __vite_glob_0_10 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$z,
	compiledContent: compiledContent$z,
	default: Content$z,
	file: file$z,
	frontmatter: frontmatter$z,
	getHeadings: getHeadings$z,
	rawContent: rawContent$z,
	url: url$z
}, Symbol.toStringTag, { value: 'Module' }));

const html$y = "<p>Before we talk about the Consistency Patterns, we should know what a distributed system is. Simply put, a distributed system is a system that consists of more than one components, and each component is responsible for one part of the application.</p>\n<blockquote>\n<p>A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another. The components interact with one another in order to achieve a common goal. - Wikipedia</p>\n</blockquote>\n<h2 id=\"distributed-systems\">Distributed Systems</h2>\n<p>Imagine we have an e-commerce application where we are selling books. This application may consist of multiple different components. For example, one server might be responsible for the accounts, another might be responsible for the payments, one might be responsible for storing orders, one might be responsible for loyalty points and relevant functionalities, and another might be responsible for maintaining the books inventory and so on.</p>\n<p><img src=\"https://i.imgur.com/VHATt7a.png\" alt=\"Book Store - Distributed System\"></p>\n<p>Now, if a user buys a book, there might be different services involved in placing the order; order service for storing the order, payment service for handling the payments, and inventory service for keeping the stock of that ordered book up to date. This is an example of a distributed system, an application that consists of multiple different components, each of which is responsible for a different part of the application.</p>\n<h2 id=\"why-is-consistency-important\">Why is Consistency Important?</h2>\n<p>When working with distributed systems, we need to think about managing the data across different servers. If we take the above example of the e-commerce application, we can see that the inventory service must have up-to-date stock information for the ordered items if the user places an order. Now, there might be two different users looking at the same book. Now imagine if one of the customers places a successful order, and before the inventory service can update the stock, the second customer also places the order for the same book. In that case, when the inventory wasn’t updated, we will have the wrong stock information when the second order was placed, i.e., the ordered book may or may not be available in stock. This is where different consistency patterns come into play. They help ensure that the data is consistent across the application.</p>\n<h2 id=\"consistency-patterns\">Consistency Patterns</h2>\n<p>Consistency patterns refer to the ways in which data is stored and managed in a distributed system and how that data is made available to users and applications. There are three main types of consistency patterns:</p>\n<ul>\n<li>Strong consistency</li>\n<li>Weak consistency</li>\n<li>Eventual Consistency</li>\n</ul>\n<p>Each of these patterns has its own advantages and disadvantages, and the choice of which pattern to use will depend on the specific requirements of the application or system.</p>\n<h3 id=\"strong-consistency\">Strong Consistency</h3>\n<blockquote>\n<p>After an update is made to the data, it will be immediately visible to any subsequent read operations. The data is replicated in a synchronous manner, ensuring that all copies of the data are updated at the same time.</p>\n</blockquote>\n<p>In a strong consistency system, any updates to some data are immediately propagated to all locations. This ensures that all locations have the same version of the data, but it also means that the system is not highly available and has high latency.</p>\n<p>An example of strong consistency is a financial system where users can transfer money between accounts. The system is designed for <strong>high data integrity</strong>, so the data is stored in a single location and updates to that data are immediately propagated to all other locations. This ensures that all users and applications are working with the same, accurate data. For instance, when a user initiates a transfer of funds from one account to another, the system immediately updates the balance of both accounts and all other system components are immediately aware of the change. This ensures that all users can see the updated balance of both accounts and prevents any discrepancies.</p>\n<h3 id=\"weak-consistency\">Weak Consistency</h3>\n<blockquote>\n<p>After an update is made to the data, it is not guaranteed that any subsequent read operation will immediately reflect the changes made. The read <strong>may or may not</strong> see the recent write.</p>\n</blockquote>\n<p>In a weakly consistent system, updates to the data may not be immediately propagated. This can lead to inconsistencies and conflicts between different versions of the data, but it also allows for <strong>high availability and low latency</strong>.</p>\n<p>Another example of weak consistency is a gaming platform where users can play online multiplayer games. When a user plays a game, their actions are immediately visible to other players in the same data center, but if there was a lag or temporary connection loss, the actions may not be seen by some of the users and the game will continue. This can lead to inconsistencies between different versions of the game state, but it also allows for a high level of availability and low latency.</p>\n<h3 id=\"eventual-consistency\">Eventual Consistency</h3>\n<blockquote>\n<p>Eventual consistency is a form of Weak Consistency. After an update is made to the data, it will be eventually visible to any subsequent read operations. The data is replicated in an asynchronous manner, ensuring that all copies of the data are eventually updated.</p>\n</blockquote>\n<p>In an eventually consistent system, data is typically stored in multiple locations, and updates to that data are eventually propagated to all locations. This means that the system is highly available and has low latency, but it also means that there may be inconsistencies and conflicts between different versions of the data.</p>\n<p>An example of eventual consistency is a social media platform where users can post updates, comments, and messages. The platform is designed for high availability and low latency, so the data is stored in multiple data centers around the world. When a user posts an update, the update is immediately visible to other users in the same data center, but it may take some time for the update to propagate to other data centers. This means that some users may see the update while others may not, depending on which data center they are connected to. This can lead to inconsistencies between different versions of the data, but it also allows for a high level of availability and low latency.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In conclusion, consistency patterns play a crucial role in distributed systems, and the choice of which pattern to use will depend on the specific requirements of the application or system. Each pattern has its own advantages and disadvantages, and each is more suitable for different use cases. Weak consistency is suitable for systems that require high availability and low latency, strong consistency is suitable for systems that require high data integrity, and eventual consistency is suitable for systems that require both high availability and high data integrity.</p>";

				const frontmatter$y = {"title":"Consistency Patterns","description":"Everything you need to know about Week, Strong and Eventual Consistency","authorId":"kamran","seo":{"title":"Consistency Patterns - roadmap.sh","description":"Everything you need to know about Week, Strong and Eventual Consistency"},"isNew":false,"canonicalUrl":"https://cs.fyi/guide/consistency-patterns-week-strong-eventual/","type":"textual","date":"2023-01-18T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$y = "/workspaces/developer-roadmap/src/data/guides/consistency-patterns-in-distributed-systems.md";
				const url$y = undefined;
				function rawContent$y() {
					return "\nBefore we talk about the Consistency Patterns, we should know what a distributed system is. Simply put, a distributed system is a system that consists of more than one components, and each component is responsible for one part of the application.\n\n> A distributed system is a system whose components are located on different networked computers, which communicate and coordinate their actions by passing messages to one another. The components interact with one another in order to achieve a common goal. - Wikipedia\n\n## Distributed Systems\n\nImagine we have an e-commerce application where we are selling books. This application may consist of multiple different components. For example, one server might be responsible for the accounts, another might be responsible for the payments, one might be responsible for storing orders, one might be responsible for loyalty points and relevant functionalities, and another might be responsible for maintaining the books inventory and so on.\n\n![Book Store - Distributed System](https://i.imgur.com/VHATt7a.png)\n\nNow, if a user buys a book, there might be different services involved in placing the order; order service for storing the order, payment service for handling the payments, and inventory service for keeping the stock of that ordered book up to date. This is an example of a distributed system, an application that consists of multiple different components, each of which is responsible for a different part of the application.\n\n## Why is Consistency Important?\n\nWhen working with distributed systems, we need to think about managing the data across different servers. If we take the above example of the e-commerce application, we can see that the inventory service must have up-to-date stock information for the ordered items if the user places an order. Now, there might be two different users looking at the same book. Now imagine if one of the customers places a successful order, and before the inventory service can update the stock, the second customer also places the order for the same book. In that case, when the inventory wasn't updated, we will have the wrong stock information when the second order was placed, i.e., the ordered book may or may not be available in stock. This is where different consistency patterns come into play. They help ensure that the data is consistent across the application.\n\n## Consistency Patterns\n\nConsistency patterns refer to the ways in which data is stored and managed in a distributed system and how that data is made available to users and applications. There are three main types of consistency patterns:\n\n- Strong consistency\n- Weak consistency\n- Eventual Consistency\n\nEach of these patterns has its own advantages and disadvantages, and the choice of which pattern to use will depend on the specific requirements of the application or system.\n\n### Strong Consistency\n\n> After an update is made to the data, it will be immediately visible to any subsequent read operations. The data is replicated in a synchronous manner, ensuring that all copies of the data are updated at the same time.\n\nIn a strong consistency system, any updates to some data are immediately propagated to all locations. This ensures that all locations have the same version of the data, but it also means that the system is not highly available and has high latency.\n\nAn example of strong consistency is a financial system where users can transfer money between accounts. The system is designed for **high data integrity**, so the data is stored in a single location and updates to that data are immediately propagated to all other locations. This ensures that all users and applications are working with the same, accurate data. For instance, when a user initiates a transfer of funds from one account to another, the system immediately updates the balance of both accounts and all other system components are immediately aware of the change. This ensures that all users can see the updated balance of both accounts and prevents any discrepancies.\n\n### Weak Consistency\n\n> After an update is made to the data, it is not guaranteed that any subsequent read operation will immediately reflect the changes made. The read **may or may not** see the recent write.\n\nIn a weakly consistent system, updates to the data may not be immediately propagated. This can lead to inconsistencies and conflicts between different versions of the data, but it also allows for **high availability and low latency**.\n\nAnother example of weak consistency is a gaming platform where users can play online multiplayer games. When a user plays a game, their actions are immediately visible to other players in the same data center, but if there was a lag or temporary connection loss, the actions may not be seen by some of the users and the game will continue. This can lead to inconsistencies between different versions of the game state, but it also allows for a high level of availability and low latency.\n\n### Eventual Consistency\n\n> Eventual consistency is a form of Weak Consistency. After an update is made to the data, it will be eventually visible to any subsequent read operations. The data is replicated in an asynchronous manner, ensuring that all copies of the data are eventually updated.\n\nIn an eventually consistent system, data is typically stored in multiple locations, and updates to that data are eventually propagated to all locations. This means that the system is highly available and has low latency, but it also means that there may be inconsistencies and conflicts between different versions of the data.\n\nAn example of eventual consistency is a social media platform where users can post updates, comments, and messages. The platform is designed for high availability and low latency, so the data is stored in multiple data centers around the world. When a user posts an update, the update is immediately visible to other users in the same data center, but it may take some time for the update to propagate to other data centers. This means that some users may see the update while others may not, depending on which data center they are connected to. This can lead to inconsistencies between different versions of the data, but it also allows for a high level of availability and low latency.\n\n## Conclusion\n\nIn conclusion, consistency patterns play a crucial role in distributed systems, and the choice of which pattern to use will depend on the specific requirements of the application or system. Each pattern has its own advantages and disadvantages, and each is more suitable for different use cases. Weak consistency is suitable for systems that require high availability and low latency, strong consistency is suitable for systems that require high data integrity, and eventual consistency is suitable for systems that require both high availability and high data integrity.\n";
				}
				function compiledContent$y() {
					return html$y;
				}
				function getHeadings$y() {
					return [{"depth":2,"slug":"distributed-systems","text":"Distributed Systems"},{"depth":2,"slug":"why-is-consistency-important","text":"Why is Consistency Important?"},{"depth":2,"slug":"consistency-patterns","text":"Consistency Patterns"},{"depth":3,"slug":"strong-consistency","text":"Strong Consistency"},{"depth":3,"slug":"weak-consistency","text":"Weak Consistency"},{"depth":3,"slug":"eventual-consistency","text":"Eventual Consistency"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$y = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$y;
					content.file = file$y;
					content.url = url$y;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$y)}`;
				});

const __vite_glob_0_11 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$y,
	compiledContent: compiledContent$y,
	default: Content$y,
	file: file$y,
	frontmatter: frontmatter$y,
	getHeadings: getHeadings$y,
	rawContent: rawContent$y,
	url: url$y
}, Symbol.toStringTag, { value: 'Module' }));

const html$x = "<p>Design patterns are solutions to recurring problems; <strong>guidelines on how to tackle certain problems</strong>. They are not classes, packages or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle certain problems in certain situations.</p>\n<blockquote>\n<p>Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems</p>\n</blockquote>\n<p>Wikipedia describes them as</p>\n<blockquote>\n<p>In software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations.</p>\n</blockquote>\n<h2 id=\"be-careful\">Be Careful</h2>\n<p>Developers, mostly beginners, make the mistake of over-thinking and forcing the design patterns which results in a horrible un-maintainable mess. The rule of thumb is to keep the codebase as simple as possible, once you start developing, you will start to see the patterns repeating in the codebase in which case you can go ahead and implement the relevant design patterns.</p>\n<ul>\n<li>Design patterns are not a silver bullet to all your problems.</li>\n<li>Do not try to force them; bad things are supposed to happen, if done so.</li>\n<li>Keep in mind that design patterns are solutions <strong>to</strong> problems, not solutions <strong>finding</strong> problems; so don’t overthink.</li>\n<li>If used in a correct place in a correct manner, they can prove to be a savior; or else they can result in a horrible mess of a code.</li>\n</ul>\n<blockquote>\n<p>Also note that the code samples below are in PHP-7, however this shouldn’t stop you because the concepts are same anyways.</p>\n</blockquote>\n<h2 id=\"types-of-design-patterns\">Types of Design Patterns</h2>\n<p>This guide is about Gang of Four (GoF) design patterns, which refers to the four authors of <a href=\"https://en.wikipedia.org/wiki/Design_Patterns\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">the book which introduced these design patterns</a>. There are three types of design patterns:</p>\n<ul>\n<li><a href=\"#creational-design-patterns\">Creational</a></li>\n<li><a href=\"#structural-design-patterns\">Structural</a></li>\n<li><a href=\"#behavioral-design-patterns\">Behavioral</a></li>\n</ul>\n<h2 id=\"creational-design-patterns\">Creational Design Patterns</h2>\n<p>In plain words</p>\n<blockquote>\n<p>Creational patterns are focused towards how to instantiate an object or group of related objects.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.</p>\n</blockquote>\n<p>There are 6 types of Creational patterns</p>\n<ul>\n<li><a href=\"#-simple-factory\">Simple Factory</a></li>\n<li><a href=\"#-factory-method\">Factory Method</a></li>\n<li><a href=\"#-abstract-factory\">Abstract Factory</a></li>\n<li><a href=\"#-builder\">Builder</a></li>\n<li><a href=\"#-prototype\">Prototype</a></li>\n<li><a href=\"#-singleton\">Singleton</a></li>\n</ul>\n<h2 id=\"-simple-factory\">🏠 Simple Factory</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider, you are building a house and you need doors. You can either put on your carpenter clothes, bring some wood, glue, nails and all the tools required to build the door and start building it in your house or you can simply call the factory and get the built door delivered to you so that you don’t need to learn anything about the door making or to deal with the mess that comes with making it.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Simple factory simply generates an instance for client without exposing any instantiation logic to the client</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming (OOP), a factory is an object for creating other objects – formally a factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be “new”.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>First of all we have a door interface and the implementation</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getWidth</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getHeight</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WoodenDoor</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $width;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $height;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $width, </span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $height)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">width </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $width;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">height </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $height;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getWidth</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">width;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getHeight</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">height;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have our door factory that makes the door and returns it</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> DoorFactory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeDoor</span><span style=\"color:#F8F8F2\">($width, $height)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WoodenDoor</span><span style=\"color:#F8F8F2\">($width, $height);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Make me a door of 100x200</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#50FA7B\">makeDoor</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">100</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">200</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Width: </span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getWidth</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Height: </span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getHeight</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Make me a door of 50x100</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door2 </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#50FA7B\">makeDoor</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">50</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">100</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><strong>When to Use?</strong></p>\n<p>When creating an object is not just a few assignments and involves some logic, it makes sense to put it in a dedicated factory instead of repeating the same code everywhere.</p>\n<h2 id=\"-factory-method\">🏭 Factory Method</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider the case of a hiring manager. It is impossible for one person to interview for each of the positions. Based on the job opening, she has to decide and delegate the interview steps to different people.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It provides a way to delegate the instantiation logic to child classes.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Taking our hiring manager example above. First of all we have an interviewer interface and some implementations for it</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> askQuestions</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Developer</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> askQuestions</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Asking about design patterns!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> CommunityExecutive</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> askQuestions</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Asking about community building</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now let us create our <code>HiringManager</code></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">abstract</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> HiringManager</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // Factory method</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> protected</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeInterviewer</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> takeInterview</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $interviewer </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeInterviewer</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $interviewer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">askQuestions</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<p>Now any child can extend it and provide the required interviewer</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> DevelopmentManager</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> HiringManager</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeInterviewer</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Developer</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> MarketingManager</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> HiringManager</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeInterviewer</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Interviewer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> CommunityExecutive</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>and then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$devManager </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> DevelopmentManager</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$devManager</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeInterview</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Output: Asking about design patterns</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$marketingManager </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> MarketingManager</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$marketingManager</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeInterview</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Output: Asking about community building.</span></span>\n<span class=\"line\"></span></code></pre>\n<p><strong>When to use?</strong></p>\n<p>Useful when there is some generic processing in a class but the required sub-class is dynamically decided at runtime. Or putting it in other words, when the client doesn’t know what exact sub-class it might need.</p>\n<h2 id=\"-abstract-factory\">🔨 Abstract Factory</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Extending our door example from Simple Factory. Based on your needs you might get a wooden door from a wooden door shop, iron door from an iron shop or a PVC door from the relevant shop. Plus you might need a guy with different kind of specialities to fit the door, for example a carpenter for wooden door, welder for iron door etc. As you can see there is a dependency between the doors now, wooden door needs carpenter, iron door needs a welder etc.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Translating the door example above. First of all we have our <code>Door</code> interface and some implementation for it</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WoodenDoor</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">I am a wooden door</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> IronDoor</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">I am an iron door</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have some fitting experts for each door type</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Welder</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">I can only fit iron doors</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Carpenter</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">I can only fit wooden doors</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now we have our abstract factory that would let us make family of related objects i.e. wooden door factory would create a wooden door and wooden door fitting expert and iron door factory would create an iron door and iron door fitting expert</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeDoor</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeFittingExpert</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Wooden factory to return carpenter and wooden door</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WoodenDoorFactory</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeDoor</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WoodenDoor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeFittingExpert</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Carpenter</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Iron door factory to get iron door and the relevant fitting expert</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> IronDoorFactory</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFactory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeDoor</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> IronDoor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeFittingExpert</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> DoorFittingExpert</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Welder</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$woodenFactory </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WoodenDoorFactory</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $woodenFactory</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeDoor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$expert </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $woodenFactory</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeFittingExpert</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">();  </span><span style=\"color:#6272A4\">// Output: I am a wooden door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$expert</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Output: I can only fit wooden doors</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Same for Iron Factory</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$ironFactory </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> IronDoorFactory</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $ironFactory</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeDoor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$expert </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $ironFactory</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeFittingExpert</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">();  </span><span style=\"color:#6272A4\">// Output: I am an iron door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$expert</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Output: I can only fit iron doors</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see the wooden door factory has encapsulated the <code>carpenter</code> and the <code>wooden door</code> also iron door factory has encapsulated the <code>iron door</code> and <code>welder</code>. And thus it had helped us make sure that for each of the created door, we do not get a wrong fitting expert.</p>\n<p><strong>When to use?</strong></p>\n<p>When there are interrelated dependencies with not-that-simple creation logic involved</p>\n<h2 id=\"-builder\">👷 Builder</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Imagine you are at Hardee’s and you order a specific deal, lets say, “Big Hardee” and they hand it over to you without <em>any questions</em>; this is the example of simple factory. But there are cases when the creation logic might involve more steps. For example you want a customized Subway deal, you have several options in how your burger is made e.g what bread do you want? what types of sauces would you like? What cheese would you want? etc. In such cases builder pattern comes to the rescue.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The builder pattern is an object creation software design pattern with the intentions of finding a solution to the telescoping constructor anti-pattern.</p>\n</blockquote>\n<p>Having said that let me add a bit about what telescoping constructor anti-pattern is. At one point or the other we have all seen a constructor like below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">($size, $cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">, $pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">, $tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">, $lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see; the number of constructor parameters can quickly get out of hand and it might become difficult to understand the arrangement of parameters. Plus this parameter list could keep on growing if you would want to add more options in future. This is called telescoping constructor anti-pattern.</p>\n<p><strong>Programmatic Example</strong></p>\n<p>The sane alternative is to use the builder pattern. First of all we have our burger that we want to make</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Burger</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $size;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">BurgerBuilder</span><span style=\"color:#F8F8F2\"> $builder)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">size </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">size;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">cheese;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">pepperoni;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">lettuce;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $builder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">tomato;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then we have the builder</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> BurgerBuilder</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $size;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#F8F8F2\"> $tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">int</span><span style=\"color:#F8F8F2\"> $size)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">size </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $size;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addPepperoni</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">pepperoni </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addLettuce</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">lettuce </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addCheese</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">cheese </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addTomato</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">tomato </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> build</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> Burger</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Burger</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$burger </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> BurgerBuilder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">14</span><span style=\"color:#F8F8F2\">))</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    -></span><span style=\"color:#50FA7B\">addPepperoni</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    -></span><span style=\"color:#50FA7B\">addLettuce</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    -></span><span style=\"color:#50FA7B\">addTomato</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    -></span><span style=\"color:#50FA7B\">build</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span></code></pre>\n<p><strong>When to use?</strong></p>\n<p>When there could be several flavors of an object and to avoid the constructor telescoping. The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.</p>\n<h2 id=\"-prototype\">🐑 Prototype</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Remember dolly? The sheep that was cloned! Lets not get into the details but the key point here is that it is all about cloning</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Create object based on an existing object through cloning.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The prototype pattern is a creational design pattern in software development. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects.</p>\n</blockquote>\n<p>In short, it allows you to create a copy of an existing object and modify it to your needs, instead of going through the trouble of creating an object from scratch and setting it up.</p>\n<p><strong>Programmatic Example</strong></p>\n<p>In PHP, it can be easily done using <code>clone</code></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Sheep</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $category;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $category </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Mountain Sheep</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">category </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $category;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setName</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setCategory</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $category)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">category </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $category;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCategory</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">category;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then it can be cloned like below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$original </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Sheep</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Jolly</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $original</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getName</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Jolly</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $original</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCategory</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Mountain Sheep</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Clone and modify what is required</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$cloned </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> clone</span><span style=\"color:#F8F8F2\"> $original;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$cloned</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setName</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Dolly</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $cloned</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getName</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Dolly</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $cloned</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCategory</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Mountain sheep</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Also you could use the magic method <code>__clone</code> to modify the cloning behavior.</p>\n<p><strong>When to use?</strong></p>\n<p>When an object is required that is similar to existing object or when the creation would be expensive as compared to cloning.</p>\n<h2 id=\"-singleton\">💍 Singleton</h2>\n<p>Real world example</p>\n<blockquote>\n<p>There can only be one president of a country at a time. The same president has to be brought to action, whenever duty calls. President here is singleton.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Ensures that only one object of a particular class is ever created.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.</p>\n</blockquote>\n<p>Singleton pattern is actually considered an anti-pattern and overuse of it should be avoided. It is not necessarily bad and could have some valid use-cases but should be used with caution because it introduces a global state in your application and change to it in one place could affect in the other areas and it could become pretty difficult to debug. The other bad thing about them is it makes your code tightly coupled plus mocking the singleton could be difficult.</p>\n<p><strong>Programmatic Example</strong></p>\n<p>To create a singleton, make the constructor private, disable cloning, disable extension and create a static variable to house the instance</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">final</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> President</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    private</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#F8F8F2\"> $instance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    private</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Hide the constructor</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> static</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getInstance</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> President</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FF79C6\">!</span><span style=\"color:#8BE9FD;font-style:italic\">self</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#F8F8F2\">$instance) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">            self</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#F8F8F2\">$instance </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> self</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#8BE9FD;font-style:italic\"> self</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#F8F8F2\">$instance;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    private</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#BD93F9\"> __clone</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Disable cloning</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    private</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#BD93F9\"> __wakeup</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Disable unserialize</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then in order to use</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$president1 </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> President</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#50FA7B\">getInstance</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$president2 </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> President</span><span style=\"color:#FF79C6\">::</span><span style=\"color:#50FA7B\">getInstance</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">var_dump</span><span style=\"color:#F8F8F2\">($president1</span><span style=\"color:#FF79C6\"> ===</span><span style=\"color:#F8F8F2\"> $president2); </span><span style=\"color:#6272A4\">// true</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"structural-design-patterns\">Structural Design Patterns</h2>\n<p>In plain words</p>\n<blockquote>\n<p>Structural patterns are mostly concerned with object composition or in other words how the entities can use each other. Or yet another explanation would be, they help in answering “How to build a software component?”</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.</p>\n</blockquote>\n<p>There are 7 types of structural patterns</p>\n<ul>\n<li><a href=\"#-adapter\">Adapter</a></li>\n<li><a href=\"#-bridge\">Bridge</a></li>\n<li><a href=\"#-composite\">Composite</a></li>\n<li><a href=\"#-decorator\">Decorator</a></li>\n<li><a href=\"#-facade\">Facade</a></li>\n<li><a href=\"#-flyweight\">Flyweight</a></li>\n<li><a href=\"#-proxy\">Proxy</a></li>\n</ul>\n<h2 id=\"-adapter\">🔌 Adapter</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider that you have some pictures in your memory card and you need to transfer them to your computer. In order to transfer them you need some kind of adapter that is compatible with your computer ports so that you can attach memory card to your computer. In this case card reader is an adapter.\nAnother example would be the famous power adapter; a three legged plug can’t be connected to a two pronged outlet, it needs to use a power adapter that makes it compatible with the two pronged outlet.\nYet another example would be a translator translating words spoken by one person to another</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Adapter pattern lets you wrap an otherwise incompatible object in an adapter to make it compatible with another class.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the adapter pattern is a software design pattern that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others without modifying their source code.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Consider a game where there is a hunter and he hunts lions.</p>\n<p>First we have an interface <code>Lion</code> that all types of lions have to implement</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> AfricanLion</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> AsianLion</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And hunter expects any implementation of <code>Lion</code> interface to hunt.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Hunter</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> hunt</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Lion</span><span style=\"color:#F8F8F2\"> $lion)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">roar</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now let’s say we have to add a <code>WildDog</code> in our game so that hunter can hunt that also. But we can’t do that directly because dog has a different interface. To make it compatible for our hunter, we will have to create an adapter that is compatible</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// This needs to be added to the game</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WildDog</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> bark</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Adapter around wild dog to make it compatible with our game</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WildDogAdapter</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $dog;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">WildDog</span><span style=\"color:#F8F8F2\"> $dog)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">dog </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $dog;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">dog</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">bark</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And now the <code>WildDog</code> can be used in our game using <code>WildDogAdapter</code>.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$wildDog </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WildDog</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$wildDogAdapter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WildDogAdapter</span><span style=\"color:#F8F8F2\">($wildDog);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$hunter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Hunter</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$hunter</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">hunt</span><span style=\"color:#F8F8F2\">($wildDogAdapter);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-bridge\">🚡 Bridge</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider you have a website with different pages and you are supposed to allow the user to change the theme. What would you do? Create multiple copies of each of the pages for each of the themes or would you just create separate theme and load them based on the user’s preferences? Bridge pattern allows you to do the second i.e.</p>\n</blockquote>\n<p><img src=\"https://cloud.githubusercontent.com/assets/11269635/23065293/33b7aea0-f515-11e6-983f-98823c9845ee.png\" alt=\"With and without the bridge pattern\"></p>\n<p>In Plain Words</p>\n<blockquote>\n<p>Bridge pattern is about preferring composition over inheritance. Implementation details are pushed from a hierarchy to another object with a separate hierarchy.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The bridge pattern is a design pattern used in software engineering that is meant to “decouple an abstraction from its implementation so that the two can vary independently”</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Translating our WebPage example from above. Here we have the <code>WebPage</code> hierarchy</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> WebPage</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Theme</span><span style=\"color:#F8F8F2\"> $theme);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> About</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WebPage</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $theme;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Theme</span><span style=\"color:#F8F8F2\"> $theme)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">theme </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $theme;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">About page in </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">theme</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getColor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Careers</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WebPage</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $theme;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Theme</span><span style=\"color:#F8F8F2\"> $theme)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">theme </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $theme;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Careers page in </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">theme</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getColor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And the separate theme hierarchy</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Theme</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getColor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> DarkTheme</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Theme</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getColor</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Dark Black</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> LightTheme</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Theme</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getColor</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Off white</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> AquaTheme</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Theme</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getColor</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Light blue</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And both the hierarchies</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$darkTheme </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> DarkTheme</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$about </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> About</span><span style=\"color:#F8F8F2\">($darkTheme);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$careers </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Careers</span><span style=\"color:#F8F8F2\">($darkTheme);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $about</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// \"About page in Dark Black\";</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $careers</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// \"Careers page in Dark Black\";</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-composite\">🌿 Composite</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Every organization is composed of employees. Each of the employees has the same features i.e. has a salary, has some responsibilities, may or may not report to someone, may or may not have some subordinates etc.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Composite pattern lets clients treat the individual objects in a uniform manner.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. The intent of a composite is to “compose” objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Taking our employees example from above. Here we have different employee types</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Employee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> string</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setSalary</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getSalary</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getRoles</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Developer</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Employee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $roles;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setSalary</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getSalary</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getRoles</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">roles;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Designer</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Employee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $roles;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setSalary</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $salary)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getSalary</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">salary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getRoles</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">roles;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have an organization which consists of several different types of employees</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Organization</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $employees;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addEmployee</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Employee</span><span style=\"color:#F8F8F2\"> $employee)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">employees[] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $employee;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getNetSalaries</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $netSalary </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        foreach</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">employees </span><span style=\"color:#FF79C6\">as</span><span style=\"color:#F8F8F2\"> $employee) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            $netSalary </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#F8F8F2\"> $employee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getSalary</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#F8F8F2\"> $netSalary;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Prepare the employees</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$john </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Developer</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">John Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">12000</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jane </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Designer</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Jane Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">15000</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Add them to organization</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$organization </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Organization</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$organization</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addEmployee</span><span style=\"color:#F8F8F2\">($john);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$organization</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addEmployee</span><span style=\"color:#F8F8F2\">($jane);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Net salaries: </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $organization</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getNetSalaries</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Net Salaries: 27000</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-decorator\">☕ Decorator</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Imagine you run a car service shop offering multiple services. Now how do you calculate the bill to be charged? You pick one service and dynamically keep adding to it the prices for the provided services till you get the final cost. Here each type of service is a decorator.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Decorator pattern lets you dynamically change the behavior of an object at run time by wrapping them in an object of a decorator class.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming, the decorator pattern is a design pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. The decorator pattern is often useful for adhering to the Single Responsibility Principle, as it allows functionality to be divided between classes with unique areas of concern.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Lets take coffee for example. First of all we have a simple coffee implementing the coffee interface</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> SimpleCoffee</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9\"> 10</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Simple coffee</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We want to make the code extensible to allow options to modify it if required. Lets make some add-ons (decorators)</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> MilkCoffee</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Coffee</span><span style=\"color:#F8F8F2\"> $coffee)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\"> 2</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">, milk</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> WhipCoffee</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Coffee</span><span style=\"color:#F8F8F2\"> $coffee)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\"> 5</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">, whip</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> VanillaCoffee</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Coffee</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Coffee</span><span style=\"color:#F8F8F2\"> $coffee)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $coffee;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getCost</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\"> 3</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getDescription</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">coffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">, vanilla</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Lets make a coffee now</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$someCoffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> SimpleCoffee</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// 10</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Simple Coffee</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$someCoffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> MilkCoffee</span><span style=\"color:#F8F8F2\">($someCoffee);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// 12</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Simple Coffee, milk</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$someCoffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> WhipCoffee</span><span style=\"color:#F8F8F2\">($someCoffee);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// 17</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Simple Coffee, milk, whip</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$someCoffee </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> VanillaCoffee</span><span style=\"color:#F8F8F2\">($someCoffee);</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getCost</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// 20</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $someCoffee</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getDescription</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Simple Coffee, milk, whip, vanilla</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-facade\">📦 Facade</h2>\n<p>Real world example</p>\n<blockquote>\n<p>How do you turn on the computer? “Hit the power button” you say! That is what you believe because you are using a simple interface that computer provides on the outside, internally it has to do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Facade pattern provides a simplified interface to a complex subsystem.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>A facade is an object that provides a simplified interface to a larger body of code, such as a class library.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Taking our computer example from above. Here we have the computer class</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Computer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getElectricShock</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Ouch!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> makeSound</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Beep beep!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> showLoadingScreen</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Loading..</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> bam</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Ready to be used!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> closeEverything</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Bup bup bup buzzzz!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sooth</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Zzzzz</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> pullCurrent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Haaah!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we have the facade</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> ComputerFacade</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $computer;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Computer</span><span style=\"color:#F8F8F2\"> $computer)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $computer;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> turnOn</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getElectricShock</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">makeSound</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">showLoadingScreen</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">bam</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> turnOff</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">closeEverything</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">pullCurrent</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">sooth</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now to use the facade</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$computer </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> ComputerFacade</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> Computer</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOn</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Ouch! Beep beep! Loading.. Ready to be used!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$computer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOff</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Bup bup buzzz! Haah! Zzzzz</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-flyweight\">🍃 Flyweight</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Did you ever have fresh tea from some stall? They often make more than one cup that you demanded and save the rest for any other customer so to save the resources e.g. gas etc. Flyweight pattern is all about that i.e. sharing.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Translating our tea example from above. First of all we have tea types and tea maker</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Anything that will be cached is flyweight.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Types of tea here will be flyweights.</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> KarakTea</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Acts as a factory and saves the tea</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TeaMaker</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $availableTea </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">($preference)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#8BE9FD\">empty</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">availableTea[$preference])) {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">            $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">availableTea[$preference] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> KarakTea</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">availableTea[$preference];</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have the <code>TeaShop</code> which takes orders and serves them</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TeaShop</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $orders;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $teaMaker;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">TeaMaker</span><span style=\"color:#F8F8F2\"> $teaMaker)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">teaMaker </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $teaMaker;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> takeOrder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $teaType, </span><span style=\"color:#FF79C6\">int</span><span style=\"color:#F8F8F2\"> $table)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">orders[$table] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">teaMaker</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">make</span><span style=\"color:#F8F8F2\">($teaType);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> serve</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        foreach</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">orders </span><span style=\"color:#FF79C6\">as</span><span style=\"color:#F8F8F2\"> $table </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> $tea) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">            echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Serving tea to table# </span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $table;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And it can be used as below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$teaMaker </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TeaMaker</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TeaShop</span><span style=\"color:#F8F8F2\">($teaMaker);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeOrder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">less sugar</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeOrder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">more milk</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">takeOrder</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">without sugar</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">5</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$shop</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">serve</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serving tea to table# 1</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serving tea to table# 2</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serving tea to table# 5</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-proxy\">🎱 Proxy</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Have you ever used an access card to go through a door? There are multiple options to open that door i.e. it can be opened either using access card or by pressing a button that bypasses the security. The door’s main functionality is to open but there is a proxy added on top of it to add some functionality. Let me better explain it using the code example below.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Using the proxy pattern, a class represents the functionality of another class.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>A proxy, in its most general form, is a class functioning as an interface to something else. A proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Taking our security door example from above. Firstly we have the door interface and an implementation of door</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> open</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> close</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> LabDoor</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> open</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Opening lab door</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> close</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Closing the lab door</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have a proxy to secure any doors that we want</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> SecuredDoor</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $door;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Door</span><span style=\"color:#F8F8F2\"> $door)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $door;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> open</span><span style=\"color:#F8F8F2\">($password)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">authenticate</span><span style=\"color:#F8F8F2\">($password)) {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">            $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">open</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">else</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">            echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Big no! It ain't possible.</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> authenticate</span><span style=\"color:#F8F8F2\">($password)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#F8F8F2\"> $password </span><span style=\"color:#FF79C6\">===</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">$ecr@t</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> close</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">close</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And here is how it can be used</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$door </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> SecuredDoor</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> LabDoor</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">open</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">invalid</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">); </span><span style=\"color:#6272A4\">// Big no! It ain't possible.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">open</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">$ecr@t</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">); </span><span style=\"color:#6272A4\">// Opening lab door</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$door</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">close</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// Closing lab door</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Yet another example would be some sort of data-mapper implementation. For example, I recently made an ODM (Object Data Mapper) for MongoDB using this pattern where I wrote a proxy around mongo classes while utilizing the magic method <code>__call()</code>. All the method calls were proxied to the original mongo class and result retrieved was returned as it is but in case of <code>find</code> or <code>findOne</code> data was mapped to the required class objects and the object was returned instead of <code>Cursor</code>.</p>\n<h2 id=\"behavioral-design-patterns\">Behavioral Design Patterns</h2>\n<p>In plain words</p>\n<blockquote>\n<p>It is concerned with assignment of responsibilities between the objects. What makes them different from structural patterns is they don’t just specify the structure but also outline the patterns for message passing/communication between them. Or in other words, they assist in answering “How to run a behavior in software component?”</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.</p>\n</blockquote>\n<p>There are 10 types of behavioral design patterns</p>\n<ul>\n<li><a href=\"#-chain-of-responsibility\">Chain of Responsibility</a></li>\n<li><a href=\"#-command\">Command</a></li>\n<li><a href=\"#-iterator\">Iterator</a></li>\n<li><a href=\"#-mediator\">Mediator</a></li>\n<li><a href=\"#-memento\">Memento</a></li>\n<li><a href=\"#-observer\">Observer</a></li>\n<li><a href=\"#-visitor\">Visitor</a></li>\n<li><a href=\"#-strategy\">Strategy</a></li>\n<li><a href=\"#-state\">State</a></li>\n<li><a href=\"#-template-method\">Template Method</a></li>\n</ul>\n<h2 id=\"-chain-of-responsibility\">🔗 Chain of Responsibility</h2>\n<p>Real world example</p>\n<blockquote>\n<p>For example, you have three payment methods (<code>A</code>, <code>B</code> and <code>C</code>) setup in your account; each having a different amount in it. <code>A</code> has 100 USD, <code>B</code> has 300 USD and <code>C</code> having 1000 USD and the preference for payments is chosen as <code>A</code> then <code>B</code> then <code>C</code>. You try to purchase something that is worth 210 USD. Using Chain of Responsibility, first of all account <code>A</code> will be checked if it can make the purchase, if yes purchase will be made and the chain will be broken. If not, request will move forward to account <code>B</code> checking for amount if yes chain will be broken otherwise the request will keep forwarding till it finds the suitable handler. Here <code>A</code>, <code>B</code> and <code>C</code> are links of the chain and the whole phenomenon is Chain of Responsibility.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series of processing objects. Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Translating our account example above. First of all we have a base account having the logic for chaining the accounts together and some accounts</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">abstract</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> Account</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $successor;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setNext</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Account</span><span style=\"color:#F8F8F2\"> $account)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">successor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $account;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> pay</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $amountToPay)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">canPay</span><span style=\"color:#F8F8F2\">($amountToPay)) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">            echo</span><span style=\"color:#8BE9FD\"> sprintf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Paid %s using %s</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9\"> PHP_EOL</span><span style=\"color:#F8F8F2\">,</span><span style=\"color:#F8F8F2\"> $amountToPay,</span><span style=\"color:#8BE9FD\"> get_called_class</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">elseif</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">successor) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">            echo</span><span style=\"color:#8BE9FD\"> sprintf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Cannot pay using %s. Proceeding ..</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9\"> PHP_EOL</span><span style=\"color:#F8F8F2\">,</span><span style=\"color:#8BE9FD\"> get_called_class</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">            $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">successor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">pay</span><span style=\"color:#F8F8F2\">($amountToPay);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        } </span><span style=\"color:#FF79C6\">else</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            throw</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Exception</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">None of the accounts have enough balance</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> canPay</span><span style=\"color:#F8F8F2\">($amount)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> bool</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">balance </span><span style=\"color:#FF79C6\">>=</span><span style=\"color:#F8F8F2\"> $amount;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Bank</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Account</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $balance)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">balance </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Paypal</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Account</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $balance)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">balance </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Bitcoin</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Account</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $balance)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">balance </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $balance;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now let’s prepare the chain using the links defined above (i.e. Bank, Paypal, Bitcoin)</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Let's prepare a chain like below</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">//      $bank->$paypal->$bitcoin</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">//</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// First priority bank</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">//      If bank can't pay then paypal</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">//      If paypal can't pay then bit coin</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$bank </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Bank</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">100</span><span style=\"color:#F8F8F2\">);          </span><span style=\"color:#6272A4\">// Bank with balance 100</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$paypal </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Paypal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">200</span><span style=\"color:#F8F8F2\">);      </span><span style=\"color:#6272A4\">// Paypal with balance 200</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$bitcoin </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Bitcoin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">300</span><span style=\"color:#F8F8F2\">);    </span><span style=\"color:#6272A4\">// Bitcoin with balance 300</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$bank</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setNext</span><span style=\"color:#F8F8F2\">($paypal);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$paypal</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setNext</span><span style=\"color:#F8F8F2\">($bitcoin);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Let's try to pay using the first priority i.e. bank</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$bank</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">pay</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">259</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output will be</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// ==============</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Cannot pay using bank. Proceeding ..</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Cannot pay using paypal. Proceeding ..:</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Paid 259 using Bitcoin!</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-command\">👮 Command</h2>\n<p>Real world example</p>\n<blockquote>\n<p>A generic example would be you ordering food at a restaurant. You (i.e. <code>Client</code>) ask the waiter (i.e. <code>Invoker</code>) to bring some food (i.e. <code>Command</code>) and waiter simply forwards the request to Chef (i.e. <code>Receiver</code>) who has the knowledge of what and how to cook.\nAnother example would be you (i.e. <code>Client</code>) switching on (i.e. <code>Command</code>) the television (i.e. <code>Receiver</code>) using a remote control (<code>Invoker</code>).</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Allows you to encapsulate actions in objects. The key idea behind this pattern is to provide the means to decouple client from receiver.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for the method parameters.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>First of all we have the receiver that has the implementation of every action that could be performed</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Receiver</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Bulb</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> turnOn</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Bulb has been lit</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> turnOff</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Darkness!</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>then we have an interface that each of the commands are going to implement and then we have a set of commands</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Command</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> execute</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> undo</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> redo</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Command</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TurnOn</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Command</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $bulb;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Bulb</span><span style=\"color:#F8F8F2\"> $bulb)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $bulb;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> execute</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOn</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> undo</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOff</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> redo</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">execute</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TurnOff</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Command</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $bulb;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Bulb</span><span style=\"color:#F8F8F2\"> $bulb)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $bulb;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> execute</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOff</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> undo</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">bulb</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">turnOn</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> redo</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">execute</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have an <code>Invoker</code> with whom the client will interact to process any commands</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Invoker</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> RemoteControl</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> submit</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Command</span><span style=\"color:#F8F8F2\"> $command)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $command</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">execute</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Finally let’s see how we can use it in our client</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$bulb </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Bulb</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$turnOn </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TurnOn</span><span style=\"color:#F8F8F2\">($bulb);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$turnOff </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TurnOff</span><span style=\"color:#F8F8F2\">($bulb);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$remote </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> RemoteControl</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$remote</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">submit</span><span style=\"color:#F8F8F2\">($turnOn); </span><span style=\"color:#6272A4\">// Bulb has been lit!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$remote</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">submit</span><span style=\"color:#F8F8F2\">($turnOff); </span><span style=\"color:#6272A4\">// Darkness!</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Command pattern can also be used to implement a transaction based system. Where you keep maintaining the history of commands as soon as you execute them. If the final command is successfully executed, all good otherwise just iterate through the history and keep executing the <code>undo</code> on all the executed commands.</p>\n<h2 id=\"-iterator\">➿ Iterator</h2>\n<p>Real world example</p>\n<blockquote>\n<p>An old radio set will be a good example of iterator, where user could start at some channel and then use next or previous buttons to go through the respective channels. Or take an example of MP3 player or a TV set where you could press the next and previous buttons to go through the consecutive channels or in other words they all provide an interface to iterate through the respective channels, songs or radio stations.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It presents a way to access the elements of an object without exposing the underlying presentation.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container’s elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus cannot be decoupled.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>In PHP it is quite easy to implement using SPL (Standard PHP Library). Translating our radio stations example from above. First of all we have <code>RadioStation</code></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> RadioStation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $frequency;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">float</span><span style=\"color:#F8F8F2\"> $frequency)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">frequency </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $frequency;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getFrequency</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> float</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">frequency;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have our iterator</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">use</span><span style=\"color:#8BE9FD;font-style:italic\"> Countable</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">use</span><span style=\"color:#8BE9FD;font-style:italic\"> Iterator</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> StationList</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Countable</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">Iterator</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    /** </span><span style=\"color:#FF79C6\">@var</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#FF79C6\">[]</span><span style=\"color:#6272A4\"> $stations */</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $stations </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    /** </span><span style=\"color:#FF79C6\">@var</span><span style=\"color:#FF79C6\"> int</span><span style=\"color:#6272A4\"> $counter */</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $counter;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">RadioStation</span><span style=\"color:#F8F8F2\"> $station)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations[] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $station;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> removeStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">RadioStation</span><span style=\"color:#F8F8F2\"> $toRemove)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $toRemoveFrequency </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $toRemove</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getFrequency</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD\"> array_filter</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations,</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#8BE9FD;font-style:italic\">RadioStation</span><span style=\"color:#F8F8F2\"> $station)</span><span style=\"color:#FF79C6\"> use</span><span style=\"color:#F8F8F2\"> ($toRemoveFrequency)</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            return</span><span style=\"color:#F8F8F2\"> $station</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getFrequency</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\"> !==</span><span style=\"color:#F8F8F2\"> $toRemoveFrequency;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        });</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> count</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#8BE9FD\"> count</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> current</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations[</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter];</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> key</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> next</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter</span><span style=\"color:#FF79C6\">++</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> rewind</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> valid</span><span style=\"color:#F8F8F2\">()</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> bool</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#8BE9FD\"> isset</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">stations[</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">counter]);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$stationList </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> StationList</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">89</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">101</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">102</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">103.2</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">foreach</span><span style=\"color:#F8F8F2\">($stationList </span><span style=\"color:#FF79C6\">as</span><span style=\"color:#F8F8F2\"> $station) {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">    echo</span><span style=\"color:#F8F8F2\"> $station</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getFrequency</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#BD93F9\"> PHP_EOL</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$stationList</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">removeStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> RadioStation</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">89</span><span style=\"color:#F8F8F2\">)); </span><span style=\"color:#6272A4\">// Will remove station 89</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-mediator\">👽 Mediator</h2>\n<p>Real world example</p>\n<blockquote>\n<p>A general example would be when you talk to someone on your mobile phone, there is a network provider sitting between you and them and your conversation goes through it instead of being directly sent. In this case network provider is mediator.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Mediator pattern adds a third party object (called mediator) to control the interaction between two objects (called colleagues). It helps reduce the coupling between the classes communicating with each other. Because now they don’t need to have the knowledge of each other’s implementation.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the mediator pattern defines an object that encapsulates how a set of objects interact. This pattern is considered to be a behavioral pattern due to the way it can alter the program’s running behavior.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Here is the simplest example of a chat room (i.e. mediator) with users (i.e. colleagues) sending messages to each other.</p>\n<p>First of all, we have the mediator i.e. the chat room</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> ChatRoomMediator</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> showMessage</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">User</span><span style=\"color:#F8F8F2\"> $user, </span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $message);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Mediator</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> ChatRoom</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> ChatRoomMediator</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> showMessage</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">User</span><span style=\"color:#F8F8F2\"> $user, </span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $message)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $time </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD\"> date</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">M d, y H:i</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $sender </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $user</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getName</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#F8F8F2\"> $time </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">[</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $sender </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">]:</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $message;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have our users i.e. colleagues</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> User</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $chatMediator;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name, </span><span style=\"color:#8BE9FD;font-style:italic\">ChatRoomMediator</span><span style=\"color:#F8F8F2\"> $chatMediator) {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">chatMediator </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $chatMediator;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getName</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> send</span><span style=\"color:#F8F8F2\">($message) {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">chatMediator</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">showMessage</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">, $message);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And the usage</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$mediator </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> ChatRoom</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$john </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> User</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">John Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, $mediator);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jane </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> User</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Jane Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, $mediator);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$john</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Hi there!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jane</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Hey!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output will be</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Feb 14, 10:58 [John]: Hi there!</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Feb 14, 10:58 [Jane]: Hey!</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-memento\">💾 Memento</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Take the example of calculator (i.e. originator), where whenever you perform some calculation the last calculation is saved in memory (i.e. memento) so that you can get back to it and maybe get it restored using some action buttons (i.e. caretaker).</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Memento pattern is about capturing and storing the current state of an object in a manner that it can be restored later on in a smooth manner.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The memento pattern is a software design pattern that provides the ability to restore an object to its previous state (undo via rollback).</p>\n</blockquote>\n<p>Usually useful when you need to provide some sort of undo functionality.</p>\n<p><strong>Programmatic Example</strong></p>\n<p>Lets take an example of text editor which keeps saving the state from time to time and that you can restore if you want.</p>\n<p>First of all we have our memento object that will be able to hold the editor state</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> EditorMemento</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $content;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $content)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $content;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have our editor i.e. originator that is going to use memento object</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Editor</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $content </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> ''</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#F8F8F2\"> $words;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getContent</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> save</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> EditorMemento</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> restore</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">EditorMemento</span><span style=\"color:#F8F8F2\"> $memento)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">content </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $memento</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$editor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Editor</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Type some stuff</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">This is the first sentence.</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">This is second.</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Save the state to restore to : This is the first sentence. This is second.</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$saved </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">save</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Type some more</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">And this is third.</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output: Content before Saving</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">echo</span><span style=\"color:#F8F8F2\"> $editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// This is the first sentence. This is second. And this is third.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Restoring to last saved state</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">restore</span><span style=\"color:#F8F8F2\">($saved);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getContent</span><span style=\"color:#F8F8F2\">(); </span><span style=\"color:#6272A4\">// This is the first sentence. This is second.</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-observer\">😎 Observer</h2>\n<p>Real world example</p>\n<blockquote>\n<p>A good example would be the job seekers where they subscribe to some job posting site and they are notified whenever there is a matching job opportunity.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Defines a dependency between objects so that whenever an object changes its state, all its dependents are notified.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Translating our example from above. First of all we have job seekers that need to be notified for a job posting</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> JobPost</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $title;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $title)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">title </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $title;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> getTitle</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">title;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> JobSeeker</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Observer</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $name)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $name;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> onJobPosted</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">JobPost</span><span style=\"color:#F8F8F2\"> $job)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Do something with the job posting</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Hi </span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> .</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">name </span><span style=\"color:#FF79C6\">.</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">! New job posted: </span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\">.</span><span style=\"color:#F8F8F2\"> $job</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">getTitle</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have our job postings to which the job seekers will subscribe</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> EmploymentAgency</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Observable</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $observers </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> notify</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">JobPost</span><span style=\"color:#F8F8F2\"> $jobPosting)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        foreach</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">observers </span><span style=\"color:#FF79C6\">as</span><span style=\"color:#F8F8F2\"> $observer) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            $observer</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">onJobPosted</span><span style=\"color:#F8F8F2\">($jobPosting);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> attach</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Observer</span><span style=\"color:#F8F8F2\"> $observer)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">observers[] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $observer;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> addJob</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">JobPost</span><span style=\"color:#F8F8F2\"> $jobPosting)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">notify</span><span style=\"color:#F8F8F2\">($jobPosting);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Create subscribers</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$johnDoe </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> JobSeeker</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">John Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$janeDoe </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> JobSeeker</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Jane Doe</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Create publisher and attach subscribers</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jobPostings </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> EmploymentAgency</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jobPostings</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">attach</span><span style=\"color:#F8F8F2\">($johnDoe);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jobPostings</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">attach</span><span style=\"color:#F8F8F2\">($janeDoe);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Add a new job and see if subscribers get notified</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$jobPostings</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">addJob</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> JobPost</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Software Engineer</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Hi John Doe! New job posted: Software Engineer</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Hi Jane Doe! New job posted: Software Engineer</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-visitor\">🏃 Visitor</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider someone visiting Dubai. They just need a way (i.e. visa) to enter Dubai. After arrival, they can come and visit any place in Dubai on their own without having to ask for permission or to do some leg work in order to visit any place here; just let them know of a place and they can visit it. Visitor pattern lets you do just that, it helps you add places to visit so that they can visit as much as they can without having to do any legwork.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Visitor pattern lets you add further operations to objects without having to modify them.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying those structures. It is one way to follow the open/closed principle.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Let’s take an example of a zoo simulation where we have several different kinds of animals and we have to make them Sound. Let’s translate this using visitor pattern</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Visitee</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> Animal</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> accept</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">AnimalOperation</span><span style=\"color:#F8F8F2\"> $operation);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Visitor</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> AnimalOperation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitMonkey</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Monkey</span><span style=\"color:#F8F8F2\"> $monkey);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitLion</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Lion</span><span style=\"color:#F8F8F2\"> $lion);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitDolphin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Dolphin</span><span style=\"color:#F8F8F2\"> $dolphin);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have our implementations for the animals</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Monkey</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Animal</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> shout</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Ooh oo aa aa!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> accept</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">AnimalOperation</span><span style=\"color:#F8F8F2\"> $operation)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $operation</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">visitMonkey</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Lion</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Animal</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> roar</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Roaaar!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> accept</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">AnimalOperation</span><span style=\"color:#F8F8F2\"> $operation)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $operation</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">visitLion</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Dolphin</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> Animal</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> speak</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Tuut tuttu tuutt!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> accept</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">AnimalOperation</span><span style=\"color:#F8F8F2\"> $operation)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $operation</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">visitDolphin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9;font-style:italic\">$this</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Let’s implement our visitor</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Speak</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> AnimalOperation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitMonkey</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Monkey</span><span style=\"color:#F8F8F2\"> $monkey)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $monkey</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">shout</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitLion</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Lion</span><span style=\"color:#F8F8F2\"> $lion)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">roar</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitDolphin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Dolphin</span><span style=\"color:#F8F8F2\"> $dolphin)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        $dolphin</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">speak</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$monkey </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Monkey</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$lion </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Lion</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$dolphin </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Dolphin</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$speak </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Speak</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$monkey</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);    </span><span style=\"color:#6272A4\">// Ooh oo aa aa!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);      </span><span style=\"color:#6272A4\">// Roaaar!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$dolphin</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);   </span><span style=\"color:#6272A4\">// Tuut tutt tuutt!</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We could have done this simply by having an inheritance hierarchy for the animals but then we would have to modify the animals whenever we would have to add new actions to animals. But now we will not have to change them. For example, let’s say we are asked to add the jump behavior to the animals, we can simply add that by creating a new visitor i.e.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Jump</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> AnimalOperation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitMonkey</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Monkey</span><span style=\"color:#F8F8F2\"> $monkey)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Jumped 20 feet high! on to the tree!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitLion</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Lion</span><span style=\"color:#F8F8F2\"> $lion)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Jumped 7 feet! Back on the ground!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> visitDolphin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">Dolphin</span><span style=\"color:#F8F8F2\"> $dolphin)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Walked on water a little and disappeared</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And for the usage</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$jump </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Jump</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$monkey</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);   </span><span style=\"color:#6272A4\">// Ooh oo aa aa!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$monkey</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($jump);    </span><span style=\"color:#6272A4\">// Jumped 20 feet high! on to the tree!</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);     </span><span style=\"color:#6272A4\">// Roaaar!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$lion</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($jump);      </span><span style=\"color:#6272A4\">// Jumped 7 feet! Back on the ground!</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$dolphin</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($speak);  </span><span style=\"color:#6272A4\">// Tuut tutt tuutt!</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$dolphin</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">accept</span><span style=\"color:#F8F8F2\">($jump);   </span><span style=\"color:#6272A4\">// Walked on water a little and disappeared</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-strategy\">💡 Strategy</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Consider the example of sorting, we implemented bubble sort but the data started to grow and bubble sort started getting very slow. In order to tackle this we implemented Quick sort. But now although the quick sort algorithm was doing better for large datasets, it was very slow for smaller datasets. In order to handle this we implemented a strategy where for small datasets, bubble sort will be used and for larger, quick sort.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Strategy pattern allows you to switch the algorithm or strategy based upon the situation.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables an algorithm’s behavior to be selected at runtime.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Translating our example from above. First of all we have our strategy interface and different strategy implementations</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> SortStrategy</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sort</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">array</span><span style=\"color:#F8F8F2\"> $dataset)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> BubbleSortStrategy</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> SortStrategy</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sort</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">array</span><span style=\"color:#F8F8F2\"> $dataset)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Sorting using bubble sort</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Do sorting</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#F8F8F2\"> $dataset;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> QuickSortStrategy</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> SortStrategy</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sort</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">array</span><span style=\"color:#F8F8F2\"> $dataset)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">Sorting using quick sort</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Do sorting</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#F8F8F2\"> $dataset;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then we have our client that is going to use any strategy</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> Sorter</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $sorter;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">SortStrategy</span><span style=\"color:#F8F8F2\"> $sorter)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">sorter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $sorter;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> sort</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">array</span><span style=\"color:#F8F8F2\"> $dataset)</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#FF79C6\"> array</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9;font-style:italic\"> $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">sorter</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">sort</span><span style=\"color:#F8F8F2\">($dataset);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$dataset </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> [</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">5</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">3</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">8</span><span style=\"color:#F8F8F2\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$sorter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Sorter</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> BubbleSortStrategy</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$sorter</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">sort</span><span style=\"color:#F8F8F2\">($dataset); </span><span style=\"color:#6272A4\">// Output : Sorting using bubble sort</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$sorter </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> Sorter</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> QuickSortStrategy</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$sorter</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">sort</span><span style=\"color:#F8F8F2\">($dataset); </span><span style=\"color:#6272A4\">// Output : Sorting using quick sort</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-state\">💢 State</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Imagine you are using some drawing application, you choose the paint brush to draw. Now the brush changes its behavior based on the selected color i.e. if you have chosen red color it will draw in red, if blue then it will be in blue etc.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>It lets you change the behavior of a class when the state changes.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>The state pattern is a behavioral software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods defined by the pattern’s superclass.\nThe state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations of methods defined in the pattern’s interface.</p>\n</blockquote>\n<p><strong>Programmatic example</strong></p>\n<p>Let’s take an example of text editor, it lets you change the state of text that is typed i.e. if you have selected bold, it starts writing in bold, if italic then in italics etc.</p>\n<p>First of all we have our state interface and some state implementations</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">interface</span><span style=\"color:#8BE9FD;font-style:italic\"> WritingState</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> UpperCase</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WritingState</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#8BE9FD\"> strtoupper</span><span style=\"color:#F8F8F2\">($words);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> LowerCase</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WritingState</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#8BE9FD\"> strtolower</span><span style=\"color:#F8F8F2\">($words);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> DefaultText</span><span style=\"color:#FF79C6\"> implements</span><span style=\"color:#8BE9FD;font-style:italic\"> WritingState</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#F8F8F2\"> $words;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we have our editor</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> TextEditor</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    protected</span><span style=\"color:#F8F8F2\"> $state;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#8BE9FD\"> __construct</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">WritingState</span><span style=\"color:#F8F8F2\"> $state)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">state </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $state;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> setState</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">WritingState</span><span style=\"color:#F8F8F2\"> $state)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">state </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> $state;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">string</span><span style=\"color:#F8F8F2\"> $words)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#F8F8F2\">state</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">write</span><span style=\"color:#F8F8F2\">($words);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$editor </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> TextEditor</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> DefaultText</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">First line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setState</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> UpperCase</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Second line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Third line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">setState</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">new</span><span style=\"color:#8BE9FD;font-style:italic\"> LowerCase</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Fourth line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$editor</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">type</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Fifth line</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output:</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// First line</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// SECOND LINE</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// THIRD LINE</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// fourth line</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// fifth line</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"-template-method\">📒 Template Method</h2>\n<p>Real world example</p>\n<blockquote>\n<p>Suppose we are getting some house built. The steps for building might look like</p>\n<ul>\n<li>Prepare the base of house</li>\n<li>Build the walls</li>\n<li>Add roof</li>\n<li>Add other floors</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>The order of these steps could never be changed i.e. you can’t build the roof before building the walls etc but each of the steps could be modified for example walls can be made of wood or polyester or stone.</p>\n</blockquote>\n<p>In plain words</p>\n<blockquote>\n<p>Template method defines the skeleton of how a certain algorithm could be performed, but defers the implementation of those steps to the children classes.</p>\n</blockquote>\n<p>Wikipedia says</p>\n<blockquote>\n<p>In software engineering, the template method pattern is a behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm’s structure.</p>\n</blockquote>\n<p><strong>Programmatic Example</strong></p>\n<p>Imagine we have a build tool that helps us test, lint, build, generate build reports (i.e. code coverage reports, linting report etc) and deploy our app on the test server.</p>\n<p>First of all we have our base class that specifies the skeleton for the build algorithm</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">abstract</span><span style=\"color:#FF79C6\"> class</span><span style=\"color:#8BE9FD\"> Builder</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // Template method</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    final</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> build</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">test</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">lint</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">assemble</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9;font-style:italic\">        $this</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">deploy</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> test</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> lint</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> assemble</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    abstract</span><span style=\"color:#FF79C6\"> public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> deploy</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Then we can have our implementations</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> AndroidBuilder</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Builder</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> test</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Running android tests</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> lint</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Linting the android code</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> assemble</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Assembling the android build</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> deploy</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Deploying android build to server</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">class</span><span style=\"color:#8BE9FD\"> IosBuilder</span><span style=\"color:#FF79C6\"> extends</span><span style=\"color:#8BE9FD;font-style:italic\"> Builder</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> test</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Running ios tests</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> lint</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Linting the ios code</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> assemble</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Assembling the ios build</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    public</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> deploy</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    {</span></span>\n<span class=\"line\"><span style=\"color:#8BE9FD\">        echo</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">Deploying ios build to server</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And then it can be used as</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">$androidBuilder </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> AndroidBuilder</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$androidBuilder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">build</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output:</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Running android tests</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Linting the android code</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Assembling the android build</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Deploying android build to server</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$iosBuilder </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#FF79C6\"> new</span><span style=\"color:#8BE9FD;font-style:italic\"> IosBuilder</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">$iosBuilder</span><span style=\"color:#FF79C6\">-></span><span style=\"color:#50FA7B\">build</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Output:</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Running ios tests</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Linting the ios code</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Assembling the ios build</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Deploying ios build to server</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"wrap-up-folks\">Wrap Up Folks</h2>\n<p>And that about wraps it up. I will continue to improve this, so you might want to watch/star this repository to revisit. Also, I have plans on writing the same about the architectural patterns, stay tuned for it.</p>";

				const frontmatter$x = {"title":"Design Patterns for Humans","description":"A language agnostic, ultra-simplified explanation to design patterns","authorId":"kamran","seo":{"title":"Design Patterns for Humans - roadmap.sh","description":"A language agnostic, ultra-simplified explanation to design patterns"},"isNew":false,"type":"textual","date":"2019-01-23T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$x = "/workspaces/developer-roadmap/src/data/guides/design-patterns-for-humans.md";
				const url$x = undefined;
				function rawContent$x() {
					return "\nDesign patterns are solutions to recurring problems; **guidelines on how to tackle certain problems**. They are not classes, packages or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle certain problems in certain situations.\n\n> Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems\n\nWikipedia describes them as\n\n> In software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations.\n\n## Be Careful\n\nDevelopers, mostly beginners, make the mistake of over-thinking and forcing the design patterns which results in a horrible un-maintainable mess. The rule of thumb is to keep the codebase as simple as possible, once you start developing, you will start to see the patterns repeating in the codebase in which case you can go ahead and implement the relevant design patterns.\n\n- Design patterns are not a silver bullet to all your problems.\n- Do not try to force them; bad things are supposed to happen, if done so.\n- Keep in mind that design patterns are solutions **to** problems, not solutions **finding** problems; so don't overthink.\n- If used in a correct place in a correct manner, they can prove to be a savior; or else they can result in a horrible mess of a code.\n\n> Also note that the code samples below are in PHP-7, however this shouldn't stop you because the concepts are same anyways.\n\n## Types of Design Patterns\n\nThis guide is about Gang of Four (GoF) design patterns, which refers to the four authors of [the book which introduced these design patterns](https://en.wikipedia.org/wiki/Design_Patterns). There are three types of design patterns:\n\n- [Creational](#creational-design-patterns)\n- [Structural](#structural-design-patterns)\n- [Behavioral](#behavioral-design-patterns)\n\n## Creational Design Patterns\n\nIn plain words\n\n> Creational patterns are focused towards how to instantiate an object or group of related objects.\n\nWikipedia says\n\n> In software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.\n\nThere are 6 types of Creational patterns\n\n- [Simple Factory](#-simple-factory)\n- [Factory Method](#-factory-method)\n- [Abstract Factory](#-abstract-factory)\n- [Builder](#-builder)\n- [Prototype](#-prototype)\n- [Singleton](#-singleton)\n\n## 🏠 Simple Factory\n\nReal world example\n\n> Consider, you are building a house and you need doors. You can either put on your carpenter clothes, bring some wood, glue, nails and all the tools required to build the door and start building it in your house or you can simply call the factory and get the built door delivered to you so that you don't need to learn anything about the door making or to deal with the mess that comes with making it.\n\nIn plain words\n\n> Simple factory simply generates an instance for client without exposing any instantiation logic to the client\n\nWikipedia says\n\n> In object-oriented programming (OOP), a factory is an object for creating other objects – formally a factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be \"new\".\n\n**Programmatic Example**\n\nFirst of all we have a door interface and the implementation\n\n```php\ninterface Door\n{\n    public function getWidth(): float;\n    public function getHeight(): float;\n}\n\nclass WoodenDoor implements Door\n{\n    protected $width;\n    protected $height;\n\n    public function __construct(float $width, float $height)\n    {\n        $this->width = $width;\n        $this->height = $height;\n    }\n\n    public function getWidth(): float\n    {\n        return $this->width;\n    }\n\n    public function getHeight(): float\n    {\n        return $this->height;\n    }\n}\n```\n\nThen we have our door factory that makes the door and returns it\n\n```php\nclass DoorFactory\n{\n    public static function makeDoor($width, $height): Door\n    {\n        return new WoodenDoor($width, $height);\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n// Make me a door of 100x200\n$door = DoorFactory::makeDoor(100, 200);\n\necho 'Width: ' . $door->getWidth();\necho 'Height: ' . $door->getHeight();\n\n// Make me a door of 50x100\n$door2 = DoorFactory::makeDoor(50, 100);\n```\n\n**When to Use?**\n\nWhen creating an object is not just a few assignments and involves some logic, it makes sense to put it in a dedicated factory instead of repeating the same code everywhere.\n\n## 🏭 Factory Method\n\nReal world example\n\n> Consider the case of a hiring manager. It is impossible for one person to interview for each of the positions. Based on the job opening, she has to decide and delegate the interview steps to different people.\n\nIn plain words\n\n> It provides a way to delegate the instantiation logic to child classes.\n\nWikipedia says\n\n> In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.\n\n**Programmatic Example**\n\nTaking our hiring manager example above. First of all we have an interviewer interface and some implementations for it\n\n```php\ninterface Interviewer\n{\n    public function askQuestions();\n}\n\nclass Developer implements Interviewer\n{\n    public function askQuestions()\n    {\n        echo 'Asking about design patterns!';\n    }\n}\n\nclass CommunityExecutive implements Interviewer\n{\n    public function askQuestions()\n    {\n        echo 'Asking about community building';\n    }\n}\n```\n\nNow let us create our `HiringManager`\n\n```php\nabstract class HiringManager\n{\n\n    // Factory method\n    abstract protected function makeInterviewer(): Interviewer;\n\n    public function takeInterview()\n    {\n        $interviewer = $this->makeInterviewer();\n        $interviewer->askQuestions();\n    }\n}\n\n```\n\nNow any child can extend it and provide the required interviewer\n\n```php\nclass DevelopmentManager extends HiringManager\n{\n    protected function makeInterviewer(): Interviewer\n    {\n        return new Developer();\n    }\n}\n\nclass MarketingManager extends HiringManager\n{\n    protected function makeInterviewer(): Interviewer\n    {\n        return new CommunityExecutive();\n    }\n}\n```\n\nand then it can be used as\n\n```php\n$devManager = new DevelopmentManager();\n$devManager->takeInterview(); // Output: Asking about design patterns\n\n$marketingManager = new MarketingManager();\n$marketingManager->takeInterview(); // Output: Asking about community building.\n```\n\n**When to use?**\n\nUseful when there is some generic processing in a class but the required sub-class is dynamically decided at runtime. Or putting it in other words, when the client doesn't know what exact sub-class it might need.\n\n## 🔨 Abstract Factory\n\nReal world example\n\n> Extending our door example from Simple Factory. Based on your needs you might get a wooden door from a wooden door shop, iron door from an iron shop or a PVC door from the relevant shop. Plus you might need a guy with different kind of specialities to fit the door, for example a carpenter for wooden door, welder for iron door etc. As you can see there is a dependency between the doors now, wooden door needs carpenter, iron door needs a welder etc.\n\nIn plain words\n\n> A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes.\n\nWikipedia says\n\n> The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes\n\n**Programmatic Example**\n\nTranslating the door example above. First of all we have our `Door` interface and some implementation for it\n\n```php\ninterface Door\n{\n    public function getDescription();\n}\n\nclass WoodenDoor implements Door\n{\n    public function getDescription()\n    {\n        echo 'I am a wooden door';\n    }\n}\n\nclass IronDoor implements Door\n{\n    public function getDescription()\n    {\n        echo 'I am an iron door';\n    }\n}\n```\n\nThen we have some fitting experts for each door type\n\n```php\ninterface DoorFittingExpert\n{\n    public function getDescription();\n}\n\nclass Welder implements DoorFittingExpert\n{\n    public function getDescription()\n    {\n        echo 'I can only fit iron doors';\n    }\n}\n\nclass Carpenter implements DoorFittingExpert\n{\n    public function getDescription()\n    {\n        echo 'I can only fit wooden doors';\n    }\n}\n```\n\nNow we have our abstract factory that would let us make family of related objects i.e. wooden door factory would create a wooden door and wooden door fitting expert and iron door factory would create an iron door and iron door fitting expert\n\n```php\ninterface DoorFactory\n{\n    public function makeDoor(): Door;\n    public function makeFittingExpert(): DoorFittingExpert;\n}\n\n// Wooden factory to return carpenter and wooden door\nclass WoodenDoorFactory implements DoorFactory\n{\n    public function makeDoor(): Door\n    {\n        return new WoodenDoor();\n    }\n\n    public function makeFittingExpert(): DoorFittingExpert\n    {\n        return new Carpenter();\n    }\n}\n\n// Iron door factory to get iron door and the relevant fitting expert\nclass IronDoorFactory implements DoorFactory\n{\n    public function makeDoor(): Door\n    {\n        return new IronDoor();\n    }\n\n    public function makeFittingExpert(): DoorFittingExpert\n    {\n        return new Welder();\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$woodenFactory = new WoodenDoorFactory();\n\n$door = $woodenFactory->makeDoor();\n$expert = $woodenFactory->makeFittingExpert();\n\n$door->getDescription();  // Output: I am a wooden door\n$expert->getDescription(); // Output: I can only fit wooden doors\n\n// Same for Iron Factory\n$ironFactory = new IronDoorFactory();\n\n$door = $ironFactory->makeDoor();\n$expert = $ironFactory->makeFittingExpert();\n\n$door->getDescription();  // Output: I am an iron door\n$expert->getDescription(); // Output: I can only fit iron doors\n```\n\nAs you can see the wooden door factory has encapsulated the `carpenter` and the `wooden door` also iron door factory has encapsulated the `iron door` and `welder`. And thus it had helped us make sure that for each of the created door, we do not get a wrong fitting expert.\n\n**When to use?**\n\nWhen there are interrelated dependencies with not-that-simple creation logic involved\n\n## 👷 Builder\n\nReal world example\n\n> Imagine you are at Hardee's and you order a specific deal, lets say, \"Big Hardee\" and they hand it over to you without _any questions_; this is the example of simple factory. But there are cases when the creation logic might involve more steps. For example you want a customized Subway deal, you have several options in how your burger is made e.g what bread do you want? what types of sauces would you like? What cheese would you want? etc. In such cases builder pattern comes to the rescue.\n\nIn plain words\n\n> Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.\n\nWikipedia says\n\n> The builder pattern is an object creation software design pattern with the intentions of finding a solution to the telescoping constructor anti-pattern.\n\nHaving said that let me add a bit about what telescoping constructor anti-pattern is. At one point or the other we have all seen a constructor like below:\n\n```php\npublic function __construct($size, $cheese = true, $pepperoni = true, $tomato = false, $lettuce = true)\n{\n}\n```\n\nAs you can see; the number of constructor parameters can quickly get out of hand and it might become difficult to understand the arrangement of parameters. Plus this parameter list could keep on growing if you would want to add more options in future. This is called telescoping constructor anti-pattern.\n\n**Programmatic Example**\n\nThe sane alternative is to use the builder pattern. First of all we have our burger that we want to make\n\n```php\nclass Burger\n{\n    protected $size;\n\n    protected $cheese = false;\n    protected $pepperoni = false;\n    protected $lettuce = false;\n    protected $tomato = false;\n\n    public function __construct(BurgerBuilder $builder)\n    {\n        $this->size = $builder->size;\n        $this->cheese = $builder->cheese;\n        $this->pepperoni = $builder->pepperoni;\n        $this->lettuce = $builder->lettuce;\n        $this->tomato = $builder->tomato;\n    }\n}\n```\n\nAnd then we have the builder\n\n```php\nclass BurgerBuilder\n{\n    public $size;\n\n    public $cheese = false;\n    public $pepperoni = false;\n    public $lettuce = false;\n    public $tomato = false;\n\n    public function __construct(int $size)\n    {\n        $this->size = $size;\n    }\n\n    public function addPepperoni()\n    {\n        $this->pepperoni = true;\n        return $this;\n    }\n\n    public function addLettuce()\n    {\n        $this->lettuce = true;\n        return $this;\n    }\n\n    public function addCheese()\n    {\n        $this->cheese = true;\n        return $this;\n    }\n\n    public function addTomato()\n    {\n        $this->tomato = true;\n        return $this;\n    }\n\n    public function build(): Burger\n    {\n        return new Burger($this);\n    }\n}\n```\n\nAnd then it can be used as:\n\n```php\n$burger = (new BurgerBuilder(14))\n                    ->addPepperoni()\n                    ->addLettuce()\n                    ->addTomato()\n                    ->build();\n```\n\n**When to use?**\n\nWhen there could be several flavors of an object and to avoid the constructor telescoping. The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.\n\n## 🐑 Prototype\n\nReal world example\n\n> Remember dolly? The sheep that was cloned! Lets not get into the details but the key point here is that it is all about cloning\n\nIn plain words\n\n> Create object based on an existing object through cloning.\n\nWikipedia says\n\n> The prototype pattern is a creational design pattern in software development. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects.\n\nIn short, it allows you to create a copy of an existing object and modify it to your needs, instead of going through the trouble of creating an object from scratch and setting it up.\n\n**Programmatic Example**\n\nIn PHP, it can be easily done using `clone`\n\n```php\nclass Sheep\n{\n    protected $name;\n    protected $category;\n\n    public function __construct(string $name, string $category = 'Mountain Sheep')\n    {\n        $this->name = $name;\n        $this->category = $category;\n    }\n\n    public function setName(string $name)\n    {\n        $this->name = $name;\n    }\n\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    public function setCategory(string $category)\n    {\n        $this->category = $category;\n    }\n\n    public function getCategory()\n    {\n        return $this->category;\n    }\n}\n```\n\nThen it can be cloned like below\n\n```php\n$original = new Sheep('Jolly');\necho $original->getName(); // Jolly\necho $original->getCategory(); // Mountain Sheep\n\n// Clone and modify what is required\n$cloned = clone $original;\n$cloned->setName('Dolly');\necho $cloned->getName(); // Dolly\necho $cloned->getCategory(); // Mountain sheep\n```\n\nAlso you could use the magic method `__clone` to modify the cloning behavior.\n\n**When to use?**\n\nWhen an object is required that is similar to existing object or when the creation would be expensive as compared to cloning.\n\n## 💍 Singleton\n\nReal world example\n\n> There can only be one president of a country at a time. The same president has to be brought to action, whenever duty calls. President here is singleton.\n\nIn plain words\n\n> Ensures that only one object of a particular class is ever created.\n\nWikipedia says\n\n> In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.\n\nSingleton pattern is actually considered an anti-pattern and overuse of it should be avoided. It is not necessarily bad and could have some valid use-cases but should be used with caution because it introduces a global state in your application and change to it in one place could affect in the other areas and it could become pretty difficult to debug. The other bad thing about them is it makes your code tightly coupled plus mocking the singleton could be difficult.\n\n**Programmatic Example**\n\nTo create a singleton, make the constructor private, disable cloning, disable extension and create a static variable to house the instance\n\n```php\nfinal class President\n{\n    private static $instance;\n\n    private function __construct()\n    {\n        // Hide the constructor\n    }\n\n    public static function getInstance(): President\n    {\n        if (!self::$instance) {\n            self::$instance = new self();\n        }\n\n        return self::$instance;\n    }\n\n    private function __clone()\n    {\n        // Disable cloning\n    }\n\n    private function __wakeup()\n    {\n        // Disable unserialize\n    }\n}\n```\n\nThen in order to use\n\n```php\n$president1 = President::getInstance();\n$president2 = President::getInstance();\n\nvar_dump($president1 === $president2); // true\n```\n\n## Structural Design Patterns\n\nIn plain words\n\n> Structural patterns are mostly concerned with object composition or in other words how the entities can use each other. Or yet another explanation would be, they help in answering \"How to build a software component?\"\n\nWikipedia says\n\n> In software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.\n\nThere are 7 types of structural patterns\n\n- [Adapter](#-adapter)\n- [Bridge](#-bridge)\n- [Composite](#-composite)\n- [Decorator](#-decorator)\n- [Facade](#-facade)\n- [Flyweight](#-flyweight)\n- [Proxy](#-proxy)\n\n## 🔌 Adapter\n\nReal world example\n\n> Consider that you have some pictures in your memory card and you need to transfer them to your computer. In order to transfer them you need some kind of adapter that is compatible with your computer ports so that you can attach memory card to your computer. In this case card reader is an adapter.\n> Another example would be the famous power adapter; a three legged plug can't be connected to a two pronged outlet, it needs to use a power adapter that makes it compatible with the two pronged outlet.\n> Yet another example would be a translator translating words spoken by one person to another\n\nIn plain words\n\n> Adapter pattern lets you wrap an otherwise incompatible object in an adapter to make it compatible with another class.\n\nWikipedia says\n\n> In software engineering, the adapter pattern is a software design pattern that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others without modifying their source code.\n\n**Programmatic Example**\n\nConsider a game where there is a hunter and he hunts lions.\n\nFirst we have an interface `Lion` that all types of lions have to implement\n\n```php\ninterface Lion\n{\n    public function roar();\n}\n\nclass AfricanLion implements Lion\n{\n    public function roar()\n    {\n    }\n}\n\nclass AsianLion implements Lion\n{\n    public function roar()\n    {\n    }\n}\n```\n\nAnd hunter expects any implementation of `Lion` interface to hunt.\n\n```php\nclass Hunter\n{\n    public function hunt(Lion $lion)\n    {\n        $lion->roar();\n    }\n}\n```\n\nNow let's say we have to add a `WildDog` in our game so that hunter can hunt that also. But we can't do that directly because dog has a different interface. To make it compatible for our hunter, we will have to create an adapter that is compatible\n\n```php\n// This needs to be added to the game\nclass WildDog\n{\n    public function bark()\n    {\n    }\n}\n\n// Adapter around wild dog to make it compatible with our game\nclass WildDogAdapter implements Lion\n{\n    protected $dog;\n\n    public function __construct(WildDog $dog)\n    {\n        $this->dog = $dog;\n    }\n\n    public function roar()\n    {\n        $this->dog->bark();\n    }\n}\n```\n\nAnd now the `WildDog` can be used in our game using `WildDogAdapter`.\n\n```php\n$wildDog = new WildDog();\n$wildDogAdapter = new WildDogAdapter($wildDog);\n\n$hunter = new Hunter();\n$hunter->hunt($wildDogAdapter);\n```\n\n## 🚡 Bridge\n\nReal world example\n\n> Consider you have a website with different pages and you are supposed to allow the user to change the theme. What would you do? Create multiple copies of each of the pages for each of the themes or would you just create separate theme and load them based on the user's preferences? Bridge pattern allows you to do the second i.e.\n\n![With and without the bridge pattern](https://cloud.githubusercontent.com/assets/11269635/23065293/33b7aea0-f515-11e6-983f-98823c9845ee.png)\n\nIn Plain Words\n\n> Bridge pattern is about preferring composition over inheritance. Implementation details are pushed from a hierarchy to another object with a separate hierarchy.\n\nWikipedia says\n\n> The bridge pattern is a design pattern used in software engineering that is meant to \"decouple an abstraction from its implementation so that the two can vary independently\"\n\n**Programmatic Example**\n\nTranslating our WebPage example from above. Here we have the `WebPage` hierarchy\n\n```php\ninterface WebPage\n{\n    public function __construct(Theme $theme);\n    public function getContent();\n}\n\nclass About implements WebPage\n{\n    protected $theme;\n\n    public function __construct(Theme $theme)\n    {\n        $this->theme = $theme;\n    }\n\n    public function getContent()\n    {\n        return \"About page in \" . $this->theme->getColor();\n    }\n}\n\nclass Careers implements WebPage\n{\n    protected $theme;\n\n    public function __construct(Theme $theme)\n    {\n        $this->theme = $theme;\n    }\n\n    public function getContent()\n    {\n        return \"Careers page in \" . $this->theme->getColor();\n    }\n}\n```\n\nAnd the separate theme hierarchy\n\n```php\n\ninterface Theme\n{\n    public function getColor();\n}\n\nclass DarkTheme implements Theme\n{\n    public function getColor()\n    {\n        return 'Dark Black';\n    }\n}\nclass LightTheme implements Theme\n{\n    public function getColor()\n    {\n        return 'Off white';\n    }\n}\nclass AquaTheme implements Theme\n{\n    public function getColor()\n    {\n        return 'Light blue';\n    }\n}\n```\n\nAnd both the hierarchies\n\n```php\n$darkTheme = new DarkTheme();\n\n$about = new About($darkTheme);\n$careers = new Careers($darkTheme);\n\necho $about->getContent(); // \"About page in Dark Black\";\necho $careers->getContent(); // \"Careers page in Dark Black\";\n```\n\n## 🌿 Composite\n\nReal world example\n\n> Every organization is composed of employees. Each of the employees has the same features i.e. has a salary, has some responsibilities, may or may not report to someone, may or may not have some subordinates etc.\n\nIn plain words\n\n> Composite pattern lets clients treat the individual objects in a uniform manner.\n\nWikipedia says\n\n> In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. The intent of a composite is to \"compose\" objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly.\n\n**Programmatic Example**\n\nTaking our employees example from above. Here we have different employee types\n\n```php\ninterface Employee\n{\n    public function __construct(string $name, float $salary);\n    public function getName(): string;\n    public function setSalary(float $salary);\n    public function getSalary(): float;\n    public function getRoles(): array;\n}\n\nclass Developer implements Employee\n{\n    protected $salary;\n    protected $name;\n    protected $roles;\n\n    public function __construct(string $name, float $salary)\n    {\n        $this->name = $name;\n        $this->salary = $salary;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function setSalary(float $salary)\n    {\n        $this->salary = $salary;\n    }\n\n    public function getSalary(): float\n    {\n        return $this->salary;\n    }\n\n    public function getRoles(): array\n    {\n        return $this->roles;\n    }\n}\n\nclass Designer implements Employee\n{\n    protected $salary;\n    protected $name;\n    protected $roles;\n\n    public function __construct(string $name, float $salary)\n    {\n        $this->name = $name;\n        $this->salary = $salary;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function setSalary(float $salary)\n    {\n        $this->salary = $salary;\n    }\n\n    public function getSalary(): float\n    {\n        return $this->salary;\n    }\n\n    public function getRoles(): array\n    {\n        return $this->roles;\n    }\n}\n```\n\nThen we have an organization which consists of several different types of employees\n\n```php\nclass Organization\n{\n    protected $employees;\n\n    public function addEmployee(Employee $employee)\n    {\n        $this->employees[] = $employee;\n    }\n\n    public function getNetSalaries(): float\n    {\n        $netSalary = 0;\n\n        foreach ($this->employees as $employee) {\n            $netSalary += $employee->getSalary();\n        }\n\n        return $netSalary;\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n// Prepare the employees\n$john = new Developer('John Doe', 12000);\n$jane = new Designer('Jane Doe', 15000);\n\n// Add them to organization\n$organization = new Organization();\n$organization->addEmployee($john);\n$organization->addEmployee($jane);\n\necho \"Net salaries: \" . $organization->getNetSalaries(); // Net Salaries: 27000\n```\n\n## ☕ Decorator\n\nReal world example\n\n> Imagine you run a car service shop offering multiple services. Now how do you calculate the bill to be charged? You pick one service and dynamically keep adding to it the prices for the provided services till you get the final cost. Here each type of service is a decorator.\n\nIn plain words\n\n> Decorator pattern lets you dynamically change the behavior of an object at run time by wrapping them in an object of a decorator class.\n\nWikipedia says\n\n> In object-oriented programming, the decorator pattern is a design pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. The decorator pattern is often useful for adhering to the Single Responsibility Principle, as it allows functionality to be divided between classes with unique areas of concern.\n\n**Programmatic Example**\n\nLets take coffee for example. First of all we have a simple coffee implementing the coffee interface\n\n```php\ninterface Coffee\n{\n    public function getCost();\n    public function getDescription();\n}\n\nclass SimpleCoffee implements Coffee\n{\n    public function getCost()\n    {\n        return 10;\n    }\n\n    public function getDescription()\n    {\n        return 'Simple coffee';\n    }\n}\n```\n\nWe want to make the code extensible to allow options to modify it if required. Lets make some add-ons (decorators)\n\n```php\nclass MilkCoffee implements Coffee\n{\n    protected $coffee;\n\n    public function __construct(Coffee $coffee)\n    {\n        $this->coffee = $coffee;\n    }\n\n    public function getCost()\n    {\n        return $this->coffee->getCost() + 2;\n    }\n\n    public function getDescription()\n    {\n        return $this->coffee->getDescription() . ', milk';\n    }\n}\n\nclass WhipCoffee implements Coffee\n{\n    protected $coffee;\n\n    public function __construct(Coffee $coffee)\n    {\n        $this->coffee = $coffee;\n    }\n\n    public function getCost()\n    {\n        return $this->coffee->getCost() + 5;\n    }\n\n    public function getDescription()\n    {\n        return $this->coffee->getDescription() . ', whip';\n    }\n}\n\nclass VanillaCoffee implements Coffee\n{\n    protected $coffee;\n\n    public function __construct(Coffee $coffee)\n    {\n        $this->coffee = $coffee;\n    }\n\n    public function getCost()\n    {\n        return $this->coffee->getCost() + 3;\n    }\n\n    public function getDescription()\n    {\n        return $this->coffee->getDescription() . ', vanilla';\n    }\n}\n```\n\nLets make a coffee now\n\n```php\n$someCoffee = new SimpleCoffee();\necho $someCoffee->getCost(); // 10\necho $someCoffee->getDescription(); // Simple Coffee\n\n$someCoffee = new MilkCoffee($someCoffee);\necho $someCoffee->getCost(); // 12\necho $someCoffee->getDescription(); // Simple Coffee, milk\n\n$someCoffee = new WhipCoffee($someCoffee);\necho $someCoffee->getCost(); // 17\necho $someCoffee->getDescription(); // Simple Coffee, milk, whip\n\n$someCoffee = new VanillaCoffee($someCoffee);\necho $someCoffee->getCost(); // 20\necho $someCoffee->getDescription(); // Simple Coffee, milk, whip, vanilla\n```\n\n## 📦 Facade\n\nReal world example\n\n> How do you turn on the computer? \"Hit the power button\" you say! That is what you believe because you are using a simple interface that computer provides on the outside, internally it has to do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade.\n\nIn plain words\n\n> Facade pattern provides a simplified interface to a complex subsystem.\n\nWikipedia says\n\n> A facade is an object that provides a simplified interface to a larger body of code, such as a class library.\n\n**Programmatic Example**\n\nTaking our computer example from above. Here we have the computer class\n\n```php\nclass Computer\n{\n    public function getElectricShock()\n    {\n        echo \"Ouch!\";\n    }\n\n    public function makeSound()\n    {\n        echo \"Beep beep!\";\n    }\n\n    public function showLoadingScreen()\n    {\n        echo \"Loading..\";\n    }\n\n    public function bam()\n    {\n        echo \"Ready to be used!\";\n    }\n\n    public function closeEverything()\n    {\n        echo \"Bup bup bup buzzzz!\";\n    }\n\n    public function sooth()\n    {\n        echo \"Zzzzz\";\n    }\n\n    public function pullCurrent()\n    {\n        echo \"Haaah!\";\n    }\n}\n```\n\nHere we have the facade\n\n```php\nclass ComputerFacade\n{\n    protected $computer;\n\n    public function __construct(Computer $computer)\n    {\n        $this->computer = $computer;\n    }\n\n    public function turnOn()\n    {\n        $this->computer->getElectricShock();\n        $this->computer->makeSound();\n        $this->computer->showLoadingScreen();\n        $this->computer->bam();\n    }\n\n    public function turnOff()\n    {\n        $this->computer->closeEverything();\n        $this->computer->pullCurrent();\n        $this->computer->sooth();\n    }\n}\n```\n\nNow to use the facade\n\n```php\n$computer = new ComputerFacade(new Computer());\n$computer->turnOn(); // Ouch! Beep beep! Loading.. Ready to be used!\n$computer->turnOff(); // Bup bup buzzz! Haah! Zzzzz\n```\n\n## 🍃 Flyweight\n\nReal world example\n\n> Did you ever have fresh tea from some stall? They often make more than one cup that you demanded and save the rest for any other customer so to save the resources e.g. gas etc. Flyweight pattern is all about that i.e. sharing.\n\nIn plain words\n\n> It is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects.\n\nWikipedia says\n\n> In computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory.\n\n**Programmatic example**\n\nTranslating our tea example from above. First of all we have tea types and tea maker\n\n```php\n// Anything that will be cached is flyweight.\n// Types of tea here will be flyweights.\nclass KarakTea\n{\n}\n\n// Acts as a factory and saves the tea\nclass TeaMaker\n{\n    protected $availableTea = [];\n\n    public function make($preference)\n    {\n        if (empty($this->availableTea[$preference])) {\n            $this->availableTea[$preference] = new KarakTea();\n        }\n\n        return $this->availableTea[$preference];\n    }\n}\n```\n\nThen we have the `TeaShop` which takes orders and serves them\n\n```php\nclass TeaShop\n{\n    protected $orders;\n    protected $teaMaker;\n\n    public function __construct(TeaMaker $teaMaker)\n    {\n        $this->teaMaker = $teaMaker;\n    }\n\n    public function takeOrder(string $teaType, int $table)\n    {\n        $this->orders[$table] = $this->teaMaker->make($teaType);\n    }\n\n    public function serve()\n    {\n        foreach ($this->orders as $table => $tea) {\n            echo \"Serving tea to table# \" . $table;\n        }\n    }\n}\n```\n\nAnd it can be used as below\n\n```php\n$teaMaker = new TeaMaker();\n$shop = new TeaShop($teaMaker);\n\n$shop->takeOrder('less sugar', 1);\n$shop->takeOrder('more milk', 2);\n$shop->takeOrder('without sugar', 5);\n\n$shop->serve();\n// Serving tea to table# 1\n// Serving tea to table# 2\n// Serving tea to table# 5\n```\n\n## 🎱 Proxy\n\nReal world example\n\n> Have you ever used an access card to go through a door? There are multiple options to open that door i.e. it can be opened either using access card or by pressing a button that bypasses the security. The door's main functionality is to open but there is a proxy added on top of it to add some functionality. Let me better explain it using the code example below.\n\nIn plain words\n\n> Using the proxy pattern, a class represents the functionality of another class.\n\nWikipedia says\n\n> A proxy, in its most general form, is a class functioning as an interface to something else. A proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked.\n\n**Programmatic Example**\n\nTaking our security door example from above. Firstly we have the door interface and an implementation of door\n\n```php\ninterface Door\n{\n    public function open();\n    public function close();\n}\n\nclass LabDoor implements Door\n{\n    public function open()\n    {\n        echo \"Opening lab door\";\n    }\n\n    public function close()\n    {\n        echo \"Closing the lab door\";\n    }\n}\n```\n\nThen we have a proxy to secure any doors that we want\n\n```php\nclass SecuredDoor\n{\n    protected $door;\n\n    public function __construct(Door $door)\n    {\n        $this->door = $door;\n    }\n\n    public function open($password)\n    {\n        if ($this->authenticate($password)) {\n            $this->door->open();\n        } else {\n            echo \"Big no! It ain't possible.\";\n        }\n    }\n\n    public function authenticate($password)\n    {\n        return $password === '$ecr@t';\n    }\n\n    public function close()\n    {\n        $this->door->close();\n    }\n}\n```\n\nAnd here is how it can be used\n\n```php\n$door = new SecuredDoor(new LabDoor());\n$door->open('invalid'); // Big no! It ain't possible.\n\n$door->open('$ecr@t'); // Opening lab door\n$door->close(); // Closing lab door\n```\n\nYet another example would be some sort of data-mapper implementation. For example, I recently made an ODM (Object Data Mapper) for MongoDB using this pattern where I wrote a proxy around mongo classes while utilizing the magic method `__call()`. All the method calls were proxied to the original mongo class and result retrieved was returned as it is but in case of `find` or `findOne` data was mapped to the required class objects and the object was returned instead of `Cursor`.\n\n## Behavioral Design Patterns\n\nIn plain words\n\n> It is concerned with assignment of responsibilities between the objects. What makes them different from structural patterns is they don't just specify the structure but also outline the patterns for message passing/communication between them. Or in other words, they assist in answering \"How to run a behavior in software component?\"\n\nWikipedia says\n\n> In software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.\n\nThere are 10 types of behavioral design patterns\n\n- [Chain of Responsibility](#-chain-of-responsibility)\n- [Command](#-command)\n- [Iterator](#-iterator)\n- [Mediator](#-mediator)\n- [Memento](#-memento)\n- [Observer](#-observer)\n- [Visitor](#-visitor)\n- [Strategy](#-strategy)\n- [State](#-state)\n- [Template Method](#-template-method)\n\n## 🔗 Chain of Responsibility\n\nReal world example\n\n> For example, you have three payment methods (`A`, `B` and `C`) setup in your account; each having a different amount in it. `A` has 100 USD, `B` has 300 USD and `C` having 1000 USD and the preference for payments is chosen as `A` then `B` then `C`. You try to purchase something that is worth 210 USD. Using Chain of Responsibility, first of all account `A` will be checked if it can make the purchase, if yes purchase will be made and the chain will be broken. If not, request will move forward to account `B` checking for amount if yes chain will be broken otherwise the request will keep forwarding till it finds the suitable handler. Here `A`, `B` and `C` are links of the chain and the whole phenomenon is Chain of Responsibility.\n\nIn plain words\n\n> It helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler.\n\nWikipedia says\n\n> In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series of processing objects. Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain.\n\n**Programmatic Example**\n\nTranslating our account example above. First of all we have a base account having the logic for chaining the accounts together and some accounts\n\n```php\nabstract class Account\n{\n    protected $successor;\n    protected $balance;\n\n    public function setNext(Account $account)\n    {\n        $this->successor = $account;\n    }\n\n    public function pay(float $amountToPay)\n    {\n        if ($this->canPay($amountToPay)) {\n            echo sprintf('Paid %s using %s' . PHP_EOL, $amountToPay, get_called_class());\n        } elseif ($this->successor) {\n            echo sprintf('Cannot pay using %s. Proceeding ..' . PHP_EOL, get_called_class());\n            $this->successor->pay($amountToPay);\n        } else {\n            throw new Exception('None of the accounts have enough balance');\n        }\n    }\n\n    public function canPay($amount): bool\n    {\n        return $this->balance >= $amount;\n    }\n}\n\nclass Bank extends Account\n{\n    protected $balance;\n\n    public function __construct(float $balance)\n    {\n        $this->balance = $balance;\n    }\n}\n\nclass Paypal extends Account\n{\n    protected $balance;\n\n    public function __construct(float $balance)\n    {\n        $this->balance = $balance;\n    }\n}\n\nclass Bitcoin extends Account\n{\n    protected $balance;\n\n    public function __construct(float $balance)\n    {\n        $this->balance = $balance;\n    }\n}\n```\n\nNow let's prepare the chain using the links defined above (i.e. Bank, Paypal, Bitcoin)\n\n```php\n// Let's prepare a chain like below\n//      $bank->$paypal->$bitcoin\n//\n// First priority bank\n//      If bank can't pay then paypal\n//      If paypal can't pay then bit coin\n\n$bank = new Bank(100);          // Bank with balance 100\n$paypal = new Paypal(200);      // Paypal with balance 200\n$bitcoin = new Bitcoin(300);    // Bitcoin with balance 300\n\n$bank->setNext($paypal);\n$paypal->setNext($bitcoin);\n\n// Let's try to pay using the first priority i.e. bank\n$bank->pay(259);\n\n// Output will be\n// ==============\n// Cannot pay using bank. Proceeding ..\n// Cannot pay using paypal. Proceeding ..:\n// Paid 259 using Bitcoin!\n```\n\n## 👮 Command\n\nReal world example\n\n> A generic example would be you ordering food at a restaurant. You (i.e. `Client`) ask the waiter (i.e. `Invoker`) to bring some food (i.e. `Command`) and waiter simply forwards the request to Chef (i.e. `Receiver`) who has the knowledge of what and how to cook.\n> Another example would be you (i.e. `Client`) switching on (i.e. `Command`) the television (i.e. `Receiver`) using a remote control (`Invoker`).\n\nIn plain words\n\n> Allows you to encapsulate actions in objects. The key idea behind this pattern is to provide the means to decouple client from receiver.\n\nWikipedia says\n\n> In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for the method parameters.\n\n**Programmatic Example**\n\nFirst of all we have the receiver that has the implementation of every action that could be performed\n\n```php\n// Receiver\nclass Bulb\n{\n    public function turnOn()\n    {\n        echo \"Bulb has been lit\";\n    }\n\n    public function turnOff()\n    {\n        echo \"Darkness!\";\n    }\n}\n```\n\nthen we have an interface that each of the commands are going to implement and then we have a set of commands\n\n```php\ninterface Command\n{\n    public function execute();\n    public function undo();\n    public function redo();\n}\n\n// Command\nclass TurnOn implements Command\n{\n    protected $bulb;\n\n    public function __construct(Bulb $bulb)\n    {\n        $this->bulb = $bulb;\n    }\n\n    public function execute()\n    {\n        $this->bulb->turnOn();\n    }\n\n    public function undo()\n    {\n        $this->bulb->turnOff();\n    }\n\n    public function redo()\n    {\n        $this->execute();\n    }\n}\n\nclass TurnOff implements Command\n{\n    protected $bulb;\n\n    public function __construct(Bulb $bulb)\n    {\n        $this->bulb = $bulb;\n    }\n\n    public function execute()\n    {\n        $this->bulb->turnOff();\n    }\n\n    public function undo()\n    {\n        $this->bulb->turnOn();\n    }\n\n    public function redo()\n    {\n        $this->execute();\n    }\n}\n```\n\nThen we have an `Invoker` with whom the client will interact to process any commands\n\n```php\n// Invoker\nclass RemoteControl\n{\n    public function submit(Command $command)\n    {\n        $command->execute();\n    }\n}\n```\n\nFinally let's see how we can use it in our client\n\n```php\n$bulb = new Bulb();\n\n$turnOn = new TurnOn($bulb);\n$turnOff = new TurnOff($bulb);\n\n$remote = new RemoteControl();\n$remote->submit($turnOn); // Bulb has been lit!\n$remote->submit($turnOff); // Darkness!\n```\n\nCommand pattern can also be used to implement a transaction based system. Where you keep maintaining the history of commands as soon as you execute them. If the final command is successfully executed, all good otherwise just iterate through the history and keep executing the `undo` on all the executed commands.\n\n## ➿ Iterator\n\nReal world example\n\n> An old radio set will be a good example of iterator, where user could start at some channel and then use next or previous buttons to go through the respective channels. Or take an example of MP3 player or a TV set where you could press the next and previous buttons to go through the consecutive channels or in other words they all provide an interface to iterate through the respective channels, songs or radio stations.\n\nIn plain words\n\n> It presents a way to access the elements of an object without exposing the underlying presentation.\n\nWikipedia says\n\n> In object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container's elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus cannot be decoupled.\n\n**Programmatic example**\n\nIn PHP it is quite easy to implement using SPL (Standard PHP Library). Translating our radio stations example from above. First of all we have `RadioStation`\n\n```php\nclass RadioStation\n{\n    protected $frequency;\n\n    public function __construct(float $frequency)\n    {\n        $this->frequency = $frequency;\n    }\n\n    public function getFrequency(): float\n    {\n        return $this->frequency;\n    }\n}\n```\n\nThen we have our iterator\n\n```php\nuse Countable;\nuse Iterator;\n\nclass StationList implements Countable, Iterator\n{\n    /** @var RadioStation[] $stations */\n    protected $stations = [];\n\n    /** @var int $counter */\n    protected $counter;\n\n    public function addStation(RadioStation $station)\n    {\n        $this->stations[] = $station;\n    }\n\n    public function removeStation(RadioStation $toRemove)\n    {\n        $toRemoveFrequency = $toRemove->getFrequency();\n        $this->stations = array_filter($this->stations, function (RadioStation $station) use ($toRemoveFrequency) {\n            return $station->getFrequency() !== $toRemoveFrequency;\n        });\n    }\n\n    public function count(): int\n    {\n        return count($this->stations);\n    }\n\n    public function current(): RadioStation\n    {\n        return $this->stations[$this->counter];\n    }\n\n    public function key()\n    {\n        return $this->counter;\n    }\n\n    public function next()\n    {\n        $this->counter++;\n    }\n\n    public function rewind()\n    {\n        $this->counter = 0;\n    }\n\n    public function valid(): bool\n    {\n        return isset($this->stations[$this->counter]);\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$stationList = new StationList();\n\n$stationList->addStation(new RadioStation(89));\n$stationList->addStation(new RadioStation(101));\n$stationList->addStation(new RadioStation(102));\n$stationList->addStation(new RadioStation(103.2));\n\nforeach($stationList as $station) {\n    echo $station->getFrequency() . PHP_EOL;\n}\n\n$stationList->removeStation(new RadioStation(89)); // Will remove station 89\n```\n\n## 👽 Mediator\n\nReal world example\n\n> A general example would be when you talk to someone on your mobile phone, there is a network provider sitting between you and them and your conversation goes through it instead of being directly sent. In this case network provider is mediator.\n\nIn plain words\n\n> Mediator pattern adds a third party object (called mediator) to control the interaction between two objects (called colleagues). It helps reduce the coupling between the classes communicating with each other. Because now they don't need to have the knowledge of each other's implementation.\n\nWikipedia says\n\n> In software engineering, the mediator pattern defines an object that encapsulates how a set of objects interact. This pattern is considered to be a behavioral pattern due to the way it can alter the program's running behavior.\n\n**Programmatic Example**\n\nHere is the simplest example of a chat room (i.e. mediator) with users (i.e. colleagues) sending messages to each other.\n\nFirst of all, we have the mediator i.e. the chat room\n\n```php\ninterface ChatRoomMediator\n{\n    public function showMessage(User $user, string $message);\n}\n\n// Mediator\nclass ChatRoom implements ChatRoomMediator\n{\n    public function showMessage(User $user, string $message)\n    {\n        $time = date('M d, y H:i');\n        $sender = $user->getName();\n\n        echo $time . '[' . $sender . ']:' . $message;\n    }\n}\n```\n\nThen we have our users i.e. colleagues\n\n```php\nclass User {\n    protected $name;\n    protected $chatMediator;\n\n    public function __construct(string $name, ChatRoomMediator $chatMediator) {\n        $this->name = $name;\n        $this->chatMediator = $chatMediator;\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n\n    public function send($message) {\n        $this->chatMediator->showMessage($this, $message);\n    }\n}\n```\n\nAnd the usage\n\n```php\n$mediator = new ChatRoom();\n\n$john = new User('John Doe', $mediator);\n$jane = new User('Jane Doe', $mediator);\n\n$john->send('Hi there!');\n$jane->send('Hey!');\n\n// Output will be\n// Feb 14, 10:58 [John]: Hi there!\n// Feb 14, 10:58 [Jane]: Hey!\n```\n\n## 💾 Memento\n\nReal world example\n\n> Take the example of calculator (i.e. originator), where whenever you perform some calculation the last calculation is saved in memory (i.e. memento) so that you can get back to it and maybe get it restored using some action buttons (i.e. caretaker).\n\nIn plain words\n\n> Memento pattern is about capturing and storing the current state of an object in a manner that it can be restored later on in a smooth manner.\n\nWikipedia says\n\n> The memento pattern is a software design pattern that provides the ability to restore an object to its previous state (undo via rollback).\n\nUsually useful when you need to provide some sort of undo functionality.\n\n**Programmatic Example**\n\nLets take an example of text editor which keeps saving the state from time to time and that you can restore if you want.\n\nFirst of all we have our memento object that will be able to hold the editor state\n\n```php\nclass EditorMemento\n{\n    protected $content;\n\n    public function __construct(string $content)\n    {\n        $this->content = $content;\n    }\n\n    public function getContent()\n    {\n        return $this->content;\n    }\n}\n```\n\nThen we have our editor i.e. originator that is going to use memento object\n\n```php\nclass Editor\n{\n    protected $content = '';\n\n    public function type(string $words)\n    {\n        $this->content = $this->content . ' ' . $words;\n    }\n\n    public function getContent()\n    {\n        return $this->content;\n    }\n\n    public function save()\n    {\n        return new EditorMemento($this->content);\n    }\n\n    public function restore(EditorMemento $memento)\n    {\n        $this->content = $memento->getContent();\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$editor = new Editor();\n\n// Type some stuff\n$editor->type('This is the first sentence.');\n$editor->type('This is second.');\n\n// Save the state to restore to : This is the first sentence. This is second.\n$saved = $editor->save();\n\n// Type some more\n$editor->type('And this is third.');\n\n// Output: Content before Saving\necho $editor->getContent(); // This is the first sentence. This is second. And this is third.\n\n// Restoring to last saved state\n$editor->restore($saved);\n\n$editor->getContent(); // This is the first sentence. This is second.\n```\n\n## 😎 Observer\n\nReal world example\n\n> A good example would be the job seekers where they subscribe to some job posting site and they are notified whenever there is a matching job opportunity.\n\nIn plain words\n\n> Defines a dependency between objects so that whenever an object changes its state, all its dependents are notified.\n\nWikipedia says\n\n> The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\n\n**Programmatic example**\n\nTranslating our example from above. First of all we have job seekers that need to be notified for a job posting\n\n```php\nclass JobPost\n{\n    protected $title;\n\n    public function __construct(string $title)\n    {\n        $this->title = $title;\n    }\n\n    public function getTitle()\n    {\n        return $this->title;\n    }\n}\n\nclass JobSeeker implements Observer\n{\n    protected $name;\n\n    public function __construct(string $name)\n    {\n        $this->name = $name;\n    }\n\n    public function onJobPosted(JobPost $job)\n    {\n        // Do something with the job posting\n        echo 'Hi ' . $this->name . '! New job posted: '. $job->getTitle();\n    }\n}\n```\n\nThen we have our job postings to which the job seekers will subscribe\n\n```php\nclass EmploymentAgency implements Observable\n{\n    protected $observers = [];\n\n    protected function notify(JobPost $jobPosting)\n    {\n        foreach ($this->observers as $observer) {\n            $observer->onJobPosted($jobPosting);\n        }\n    }\n\n    public function attach(Observer $observer)\n    {\n        $this->observers[] = $observer;\n    }\n\n    public function addJob(JobPost $jobPosting)\n    {\n        $this->notify($jobPosting);\n    }\n}\n```\n\nThen it can be used as\n\n```php\n// Create subscribers\n$johnDoe = new JobSeeker('John Doe');\n$janeDoe = new JobSeeker('Jane Doe');\n\n// Create publisher and attach subscribers\n$jobPostings = new EmploymentAgency();\n$jobPostings->attach($johnDoe);\n$jobPostings->attach($janeDoe);\n\n// Add a new job and see if subscribers get notified\n$jobPostings->addJob(new JobPost('Software Engineer'));\n\n// Output\n// Hi John Doe! New job posted: Software Engineer\n// Hi Jane Doe! New job posted: Software Engineer\n```\n\n## 🏃 Visitor\n\nReal world example\n\n> Consider someone visiting Dubai. They just need a way (i.e. visa) to enter Dubai. After arrival, they can come and visit any place in Dubai on their own without having to ask for permission or to do some leg work in order to visit any place here; just let them know of a place and they can visit it. Visitor pattern lets you do just that, it helps you add places to visit so that they can visit as much as they can without having to do any legwork.\n\nIn plain words\n\n> Visitor pattern lets you add further operations to objects without having to modify them.\n\nWikipedia says\n\n> In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying those structures. It is one way to follow the open/closed principle.\n\n**Programmatic example**\n\nLet's take an example of a zoo simulation where we have several different kinds of animals and we have to make them Sound. Let's translate this using visitor pattern\n\n```php\n// Visitee\ninterface Animal\n{\n    public function accept(AnimalOperation $operation);\n}\n\n// Visitor\ninterface AnimalOperation\n{\n    public function visitMonkey(Monkey $monkey);\n    public function visitLion(Lion $lion);\n    public function visitDolphin(Dolphin $dolphin);\n}\n```\n\nThen we have our implementations for the animals\n\n```php\nclass Monkey implements Animal\n{\n    public function shout()\n    {\n        echo 'Ooh oo aa aa!';\n    }\n\n    public function accept(AnimalOperation $operation)\n    {\n        $operation->visitMonkey($this);\n    }\n}\n\nclass Lion implements Animal\n{\n    public function roar()\n    {\n        echo 'Roaaar!';\n    }\n\n    public function accept(AnimalOperation $operation)\n    {\n        $operation->visitLion($this);\n    }\n}\n\nclass Dolphin implements Animal\n{\n    public function speak()\n    {\n        echo 'Tuut tuttu tuutt!';\n    }\n\n    public function accept(AnimalOperation $operation)\n    {\n        $operation->visitDolphin($this);\n    }\n}\n```\n\nLet's implement our visitor\n\n```php\nclass Speak implements AnimalOperation\n{\n    public function visitMonkey(Monkey $monkey)\n    {\n        $monkey->shout();\n    }\n\n    public function visitLion(Lion $lion)\n    {\n        $lion->roar();\n    }\n\n    public function visitDolphin(Dolphin $dolphin)\n    {\n        $dolphin->speak();\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$monkey = new Monkey();\n$lion = new Lion();\n$dolphin = new Dolphin();\n\n$speak = new Speak();\n\n$monkey->accept($speak);    // Ooh oo aa aa!\n$lion->accept($speak);      // Roaaar!\n$dolphin->accept($speak);   // Tuut tutt tuutt!\n```\n\nWe could have done this simply by having an inheritance hierarchy for the animals but then we would have to modify the animals whenever we would have to add new actions to animals. But now we will not have to change them. For example, let's say we are asked to add the jump behavior to the animals, we can simply add that by creating a new visitor i.e.\n\n```php\nclass Jump implements AnimalOperation\n{\n    public function visitMonkey(Monkey $monkey)\n    {\n        echo 'Jumped 20 feet high! on to the tree!';\n    }\n\n    public function visitLion(Lion $lion)\n    {\n        echo 'Jumped 7 feet! Back on the ground!';\n    }\n\n    public function visitDolphin(Dolphin $dolphin)\n    {\n        echo 'Walked on water a little and disappeared';\n    }\n}\n```\n\nAnd for the usage\n\n```php\n$jump = new Jump();\n\n$monkey->accept($speak);   // Ooh oo aa aa!\n$monkey->accept($jump);    // Jumped 20 feet high! on to the tree!\n\n$lion->accept($speak);     // Roaaar!\n$lion->accept($jump);      // Jumped 7 feet! Back on the ground!\n\n$dolphin->accept($speak);  // Tuut tutt tuutt!\n$dolphin->accept($jump);   // Walked on water a little and disappeared\n```\n\n## 💡 Strategy\n\nReal world example\n\n> Consider the example of sorting, we implemented bubble sort but the data started to grow and bubble sort started getting very slow. In order to tackle this we implemented Quick sort. But now although the quick sort algorithm was doing better for large datasets, it was very slow for smaller datasets. In order to handle this we implemented a strategy where for small datasets, bubble sort will be used and for larger, quick sort.\n\nIn plain words\n\n> Strategy pattern allows you to switch the algorithm or strategy based upon the situation.\n\nWikipedia says\n\n> In computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables an algorithm's behavior to be selected at runtime.\n\n**Programmatic example**\n\nTranslating our example from above. First of all we have our strategy interface and different strategy implementations\n\n```php\ninterface SortStrategy\n{\n    public function sort(array $dataset): array;\n}\n\nclass BubbleSortStrategy implements SortStrategy\n{\n    public function sort(array $dataset): array\n    {\n        echo \"Sorting using bubble sort\";\n\n        // Do sorting\n        return $dataset;\n    }\n}\n\nclass QuickSortStrategy implements SortStrategy\n{\n    public function sort(array $dataset): array\n    {\n        echo \"Sorting using quick sort\";\n\n        // Do sorting\n        return $dataset;\n    }\n}\n```\n\nAnd then we have our client that is going to use any strategy\n\n```php\nclass Sorter\n{\n    protected $sorter;\n\n    public function __construct(SortStrategy $sorter)\n    {\n        $this->sorter = $sorter;\n    }\n\n    public function sort(array $dataset): array\n    {\n        return $this->sorter->sort($dataset);\n    }\n}\n```\n\nAnd it can be used as\n\n```php\n$dataset = [1, 5, 4, 3, 2, 8];\n\n$sorter = new Sorter(new BubbleSortStrategy());\n$sorter->sort($dataset); // Output : Sorting using bubble sort\n\n$sorter = new Sorter(new QuickSortStrategy());\n$sorter->sort($dataset); // Output : Sorting using quick sort\n```\n\n## 💢 State\n\nReal world example\n\n> Imagine you are using some drawing application, you choose the paint brush to draw. Now the brush changes its behavior based on the selected color i.e. if you have chosen red color it will draw in red, if blue then it will be in blue etc.\n\nIn plain words\n\n> It lets you change the behavior of a class when the state changes.\n\nWikipedia says\n\n> The state pattern is a behavioral software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods defined by the pattern's superclass.\n> The state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations of methods defined in the pattern's interface.\n\n**Programmatic example**\n\nLet's take an example of text editor, it lets you change the state of text that is typed i.e. if you have selected bold, it starts writing in bold, if italic then in italics etc.\n\nFirst of all we have our state interface and some state implementations\n\n```php\ninterface WritingState\n{\n    public function write(string $words);\n}\n\nclass UpperCase implements WritingState\n{\n    public function write(string $words)\n    {\n        echo strtoupper($words);\n    }\n}\n\nclass LowerCase implements WritingState\n{\n    public function write(string $words)\n    {\n        echo strtolower($words);\n    }\n}\n\nclass DefaultText implements WritingState\n{\n    public function write(string $words)\n    {\n        echo $words;\n    }\n}\n```\n\nThen we have our editor\n\n```php\nclass TextEditor\n{\n    protected $state;\n\n    public function __construct(WritingState $state)\n    {\n        $this->state = $state;\n    }\n\n    public function setState(WritingState $state)\n    {\n        $this->state = $state;\n    }\n\n    public function type(string $words)\n    {\n        $this->state->write($words);\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$editor = new TextEditor(new DefaultText());\n\n$editor->type('First line');\n\n$editor->setState(new UpperCase());\n\n$editor->type('Second line');\n$editor->type('Third line');\n\n$editor->setState(new LowerCase());\n\n$editor->type('Fourth line');\n$editor->type('Fifth line');\n\n// Output:\n// First line\n// SECOND LINE\n// THIRD LINE\n// fourth line\n// fifth line\n```\n\n## 📒 Template Method\n\nReal world example\n\n> Suppose we are getting some house built. The steps for building might look like\n>\n> - Prepare the base of house\n> - Build the walls\n> - Add roof\n> - Add other floors\n\n> The order of these steps could never be changed i.e. you can't build the roof before building the walls etc but each of the steps could be modified for example walls can be made of wood or polyester or stone.\n\nIn plain words\n\n> Template method defines the skeleton of how a certain algorithm could be performed, but defers the implementation of those steps to the children classes.\n\nWikipedia says\n\n> In software engineering, the template method pattern is a behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm's structure.\n\n**Programmatic Example**\n\nImagine we have a build tool that helps us test, lint, build, generate build reports (i.e. code coverage reports, linting report etc) and deploy our app on the test server.\n\nFirst of all we have our base class that specifies the skeleton for the build algorithm\n\n```php\nabstract class Builder\n{\n\n    // Template method\n    final public function build()\n    {\n        $this->test();\n        $this->lint();\n        $this->assemble();\n        $this->deploy();\n    }\n\n    abstract public function test();\n    abstract public function lint();\n    abstract public function assemble();\n    abstract public function deploy();\n}\n```\n\nThen we can have our implementations\n\n```php\nclass AndroidBuilder extends Builder\n{\n    public function test()\n    {\n        echo 'Running android tests';\n    }\n\n    public function lint()\n    {\n        echo 'Linting the android code';\n    }\n\n    public function assemble()\n    {\n        echo 'Assembling the android build';\n    }\n\n    public function deploy()\n    {\n        echo 'Deploying android build to server';\n    }\n}\n\nclass IosBuilder extends Builder\n{\n    public function test()\n    {\n        echo 'Running ios tests';\n    }\n\n    public function lint()\n    {\n        echo 'Linting the ios code';\n    }\n\n    public function assemble()\n    {\n        echo 'Assembling the ios build';\n    }\n\n    public function deploy()\n    {\n        echo 'Deploying ios build to server';\n    }\n}\n```\n\nAnd then it can be used as\n\n```php\n$androidBuilder = new AndroidBuilder();\n$androidBuilder->build();\n\n// Output:\n// Running android tests\n// Linting the android code\n// Assembling the android build\n// Deploying android build to server\n\n$iosBuilder = new IosBuilder();\n$iosBuilder->build();\n\n// Output:\n// Running ios tests\n// Linting the ios code\n// Assembling the ios build\n// Deploying ios build to server\n```\n\n## Wrap Up Folks\n\nAnd that about wraps it up. I will continue to improve this, so you might want to watch/star this repository to revisit. Also, I have plans on writing the same about the architectural patterns, stay tuned for it.\n";
				}
				function compiledContent$x() {
					return html$x;
				}
				function getHeadings$x() {
					return [{"depth":2,"slug":"be-careful","text":"Be Careful"},{"depth":2,"slug":"types-of-design-patterns","text":"Types of Design Patterns"},{"depth":2,"slug":"creational-design-patterns","text":"Creational Design Patterns"},{"depth":2,"slug":"-simple-factory","text":"🏠 Simple Factory"},{"depth":2,"slug":"-factory-method","text":"🏭 Factory Method"},{"depth":2,"slug":"-abstract-factory","text":"🔨 Abstract Factory"},{"depth":2,"slug":"-builder","text":"👷 Builder"},{"depth":2,"slug":"-prototype","text":"🐑 Prototype"},{"depth":2,"slug":"-singleton","text":"💍 Singleton"},{"depth":2,"slug":"structural-design-patterns","text":"Structural Design Patterns"},{"depth":2,"slug":"-adapter","text":"🔌 Adapter"},{"depth":2,"slug":"-bridge","text":"🚡 Bridge"},{"depth":2,"slug":"-composite","text":"🌿 Composite"},{"depth":2,"slug":"-decorator","text":"☕ Decorator"},{"depth":2,"slug":"-facade","text":"📦 Facade"},{"depth":2,"slug":"-flyweight","text":"🍃 Flyweight"},{"depth":2,"slug":"-proxy","text":"🎱 Proxy"},{"depth":2,"slug":"behavioral-design-patterns","text":"Behavioral Design Patterns"},{"depth":2,"slug":"-chain-of-responsibility","text":"🔗 Chain of Responsibility"},{"depth":2,"slug":"-command","text":"👮 Command"},{"depth":2,"slug":"-iterator","text":"➿ Iterator"},{"depth":2,"slug":"-mediator","text":"👽 Mediator"},{"depth":2,"slug":"-memento","text":"💾 Memento"},{"depth":2,"slug":"-observer","text":"😎 Observer"},{"depth":2,"slug":"-visitor","text":"🏃 Visitor"},{"depth":2,"slug":"-strategy","text":"💡 Strategy"},{"depth":2,"slug":"-state","text":"💢 State"},{"depth":2,"slug":"-template-method","text":"📒 Template Method"},{"depth":2,"slug":"wrap-up-folks","text":"Wrap Up Folks"}];
				}

				const Content$x = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$x;
					content.file = file$x;
					content.url = url$x;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$x)}`;
				});

const __vite_glob_0_12 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$x,
	compiledContent: compiledContent$x,
	default: Content$x,
	file: file$x,
	frontmatter: frontmatter$x,
	getHeadings: getHeadings$x,
	rawContent: rawContent$x,
	url: url$x
}, Symbol.toStringTag, { value: 'Module' }));

const html$w = "<p>When it comes to managing and enhancing software development and operations, companies often adopt sets of practices and processes such as Development Operations (DevOps) or Site Reliability Engineering (SRE). These approaches increase their ability to deliver applications scalably and maintain a fast pace.</p>\n<p>In fact, companies and individuals seeking to deliver applications and services at a higher velocity are increasingly moving away from traditional software development and infrastructure management. They achieve this by either combining selected DevOps and SRE practices or opting for one over the other.</p>\n<p>Despite their shared goal of improving the software delivery process, some nuances set DevOps and SRE apart.</p>\n<p>This article provides an in-depth discussion of the key differences between each approach, what they entail, similarities, and the tools and technologies involved. Finally, it offers roadmaps for your DevOps or SRE journey.</p>\n<h2 id=\"differences-between-devops-and-sre\">Differences between DevOps and SRE</h2>\n<p>The main difference between <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> and SRE lies in their primary <strong>goals</strong>. DevOps aims to improve the software development lifecycle (SDLC), while SRE <strong>focuses</strong> on maintaining stability and resilience after application deployment. In addition, they also differ in <strong>scope</strong>, <strong>metrics</strong>, and <strong>team structure</strong>.</p>\n<p>Let’s look at these points in detail:</p>\n<ol>\n<li>\n<p><strong>Goals:</strong> DevOps’ primary goal is to improve the (SDLC) through process automation, enhance collaboration, and promote continuous improvement. SRE aims to create easily maintained systems by automating repetitive and manual tasks, implementing monitoring and alerting systems, and designing for scale and resilience.</p>\n</li>\n<li>\n<p><strong>Roles and ownership:</strong>  In DevOps, developers, and other related stakeholders are often involved in operational tasks, sharing ownership of the entire software delivery process from development through to production. In contrast, the SRE model promotes a clear separation between development and operations. The development team is focused on building and maintaining features, while the SRE team is responsible for the reliability and availability of services.</p>\n</li>\n<li>\n<p><strong>Scope and mindset:</strong> DevOps is typically applied to self-contained applications or services, encouraging experimentation and innovation with opportunities to learn from failures. In contrast, SRE is applied to entire systems and platforms, primarily focusing on minimizing human errors and downtime.</p>\n</li>\n<li>\n<p><strong>Metrics:</strong> In measuring success, DevOps tracks metrics such as the time from code commit to deployment, deployment frequency, failure rate, and overall system performance. On the other hand, SRE focuses on metrics related to service level objectives like Mean Time to Recover (MTTR), Mean Time Between Failures (MTBF), latency, traffic, and the frequency of errors occurring in the system.</p>\n</li>\n<li>\n<p><strong>Team structure and processes:</strong> DevOps teams work more like an Agile development team, collaborating with members across development and operations. They often break projects into smaller features and use <a href=\"https://roadmap.sh/guides/ci-cd\" target=\"_blank\">continuous integration(CI) and continuous delivery (CD)</a> to prioritize delivery based on business needs.</p>\n<p>In contrast, SRE teams are highly specialized teams as compared to DevOps. They see the production environment as a highly available service and implement measures to address threats and failures that may arise from deployed features and integrations.</p>\n</li>\n</ol>\n<p>Both DevOps and SRE aim to enhance software development and operations. DevOps primarily focuses on software development and delivery, while SRE concentrates on software operations and maintenance after deployment, emphasizing reliability and scalability strongly.</p>\n<h2 id=\"key-components-of-devops\">Key components of DevOps</h2>\n<p>According to <a href=\"https://www.statista.com/statistics/1234098/software-development-process-changes/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Statista</a>, DevOps adoption is expected to grow, with <strong>21% of respondents having integrated it into their source code management</strong>. Recruiters are also actively hiring for DevOps roles, <a href=\"https://www.statista.com/statistics/1296668/top-in-demand-tech-skills-worldwide/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><strong>with demand currently at 35.5%</strong></a><strong>.</strong></p>\n<p>One core principle of DevOps is automating manual processes within the SDLC, focusing on reducing costs and minimizing errors. In addition, DevOps embraces continuous integration, enabling companies to adapt and accommodate changes to end-users’ needs or business expansions.</p>\n<p>The following are key aspects of DevOps:</p>\n<h3 id=\"ci-and-cd\">CI and CD</h3>\n<p>One of the fundamental principles of DevOps is to facilitate faster release cycles for software. This is achieved by continuously integrating code into a repository and automatically deploying it to the required environment.</p>\n<h3 id=\"automation\">Automation</h3>\n<p>Development processes such as testing, deployment, and infrastructural provisioning can be tedious, error-prone, and manual. DevOps addresses these challenges through automation.</p>\n<h3 id=\"monitoring\">Monitoring</h3>\n<p>Monitoring application performance, health, availability, and customer experience are some of the key principles of DevOps. With this capability, companies can identify issues quickly, iterate on solutions, and continuously improve.</p>\n<h3 id=\"collaboration-and-communication\">Collaboration and communication</h3>\n<p>The overall goal of shipping secure and reliable software involves stakeholders like the developments, operations, and other relevant teams to adhere to DevOps practices of collaborating and actively communicating throughout the SDLC.</p>\n<h3 id=\"infrastructure-as-code\">Infrastructure as Code</h3>\n<p>Using scripts or declarative definitions to provision and configure infrastructure is a key component in DevOps. This approach enables teams to be consistent, efficiently manage resources, and reproduce environment-specific bugs.</p>\n<h3 id=\"continuous-learning-and-improvement\">Continuous learning and improvement</h3>\n<p>In DevOps, teams are encouraged to share knowledge across teams, conduct service failure postmortem, and experiment with new ideas and potential solutions.</p>\n<h2 id=\"key-components-of-sre\">Key components of SRE</h2>\n<p>SRE can function as a tool, a set of best practices, or a strategy to automate IT operations tasks such as production system management, change management, and incident response. It empowers system administrators to manage large systems using code rather than manual methods.</p>\n<p>The following are the key aspects of SRE:</p>\n<h3 id=\"automation-1\">Automation</h3>\n<p>One key principle followed by SRE is establishing a workflow to reduce manual and repetitive work related to operational tasks.</p>\n<h3 id=\"monitoring-and-alerting\">Monitoring and alerting</h3>\n<p>A core principle of SRE is using real-time monitored metrics and alerts to detect and respond to issues promptly. With these systems in place, SRE teams can diagnose and resolve potential issues before they impact the system.</p>\n<h3 id=\"forecast-and-planning\">Forecast and planning</h3>\n<p>Due to user traffic and workload, systems can experience increased demand and heavy resource usage. SRE implements measures to ensure that such demand is properly handled by forecasting resources and managing related infrastructure.</p>\n<h3 id=\"incident-management\">Incident management</h3>\n<p>SRE teams define clear processes for detecting, diagnosing, and resolving incidents. When incidents occur, postmortems are conducted to identify root causes and prevent similar issues from recurring.</p>\n<h3 id=\"service-level-objectives-slos\">Service Level Objectives (SLOs)</h3>\n<p>SRE aims to deliver higher availability percentages, uptime, and other metrics such as error rates and response time to system customers or users.</p>\n<h2 id=\"similarities-between-devops-and-sre\">Similarities between DevOps and SRE</h2>\n<p>DevOps and SRE principles have become popular and widely adopted by organizations because they create robust and bug-free systems with continuous improvement in mind. Below are some key similarities between DevOps and SRE:</p>\n<ul>\n<li>Both advocate automating repetitive tasks like testing, deployment, monitoring, etc.</li>\n<li>They promote the use of CI and CD for software releases</li>\n<li>There is a strong emphasis on real-time monitoring and collection of metrics for diagnosis and performance monitoring</li>\n<li>Both focus on collaboration and encourage a culture of continuous learning and improvement</li>\n<li>They prioritize building systems with a great user experience, quick recovery from disruptions, and reliability.</li>\n</ul>\n<h2 id=\"what-is-the-role-of-a-devops-engineer\">What is the role of a DevOps engineer?</h2>\n<p><a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps engineers</a> are integral to any organization looking to bridge the gap between development and operations. They collaborate closely with developers, quality assurance teams, and other stakeholders to achieve this goal.  Here are some key responsibilities of a DevOps engineer:</p>\n<ul>\n<li>Adopts the agile methodology and automation to remove bottlenecks in the SDLC</li>\n<li>Set up monitoring and logging mechanisms to track the performance, availability, and health of systems</li>\n<li>Provision resources, deploy, and manage applications on cloud platforms like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Azure, Google Cloud, etc</li>\n<li>Creates standards and manages configuration to enforce and maintain system integrity across multiple environments</li>\n<li>Creates a plan to optimize system performance and resource utilization</li>\n<li>Promotes knowledge sharing by carefully documenting processes, procedures, and best practices</li>\n</ul>\n<p>To perform these responsibilities, the DevOps team uses many tools to automate and improve their workflow. Here are some of the tools commonly used:</p>\n<ul>\n<li><strong>Docker:</strong> <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> is an open-source platform that enables developers to build, deploy, and run containerized applications.</li>\n<li><strong>Kubernetes:</strong> <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> is an open-source orchestration platform for automating the deployment, scaling, and managing containerized applications</li>\n<li><strong>Jenkins:</strong> Jenkins is an automation server used for performing CI and CD in a software project</li>\n<li><strong>Git:</strong> Git is a distributed version control system for tracking changes in source code during development</li>\n<li><strong>Prometheus:</strong> Prometheus is an open-source application for event monitoring and alerting.</li>\n<li><strong>Grafana:</strong> Grafana is an open-source analytics and visualization application</li>\n<li><strong>Ansible:</strong> Ansible is an open-source engine for automating resource provision, configuration management, application deployment, and other IT-related tasks</li>\n</ul>\n<h2 id=\"what-is-the-role-of-an-sre-engineer\">What is the role of an SRE engineer?</h2>\n<p>Similar to the DevOps team, SRE engineers are also an integral part of any organization looking to build systems and services that are reliable, available, scalable, and performant.  Here are some key responsibilities of an SRE engineer:</p>\n<ul>\n<li>Responsible for maintaining and ensuring system reliability and uptime</li>\n<li>Collaborate with the development team to design and architect applications</li>\n<li>Automate tasks by developing tools and scripts for deployment, alerting, and incident response</li>\n<li>Analyze and plan resources to cater for future growth and scale</li>\n<li>Creates plans to mitigate or eliminate events or system failures</li>\n<li>Promotes knowledge sharing by documenting system configuration, procedures, and best practices</li>\n</ul>\n<p>To perform these responsibilities, the SRE team uses various tools to tackle infrastructure and operational problems. Here are some of the tools commonly used:</p>\n<ul>\n<li><strong>Kibana:</strong> Kibana is an open-source data visualization platform for monitoring metrics and events</li>\n<li><strong>Datadog:</strong> Datadog is a cloud monitoring tool for events, infrastructure hosts, and much more</li>\n<li><strong>NetApp Cloud Insights:</strong> NetApp Cloud Insights is a tool used to monitor IT infrastructure</li>\n<li><strong>Terraform:</strong> Terraform is an infrastructure as code tool used to automate infrastructure tasks</li>\n<li><strong>Ansible:</strong> Ansible is an open-source engine for automating resource provision, configuration management, application deployment, and other IT-related tasks</li>\n<li><strong>New Relic:</strong> New Relic is a cloud-based full-stack observability platform for monitoring and analyzing metrics</li>\n<li><strong>Opsgenie:</strong> Opsgenie is an incident response solution with functionalities like on-call scheduling, reporting, analytics, and alerting</li>\n</ul>\n<p>In summary, DevOps focuses on developing and delivering software, and SRE works on the deployed software to ensure it functions as intended and is reliable. They both have similarities and differences that organizations actively adopt when building and maintaining scalable applications.</p>\n<p>Whether you’re an experienced developer aiming to improve your skills or a beginner exploring a career as a DevOps or SRE engineer, you might have seen tons of resources available online and maybe get overwhelmed without a clear path on the way to go. Well, not anymore, roadmap.sh provides a comprehensive guide on any of the career paths you choose to follow. You will be able to:</p>\n<ul>\n<li>Stay updated with a new roadmap, track your progress, and share it on your roadmap.sh profile</li>\n<li>Learn with like-minded individuals by joining a supportive community when you <a href=\"https://roadmap.sh/signup\" target=\"_blank\">sign up</a> on roadmap.sh platform</li>\n<li><a href=\"https://roadmap.sh/ai\" target=\"_blank\">Generate a new roadmap</a> with AI.</li>\n</ul>";

				const frontmatter$w = {"title":"DevOps vs SRE: Key Differences Explained","description":"DevOps vs SRE: Discover which role suits your career best. Learn key differences, skills required, and career prospects in our detailed guide.","authorId":"william","excludedBySlug":"/devops/devops-vs-sre","seo":{"title":"DevOps vs SRE: Key Differences Explained","description":"DevOps vs SRE: Discover which role suits your career best. Learn key differences, skills required, and career prospects in our detailed guide.","ogImageUrl":"https://assets.roadmap.sh/guest/devops-vs-sre-ofdcy.jpg"},"isNew":true,"type":"textual","date":"2024-06-13T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$w = "/workspaces/developer-roadmap/src/data/guides/devops-vs-sre.md";
				const url$w = undefined;
				function rawContent$w() {
					return "\nWhen it comes to managing and enhancing software development and operations, companies often adopt sets of practices and processes such as Development Operations (DevOps) or Site Reliability Engineering (SRE). These approaches increase their ability to deliver applications scalably and maintain a fast pace.\n\nIn fact, companies and individuals seeking to deliver applications and services at a higher velocity are increasingly moving away from traditional software development and infrastructure management. They achieve this by either combining selected DevOps and SRE practices or opting for one over the other.\n\nDespite their shared goal of improving the software delivery process, some nuances set DevOps and SRE apart.\n\nThis article provides an in-depth discussion of the key differences between each approach, what they entail, similarities, and the tools and technologies involved. Finally, it offers roadmaps for your DevOps or SRE journey.\n\n## Differences between DevOps and SRE\n\nThe main difference between [DevOps](https://roadmap.sh/devops) and SRE lies in their primary **goals**. DevOps aims to improve the software development lifecycle (SDLC), while SRE **focuses** on maintaining stability and resilience after application deployment. In addition, they also differ in **scope**, **metrics**, and **team structure**. \n\nLet’s look at these points in detail:\n\n1. **Goals:** DevOps' primary goal is to improve the (SDLC) through process automation, enhance collaboration, and promote continuous improvement. SRE aims to create easily maintained systems by automating repetitive and manual tasks, implementing monitoring and alerting systems, and designing for scale and resilience.\n\n2. **Roles and ownership:**  In DevOps, developers, and other related stakeholders are often involved in operational tasks, sharing ownership of the entire software delivery process from development through to production. In contrast, the SRE model promotes a clear separation between development and operations. The development team is focused on building and maintaining features, while the SRE team is responsible for the reliability and availability of services.\n\n3. **Scope and mindset:** DevOps is typically applied to self-contained applications or services, encouraging experimentation and innovation with opportunities to learn from failures. In contrast, SRE is applied to entire systems and platforms, primarily focusing on minimizing human errors and downtime.\n\n4. **Metrics:** In measuring success, DevOps tracks metrics such as the time from code commit to deployment, deployment frequency, failure rate, and overall system performance. On the other hand, SRE focuses on metrics related to service level objectives like Mean Time to Recover (MTTR), Mean Time Between Failures (MTBF), latency, traffic, and the frequency of errors occurring in the system.\n\n5. **Team structure and processes:** DevOps teams work more like an Agile development team, collaborating with members across development and operations. They often break projects into smaller features and use [continuous integration(CI) and continuous delivery (CD)](https://roadmap.sh/guides/ci-cd) to prioritize delivery based on business needs.\n\n    In contrast, SRE teams are highly specialized teams as compared to DevOps. They see the production environment as a highly available service and implement measures to address threats and failures that may arise from deployed features and integrations.\n\nBoth DevOps and SRE aim to enhance software development and operations. DevOps primarily focuses on software development and delivery, while SRE concentrates on software operations and maintenance after deployment, emphasizing reliability and scalability strongly.\n\n## Key components of DevOps\n\nAccording to [Statista](https://www.statista.com/statistics/1234098/software-development-process-changes/), DevOps adoption is expected to grow, with **21% of respondents having integrated it into their source code management**. Recruiters are also actively hiring for DevOps roles, [**with demand currently at 35.5%**](https://www.statista.com/statistics/1296668/top-in-demand-tech-skills-worldwide/)**.**\n\nOne core principle of DevOps is automating manual processes within the SDLC, focusing on reducing costs and minimizing errors. In addition, DevOps embraces continuous integration, enabling companies to adapt and accommodate changes to end-users' needs or business expansions.\n\nThe following are key aspects of DevOps:\n\n### CI and CD\n\nOne of the fundamental principles of DevOps is to facilitate faster release cycles for software. This is achieved by continuously integrating code into a repository and automatically deploying it to the required environment.\n\n### Automation\n\nDevelopment processes such as testing, deployment, and infrastructural provisioning can be tedious, error-prone, and manual. DevOps addresses these challenges through automation.\n\n### Monitoring\n\nMonitoring application performance, health, availability, and customer experience are some of the key principles of DevOps. With this capability, companies can identify issues quickly, iterate on solutions, and continuously improve.\n\n### Collaboration and communication\n\nThe overall goal of shipping secure and reliable software involves stakeholders like the developments, operations, and other relevant teams to adhere to DevOps practices of collaborating and actively communicating throughout the SDLC.\n\n### Infrastructure as Code\n\nUsing scripts or declarative definitions to provision and configure infrastructure is a key component in DevOps. This approach enables teams to be consistent, efficiently manage resources, and reproduce environment-specific bugs.\n\n### Continuous learning and improvement\n\nIn DevOps, teams are encouraged to share knowledge across teams, conduct service failure postmortem, and experiment with new ideas and potential solutions.\n\n## Key components of SRE\n\nSRE can function as a tool, a set of best practices, or a strategy to automate IT operations tasks such as production system management, change management, and incident response. It empowers system administrators to manage large systems using code rather than manual methods.\n\nThe following are the key aspects of SRE:\n\n### Automation\n\nOne key principle followed by SRE is establishing a workflow to reduce manual and repetitive work related to operational tasks.\n\n### Monitoring and alerting\n\nA core principle of SRE is using real-time monitored metrics and alerts to detect and respond to issues promptly. With these systems in place, SRE teams can diagnose and resolve potential issues before they impact the system.\n\n### Forecast and planning\n\nDue to user traffic and workload, systems can experience increased demand and heavy resource usage. SRE implements measures to ensure that such demand is properly handled by forecasting resources and managing related infrastructure.\n\n### Incident management\n\nSRE teams define clear processes for detecting, diagnosing, and resolving incidents. When incidents occur, postmortems are conducted to identify root causes and prevent similar issues from recurring.\n\n### Service Level Objectives (SLOs)\n\nSRE aims to deliver higher availability percentages, uptime, and other metrics such as error rates and response time to system customers or users.\n\n## Similarities between DevOps and SRE\n\nDevOps and SRE principles have become popular and widely adopted by organizations because they create robust and bug-free systems with continuous improvement in mind. Below are some key similarities between DevOps and SRE:\n\n- Both advocate automating repetitive tasks like testing, deployment, monitoring, etc.\n- They promote the use of CI and CD for software releases\n- There is a strong emphasis on real-time monitoring and collection of metrics for diagnosis and performance monitoring\n- Both focus on collaboration and encourage a culture of continuous learning and improvement\n- They prioritize building systems with a great user experience, quick recovery from disruptions, and reliability.\n\n## What is the role of a DevOps engineer?\n\n[DevOps engineers](https://roadmap.sh/devops) are integral to any organization looking to bridge the gap between development and operations. They collaborate closely with developers, quality assurance teams, and other stakeholders to achieve this goal.  Here are some key responsibilities of a DevOps engineer:\n\n- Adopts the agile methodology and automation to remove bottlenecks in the SDLC\n- Set up monitoring and logging mechanisms to track the performance, availability, and health of systems\n- Provision resources, deploy, and manage applications on cloud platforms like [AWS](https://roadmap.sh/aws), Azure, Google Cloud, etc\n- Creates standards and manages configuration to enforce and maintain system integrity across multiple environments\n- Creates a plan to optimize system performance and resource utilization\n- Promotes knowledge sharing by carefully documenting processes, procedures, and best practices \n\nTo perform these responsibilities, the DevOps team uses many tools to automate and improve their workflow. Here are some of the tools commonly used:\n\n- **Docker:** [Docker](https://roadmap.sh/docker) is an open-source platform that enables developers to build, deploy, and run containerized applications.\n- **Kubernetes:** [Kubernetes](https://roadmap.sh/kubernetes) is an open-source orchestration platform for automating the deployment, scaling, and managing containerized applications\n- **Jenkins:** Jenkins is an automation server used for performing CI and CD in a software project\n- **Git:** Git is a distributed version control system for tracking changes in source code during development\n- **Prometheus:** Prometheus is an open-source application for event monitoring and alerting.\n- **Grafana:** Grafana is an open-source analytics and visualization application\n- **Ansible:** Ansible is an open-source engine for automating resource provision, configuration management, application deployment, and other IT-related tasks\n\n## What is the role of an SRE engineer?\n\nSimilar to the DevOps team, SRE engineers are also an integral part of any organization looking to build systems and services that are reliable, available, scalable, and performant.  Here are some key responsibilities of an SRE engineer:\n\n- Responsible for maintaining and ensuring system reliability and uptime\n- Collaborate with the development team to design and architect applications\n- Automate tasks by developing tools and scripts for deployment, alerting, and incident response\n- Analyze and plan resources to cater for future growth and scale\n- Creates plans to mitigate or eliminate events or system failures\n- Promotes knowledge sharing by documenting system configuration, procedures, and best practices\n\nTo perform these responsibilities, the SRE team uses various tools to tackle infrastructure and operational problems. Here are some of the tools commonly used:\n\n- **Kibana:** Kibana is an open-source data visualization platform for monitoring metrics and events\n- **Datadog:** Datadog is a cloud monitoring tool for events, infrastructure hosts, and much more\n- **NetApp Cloud Insights:** NetApp Cloud Insights is a tool used to monitor IT infrastructure \n- **Terraform:** Terraform is an infrastructure as code tool used to automate infrastructure tasks\n- **Ansible:** Ansible is an open-source engine for automating resource provision, configuration management, application deployment, and other IT-related tasks\n- **New Relic:** New Relic is a cloud-based full-stack observability platform for monitoring and analyzing metrics\n- **Opsgenie:** Opsgenie is an incident response solution with functionalities like on-call scheduling, reporting, analytics, and alerting\n\nIn summary, DevOps focuses on developing and delivering software, and SRE works on the deployed software to ensure it functions as intended and is reliable. They both have similarities and differences that organizations actively adopt when building and maintaining scalable applications.\n\nWhether you're an experienced developer aiming to improve your skills or a beginner exploring a career as a DevOps or SRE engineer, you might have seen tons of resources available online and maybe get overwhelmed without a clear path on the way to go. Well, not anymore, roadmap.sh provides a comprehensive guide on any of the career paths you choose to follow. You will be able to:\n\n- Stay updated with a new roadmap, track your progress, and share it on your roadmap.sh profile\n- Learn with like-minded individuals by joining a supportive community when you [sign up](https://roadmap.sh/signup) on roadmap.sh platform\n- [Generate a new roadmap](https://roadmap.sh/ai) with AI.\n";
				}
				function compiledContent$w() {
					return html$w;
				}
				function getHeadings$w() {
					return [{"depth":2,"slug":"differences-between-devops-and-sre","text":"Differences between DevOps and SRE"},{"depth":2,"slug":"key-components-of-devops","text":"Key components of DevOps"},{"depth":3,"slug":"ci-and-cd","text":"CI and CD"},{"depth":3,"slug":"automation","text":"Automation"},{"depth":3,"slug":"monitoring","text":"Monitoring"},{"depth":3,"slug":"collaboration-and-communication","text":"Collaboration and communication"},{"depth":3,"slug":"infrastructure-as-code","text":"Infrastructure as Code"},{"depth":3,"slug":"continuous-learning-and-improvement","text":"Continuous learning and improvement"},{"depth":2,"slug":"key-components-of-sre","text":"Key components of SRE"},{"depth":3,"slug":"automation-1","text":"Automation"},{"depth":3,"slug":"monitoring-and-alerting","text":"Monitoring and alerting"},{"depth":3,"slug":"forecast-and-planning","text":"Forecast and planning"},{"depth":3,"slug":"incident-management","text":"Incident management"},{"depth":3,"slug":"service-level-objectives-slos","text":"Service Level Objectives (SLOs)"},{"depth":2,"slug":"similarities-between-devops-and-sre","text":"Similarities between DevOps and SRE"},{"depth":2,"slug":"what-is-the-role-of-a-devops-engineer","text":"What is the role of a DevOps engineer?"},{"depth":2,"slug":"what-is-the-role-of-an-sre-engineer","text":"What is the role of an SRE engineer?"}];
				}

				const Content$w = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$w;
					content.file = file$w;
					content.url = url$w;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$w)}`;
				});

const __vite_glob_0_13 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$w,
	compiledContent: compiledContent$w,
	default: Content$w,
	file: file$w,
	frontmatter: frontmatter$w,
	getHeadings: getHeadings$w,
	rawContent: rawContent$w,
	url: url$w
}, Symbol.toStringTag, { value: 'Module' }));

const html$v = "<p><a href=\"/guides/dhcp.png\"><img src=\"/guides/dhcp.png\" alt=\"DHCP in One Picture\"></a></p>";

				const frontmatter$v = {"title":"DHCP in One Picture","description":"Here is what happens when a new device joins the network.","authorId":"kamran","seo":{"title":"DHCP in One Picture - roadmap.sh","description":"Here is what happens when a new device joins the network."},"isNew":false,"type":"visual","date":"2021-04-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$v = "/workspaces/developer-roadmap/src/data/guides/dhcp-in-one-picture.md";
				const url$v = undefined;
				function rawContent$v() {
					return "\n[![DHCP in One Picture](/guides/dhcp.png)](/guides/dhcp.png)\n";
				}
				function compiledContent$v() {
					return html$v;
				}
				function getHeadings$v() {
					return [];
				}

				const Content$v = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$v;
					content.file = file$v;
					content.url = url$v;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$v)}`;
				});

const __vite_glob_0_14 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$v,
	compiledContent: compiledContent$v,
	default: Content$v,
	file: file$v,
	frontmatter: frontmatter$v,
	getHeadings: getHeadings$v,
	rawContent: rawContent$v,
	url: url$v
}, Symbol.toStringTag, { value: 'Module' }));

const html$u = "<p>DNS or Domain Name System is one of the fundamental blocks of the internet. As a developer, you should have at-least the basic understanding of how it works. This article is a brief introduction to what is DNS and how it works.</p>\n<p>DNS at its simplest is like a phonebook on your mobile phone. Whenever you have to call one of your contacts, you can either dial their number from your memory or use their name which will then be used by your mobile phone to search their number in your phone book to call them. Every time you make a new friend, or your existing friend gets a mobile phone, you have to memorize their phone number or save it in your phonebook to be able to call them later on. DNS or Domain Name System, in a similar fashion, is a mechanism that allows you to browse websites on the internet. Just like your mobile phone does not know how to call without knowing the phone number, your browser does not know how to open a website just by the domain name; it needs to know the IP Address for the website to open. You can either type the IP Address to open, or provide the domain name and press enter which will then be used by your browser to find the IP address by going through several hoops. The picture below is the illustration of how your browser finds a website on the internet.</p>\n<p><a href=\"https://i.imgur.com/z9rwm5A.png\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"https://i.imgur.com/z9rwm5A.png\" alt=\"DNS in One Picture\"></a></p>";

				const frontmatter$u = {"title":"DNS in One Picture","description":"Quick illustrative guide on how a website is found on the internet.","authorId":"kamran","seo":{"title":"DNS in One Picture - roadmap.sh","description":"Quick illustrative guide on how a website is found on the internet."},"isNew":false,"type":"visual","date":"2018-12-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$u = "/workspaces/developer-roadmap/src/data/guides/dns-in-one-picture.md";
				const url$u = undefined;
				function rawContent$u() {
					return "\nDNS or Domain Name System is one of the fundamental blocks of the internet. As a developer, you should have at-least the basic understanding of how it works. This article is a brief introduction to what is DNS and how it works.\n\nDNS at its simplest is like a phonebook on your mobile phone. Whenever you have to call one of your contacts, you can either dial their number from your memory or use their name which will then be used by your mobile phone to search their number in your phone book to call them. Every time you make a new friend, or your existing friend gets a mobile phone, you have to memorize their phone number or save it in your phonebook to be able to call them later on. DNS or Domain Name System, in a similar fashion, is a mechanism that allows you to browse websites on the internet. Just like your mobile phone does not know how to call without knowing the phone number, your browser does not know how to open a website just by the domain name; it needs to know the IP Address for the website to open. You can either type the IP Address to open, or provide the domain name and press enter which will then be used by your browser to find the IP address by going through several hoops. The picture below is the illustration of how your browser finds a website on the internet.\n\n[![DNS in One Picture](https://i.imgur.com/z9rwm5A.png)](https://i.imgur.com/z9rwm5A.png)\n";
				}
				function compiledContent$u() {
					return html$u;
				}
				function getHeadings$u() {
					return [];
				}

				const Content$u = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$u;
					content.file = file$u;
					content.url = url$u;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$u)}`;
				});

const __vite_glob_0_15 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$u,
	compiledContent: compiledContent$u,
	default: Content$u,
	file: file$u,
	frontmatter: frontmatter$u,
	getHeadings: getHeadings$u,
	rawContent: rawContent$u,
	url: url$u
}, Symbol.toStringTag, { value: 'Module' }));

const html$t = "<p>Language Models (LLMs) have revolutionized the field of Natural Language Processing (NLP), enabling machines to understand and generate human-like text. In my last visual guide, we discussed <a href=\"https://roadmap.sh/guides/introduction-to-llms\" target=\"_blank\">what LLMs are and how they work on a high level</a>. This guide is a curation of 5 free resources to help you further learn about LLMs and NLP. I have personally gone through these and would highly recommend these to anyone wanting to learn about LLMs.</p>\n<h2 id=\"nlp-course-by-huggingface\">NLP Course by HuggingFace</h2>\n<p><a href=\"https://huggingface.co/learn/nlp-course/chapter1/1\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">huggingface.co/learn/nlp-course</a></p>\n<p>HuggingFace, a leading NLP platform, offers an in-depth NLP course that delves into transformer models, their workings, and how to effectively utilize HuggingFace’s models. The course starts with the basics of Datasets and Tokenizers, equipping you with essential knowledge before diving into classic NLP tasks. What sets this course apart is its broader perspective, exploring how transformer models can be applied in speech processing and computer vision domains. By the end, you’ll have a strong foundation in using and fine-tuning models from HuggingFace.</p>\n<h2 id=\"prompt-engineering-by-deeplearningai\">Prompt Engineering by DeepLearning.AI</h2>\n<p><a href=\"https://deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ChatGPT Prompt Engineering for Developers</a></p>\n<p>Prompt engineering is a critical aspect of working with LLMs, and deeplearning.ai offers a comprehensive course focused specifically on this topic. With hands-on practice materials, you’ll gain practical knowledge and techniques for effective prompt engineering. By understanding how to craft prompts that yield desired model outputs, you’ll enhance the performance and control of LLMs in various applications. This course is a valuable resource for anyone aiming to master the art of prompt engineering.</p>\n<h2 id=\"llm-university-by-cohere\">LLM University by Cohere</h2>\n<p><a href=\"https://docs.cohere.com/docs/llmu\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">llm.university</a></p>\n<p>Cohere’s LLM University provides a diverse curriculum covering essential NLP techniques. From semantic search and generation to classification and embeddings, this resource offers comprehensive instruction on a wide range of topics. With a combination of theory and practical exercises, LLM University equips learners with the knowledge and skills necessary to leverage LLMs effectively. Whether you’re a beginner or an experienced practitioner, this resource will enhance your understanding and proficiency in various NLP applications.</p>\n<h2 id=\"llmops\">LLMOps</h2>\n<p><a href=\"https://fullstackdeeplearning.com/llm-bootcamp/spring-2023/llmops/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">LLMOps Course</a></p>\n<p>LLMOps, a dedicated resource for operationalizing LLMs, offers insights into testing, evaluation metrics, deployment, monitoring, and more. This resource takes you beyond the development stage, exploring the crucial aspects of LLMOps in real-world scenarios. Learn how to effectively test LLMs, evaluate their performance, and deploy them in production environments. With an emphasis on test-driven development for LLMs, LLMOps equips you with the necessary knowledge to ensure the reliability and effectiveness of your models.</p>\n<h2 id=\"llm-bootcamp\">LLM Bootcamp</h2>\n<p><a href=\"https://fullstackdeeplearning.com/llm-bootcamp/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Full Stack LLM Bootcamp</a></p>\n<p>This is a course by a team of UC Berkeley PhD alumni that teaches best practices and tools for building LLM-powered apps. It covers the full stack from prompt engineering to user-centered design. They have a “<a href=\"https://fullstackdeeplearning.com/course/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Full Stack Deep Learning</a>” course as well if you are interested in learning that.</p>\n<p>With these 5 free resources, you have a wealth of knowledge at your fingertips to master LLMs and advance your NLP skills. We have also been working on AI related content i.e. including roadmaps and best practices on <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap.sh</a> so stay tuned for that as well. Happy learning!</p>";

				const frontmatter$t = {"title":"5 Free Resources to Master LLMs","description":"Dive into the world of LLMs with these free resources","authorId":"kamran","seo":{"title":"5 Free Resources to Master Language Models (LLMs) - roadmap.sh","description":"Looking to dive into the fascinating world of Language Models (LLMs)? Discover the top 5 free resources that will help you learn and excel in understanding LLMs. From comprehensive tutorials to interactive courses, this blog post provides you with the ultimate guide to sharpen your skills and unravel the potential of language models. Start your journey today and become a pro in LLMs without spending a dime!"},"isNew":false,"type":"textual","date":"2023-05-19T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","guide-sitemap"]};
				const file$t = "/workspaces/developer-roadmap/src/data/guides/free-resources-to-learn-llms.md";
				const url$t = undefined;
				function rawContent$t() {
					return "\nLanguage Models (LLMs) have revolutionized the field of Natural Language Processing (NLP), enabling machines to understand and generate human-like text. In my last visual guide, we discussed [what LLMs are and how they work on a high level](https://roadmap.sh/guides/introduction-to-llms). This guide is a curation of 5 free resources to help you further learn about LLMs and NLP. I have personally gone through these and would highly recommend these to anyone wanting to learn about LLMs.\n\n## NLP Course by HuggingFace\n\n[huggingface.co/learn/nlp-course](https://huggingface.co/learn/nlp-course/chapter1/1)\n\nHuggingFace, a leading NLP platform, offers an in-depth NLP course that delves into transformer models, their workings, and how to effectively utilize HuggingFace's models. The course starts with the basics of Datasets and Tokenizers, equipping you with essential knowledge before diving into classic NLP tasks. What sets this course apart is its broader perspective, exploring how transformer models can be applied in speech processing and computer vision domains. By the end, you'll have a strong foundation in using and fine-tuning models from HuggingFace.\n\n## Prompt Engineering by DeepLearning.AI\n\n[ChatGPT Prompt Engineering for Developers](https://deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/)\n\nPrompt engineering is a critical aspect of working with LLMs, and deeplearning.ai offers a comprehensive course focused specifically on this topic. With hands-on practice materials, you'll gain practical knowledge and techniques for effective prompt engineering. By understanding how to craft prompts that yield desired model outputs, you'll enhance the performance and control of LLMs in various applications. This course is a valuable resource for anyone aiming to master the art of prompt engineering.\n\n## LLM University by Cohere\n\n[llm.university](https://docs.cohere.com/docs/llmu)\n\nCohere's LLM University provides a diverse curriculum covering essential NLP techniques. From semantic search and generation to classification and embeddings, this resource offers comprehensive instruction on a wide range of topics. With a combination of theory and practical exercises, LLM University equips learners with the knowledge and skills necessary to leverage LLMs effectively. Whether you're a beginner or an experienced practitioner, this resource will enhance your understanding and proficiency in various NLP applications.\n\n## LLMOps\n\n[LLMOps Course](https://fullstackdeeplearning.com/llm-bootcamp/spring-2023/llmops/)\n\nLLMOps, a dedicated resource for operationalizing LLMs, offers insights into testing, evaluation metrics, deployment, monitoring, and more. This resource takes you beyond the development stage, exploring the crucial aspects of LLMOps in real-world scenarios. Learn how to effectively test LLMs, evaluate their performance, and deploy them in production environments. With an emphasis on test-driven development for LLMs, LLMOps equips you with the necessary knowledge to ensure the reliability and effectiveness of your models.\n\n## LLM Bootcamp\n\n[Full Stack LLM Bootcamp](https://fullstackdeeplearning.com/llm-bootcamp/)\n\nThis is a course by a team of UC Berkeley PhD alumni that teaches best practices and tools for building LLM-powered apps. It covers the full stack from prompt engineering to user-centered design. They have a \"[Full Stack Deep Learning](https://fullstackdeeplearning.com/course/)\" course as well if you are interested in learning that.\n\nWith these 5 free resources, you have a wealth of knowledge at your fingertips to master LLMs and advance your NLP skills. We have also been working on AI related content i.e. including roadmaps and best practices on [roadmap.sh](https://roadmap.sh) so stay tuned for that as well. Happy learning!\n";
				}
				function compiledContent$t() {
					return html$t;
				}
				function getHeadings$t() {
					return [{"depth":2,"slug":"nlp-course-by-huggingface","text":"NLP Course by HuggingFace"},{"depth":2,"slug":"prompt-engineering-by-deeplearningai","text":"Prompt Engineering by DeepLearning.AI"},{"depth":2,"slug":"llm-university-by-cohere","text":"LLM University by Cohere"},{"depth":2,"slug":"llmops","text":"LLMOps"},{"depth":2,"slug":"llm-bootcamp","text":"LLM Bootcamp"}];
				}

				const Content$t = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$t;
					content.file = file$t;
					content.url = url$t;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$t)}`;
				});

const __vite_glob_0_16 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$t,
	compiledContent: compiledContent$t,
	default: Content$t,
	file: file$t,
	frontmatter: frontmatter$t,
	getHeadings: getHeadings$t,
	rawContent: rawContent$t,
	url: url$t
}, Symbol.toStringTag, { value: 'Module' }));

const html$s = "<p>Just starting out in web or mobile development? You may feel swamped by all the programming languages, libraries, and frameworks. With new options popping up daily, it’s easy to get overwhelmed. This guide will help you navigate that initial confusion.</p>\n<p>As someone who’s been through this process for over a decade, I’ve made this post to make your learning journey smoother.</p>\n<p>I’ll focus on the essential front-end languages, libraries, and frameworks, equipping you with the knowledge you need to make informed decisions, a roadmap to help you focus on the right skills, and build a rewarding career in front-end development.</p>\n<h2 id=\"top-front-end-programming-languages-to-learn-in-2024\">Top front-end programming languages to learn in 2024</h2>\n<p>Here are the front-end programming languages you should learn in 2024.</p>\n<p>For web front-end development:</p>\n<ul>\n<li>HyperText Markup Language (HTML)</li>\n<li>Cascading Style Sheet (CSS)</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n</ul>\n<p>For mobile front-end development:</p>\n<ul>\n<li>Dart</li>\n<li>Swift</li>\n<li>Kotlin</li>\n</ul>\n<h2 id=\"front-end-programming-languages-for-web-development\">Front-end programming languages for web development</h2>\n<p>Web development involves building websites, web applications, and web services that users interact with through web browsers. Front-end development focuses on the user interface (UI) and user experience (UX) aspects of web applications, ensuring that the content is visually appealing, interactive, and responsive.</p>\n<h3 id=\"hypertext-markup-language-html\">HyperText Markup Language (HTML)</h3>\n<p>HTML serves as the backbone for building all web pages. It defines the structure and layout of content within a web browser, allowing for the display of text, images, videos, and more that users interact with. HTML is beginner-friendly, supported across multiple browsers, and fundamental to web development.</p>\n<p>HTML depends on languages like CSS and JavaScript to achieve full functionality, and it is mostly limited to web-based projects.</p>\n<h3 id=\"cascading-style-sheet-css\">Cascading Style Sheet (CSS)</h3>\n<p>CSS plays a crucial role in determining the appearance and organization of web content. When used in conjunction with HTML, it enhances the appearance and layout of web pages, enabling the creation of responsive designs that adapt to various screen sizes. CSS handles colors, fonts, spacing, and more, allowing developers to create visually appealing user interfaces.</p>\n<p>CSS has powerful styling options, is easy to start with, and has a great ecosystem of libraries and frameworks like Tailwind CSS, Bootstrap, Foundation, etc., to build aesthetically pleasing user interfaces.</p>\n<p>CSS can present inconsistent designs, as browsers may interpret it differently. Additionally, managing CSS in a large project can be difficult, as there are no strict rules for writing it.</p>\n<h3 id=\"javascript\">JavaScript</h3>\n<p><a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> is a versatile programming language used in conjunction with HTML and CSS to enhance the interaction of web pages. With features like excellent speed and cross-browser compatibility, JavaScript enables developers to add dynamic elements such as content updates, animations, 2D/3D graphics, and other interactive features to web applications.</p>\n<p>JavaScript is essential for web development and has a vast ecosystem of libraries and frameworks for building applications across multiple platforms.</p>\n<p>JavaScript implementation varies across different browsers, creating vulnerabilities for users. They may face threats such as unauthorized data access and system manipulation by injecting malicious code. Additionally, if JavaScript is disabled in a browser, certain features and functionality might not work, adversely affecting the user experience.</p>\n<h3 id=\"typescript\">TypeScript</h3>\n<p><a href=\"https://roadmap.sh/typescript\" target=\"_blank\">TypeScript</a> is a robust and widely used programming language developed by Microsoft, which extends JavaScript by adding static typing and other advanced features. TypeScript code transpiles to JavaScript and can run seamlessly wherever JavaScript runs, making it a highly versatile programming language for front-end development.</p>\n<p>TypeScript enhances your developer experience by identifying errors during development and providing fixes, speeding up the development process.</p>\n<p>TypeScript has a steeper learning curve than JavaScript, and it reduces development speed because an additional compilation step is required.</p>\n<h2 id=\"front-end-programming-languages-for-mobile-development\">Front-end programming languages for mobile development</h2>\n<p>Mobile development involves building applications for mobile devices such as smartphones and tablets. Front-end development for mobile applications focuses on creating user interfaces that are optimized for mobile platforms, ensuring a seamless user experience.</p>\n<h3 id=\"dart\">Dart</h3>\n<p>Dart is a powerful, multi-purpose programming language designed for building high-quality applications on various platforms. It offers features such as sound null safety, object-oriented programming (OOP), pattern matching, and more, enabling developers to build and model robust software.</p>\n<p>Dart is the primary language for <a href=\"https://roadmap.sh/flutter\" target=\"_blank\">Flutter</a>, enabling compilation to native code and providing portability and speed for building applications across web and mobile platforms using a single codebase.</p>\n<p>Dart is strongly integrated with the Flutter framework, which may limit its support and resources outside of the framework. moreover, Dart has limited adoption compared to other programming languages, restricting its usage in other domains.</p>\n<h3 id=\"swift\">Swift</h3>\n<p>Swift is a high-level, multi-paradigm, compiled programming language developed for all Apple platforms. It was released in 2014 to replace Apple’s earlier programming language, Objective-C. Swift is known for its speed, modernity, and safety, making it ideal for building iOS (mobile) applications, macOS (desktop), and other Apple platforms.</p>\n<p>Swift is fast, secure, and has a smaller memory footprint due to its standard libraries being integrated by default.</p>\n<p>Swift is primarily designed to support the Apple platform and has limited support for cross-platform development.</p>\n<h3 id=\"kotlin\">Kotlin</h3>\n<p>Kotlin is a cross-platform, statically typed, general-purpose programming language renowned for building robust and scalable applications. It serves as Google’s preferred language for Android app development. Initially released in July 2011, Kotlin has rapidly expanded its adoption beyond mobile app development. It is now employed for server-side, full stack, and data science applications.</p>\n<p>Kotlin is based on Java but with enhanced capabilities, reliability, and ease of maintenance. It is the go-to language for developing modern Android applications and is backed by major organizations.</p>\n<p>However, it’s worth noting that compared to Java, job opportunities and adoption of Kotlin across software development are limited.</p>\n<h2 id=\"top-front-end-frameworks-and-libraries-to-learn-in-2024\">Top front-end frameworks and libraries to learn in 2024</h2>\n<p>While programming languages are essential for creating robust applications that meet business needs, they can become burdensome when developing medium to large applications. Issues like lack of code reusability, maintainability challenges, time-consuming development, and repetition may arise.</p>\n<p>Frameworks and libraries offer a solution by providing a structured approach to application development. They offer pre-written code, reusable functions, coding standards, and architectural patterns that developers can leverage for common tasks, thus saving time and effort. Additionally, frameworks often have built-in security, scalability, and performance optimization features, enhancing overall software quality.</p>\n<p>You should explore these frontend frameworks and libraries in 2024:</p>\n<ul>\n<li>React</li>\n<li>Vue</li>\n<li>Angular</li>\n<li>Svelte</li>\n<li>Solid.js</li>\n<li>Next.js</li>\n<li>Remix</li>\n<li>Nuxt</li>\n<li>Astro</li>\n</ul>\n<h3 id=\"react\">React</h3>\n<p><a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a> is a widely adopted JavaScript library developed by Meta and a vibrant community of individual contributors. It empowers developers to construct interfaces by assembling individual pieces known as components. React provides a reusable modular architecture through reusable components and a sophisticated rendering engine, facilitating the creation and management of small- to large applications.</p>\n<p>Over the years, React has undergone technological advancements and has become the foundation for various frameworks such as Next.js, Gatsby, and Remix. These frameworks build upon React’s core capabilities, offering additional features and functionalities to streamline the development of web applications.</p>\n<h3 id=\"vue\">Vue</h3>\n<p><a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a> is a JavaScript framework designed for developing user interfaces, leveraging the model-view-view model (MVVM) architecture to separate the user interface from the application’s business logic. Vue extends HTML elements to facilitate the creation of reusable code components. It provides several built-in features, including templating, reactivity, and transitions. Additionally, Vue offers support for various libraries, making it suitable for developing applications like Single-Page Applications (SPAs), desktop and mobile applications of various scales, from small projects to large enterprise applications.</p>\n<p>Vue has also become the foundation of frameworks like Nuxt.js, VuePress, and Vuetify, offering pre-built components, server-side rendering, themes, and much more for building complex websites and applications.</p>\n<h3 id=\"angular\">Angular</h3>\n<p><a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a> is an open-source front-end framework developed by the Angular team at Google, along with contributions from individual developers. Built on TypeScript, Angular provides a well-structured framework with features like two-way data binding, reactive programming, dependency injection, and modular architecture. These features are particularly beneficial and make Angular trusted for building enterprise-grade applications.</p>\n<p>Notably, many other frameworks and open-source libraries have drawn inspiration from Angular’s paradigm and architectural patterns, attesting to its influence and popularity within the web development community.</p>\n<h3 id=\"svelte\">Svelte</h3>\n<p>Svelte is an open-source component-based front-end framework for building web applications. It follows the paradigm of existing web frameworks but takes a unique approach with less code, no virtual Document Object Model (DOM), and reactivity. Svelte also powers frameworks like SvelteKit, a library for building production-ready applications.</p>\n<h3 id=\"solidjs\">Solid.js</h3>\n<p>Solid.js is a declarative JavaScript framework for building UI with maximum control over reactivity; it does not re-render to get updates. It shares similarities with React but doesn’t use the virtual DOM. Instead, it uses a compiler that converts its code to vanilla JavaScript. Solid.js supports all modern library features like fragments, portals, context, suspense, lazy components, etc., for a better developer experience.</p>\n<h3 id=\"nextjs\">Next.js</h3>\n<p>Next.js is an open-source web development framework built on React’s latest features. It has built-in features like dynamic HTML streaming, client and server rendering, server actions, data fetching, middleware, and more. It allows you to build a full-stack web application within a single project.</p>\n<h3 id=\"remix\">Remix</h3>\n<p>Like Next.js, Remix is a full-stack web development framework built on React’s latest features. It utilizes classic and standard web fundamentals for crafting HTML forms and allows you to build your front-end and back-end in an innovative way.</p>\n<h3 id=\"nuxt\">Nuxt</h3>\n<p>Nuxt is an open-source framework for building full-stack web applications powered by Vue. It comes with features like file-based routing, data fetching, server routes, TypeScript support, middleware, and more, making it ideal for building scalable applications.</p>\n<h3 id=\"astro\">Astro</h3>\n<p>Astro is an open-source web framework for building content-heavy websites like e-commerce platforms, blogs, and marketing websites. Compared to other frameworks, it reduces JavaScript overhead, loads faster, and has excellent SEO support. Additionally, it features Island, a component-based architecture optimized for content-driven websites. It is UI-agnostic, supporting other UI libraries such as Vue, Svelte, React, web components, etc.</p>\n<h3 id=\"other-innovative-front-end-languages-and-frameworks\">Other innovative front-end languages and frameworks</h3>\n<p>Web and mobile platforms become increasingly powerful as more use cases are unlocked. This trend has led to increased technology actively creating bridges to integrate front-end usage in libraries and frameworks, enhancing user experience. Below are some languages and frameworks bridging the gap to make front-end development even more accessible:</p>\n<h3 id=\"htmx\">HTMX</h3>\n<p>HTMX is a dependency-free UI library for the web, which can replace traditional front-end libraries with the simplicity of HTML. It introduces new attributes to HTML to handle complex requirements of modern UIs, such as AJAX, CSS Transitions, WebSockets, and Server-Sent Events.</p>\n<h3 id=\"react-native\">React Native</h3>\n<p><a href=\"https://roadmap.sh/react-native\" target=\"_blank\">React Native</a> enables the development of cross-platform mobile applications, such as Android and iOS, using React.js. It compiles to native mobile code, which allows you to “write once and ship everywhere.” Thanks to the complimentary React.js community, React Native also features a rich tooling and plugin ecosystem.</p>\n<h3 id=\"webassembly-and-front-end-development\">WebAssembly and front-end development</h3>\n<p>WebAssembly (or Wasm) is a binary instruction format serving as a compilation target for programming languages, enabling them to run efficiently in web browsers. It empowers developers to write high-performance code in languages like C, <a href=\"https://roadmap.sh/cpp\" target=\"_blank\">C++</a>, and <a href=\"https://roadmap.sh/rust\" target=\"_blank\">Rust</a>, which can then be seamlessly integrated into web applications, enhancing web front-end development capabilities.</p>\n<p>Beyond the web, WebAssembly has also gained adoption in various domains, such as game distribution, server-side applications, hybrid native apps on mobile devices, and symmetric computations.</p>\n<p>Companies like Figma, AutoCAD, and cloud-native companies actively leverage WebAssembly to meet their performance needs and contribute to the WebAssembly ecosystem by building libraries, tools, and packages that enhance its capabilities.</p>\n<h2 id=\"how-do-you-select-the-right-front-end-programming-language\">How do you select the right front-end programming language?</h2>\n<p>Choosing the right front-end programming language to learn is an important decision. It shouldn’t be taken lightly, as it significantly impacts your career trajectory and success. This section examines some points to help you select a front-end programming language to learn in 2024.</p>\n<p>The points are:</p>\n<ul>\n<li>Project requirement</li>\n<li>Targeted platform</li>\n<li>Career trajectory and opportunity</li>\n<li>Ecosystem and community support</li>\n</ul>\n<h3 id=\"project-requirement\">Project requirement</h3>\n<p>A specific project’s scope, goals, and features play an essential role in selecting the right language to learn, and answering these questions is vital:</p>\n<ul>\n<li>What kind of application are you building?</li>\n<li>How complex is the data flow and logic?</li>\n<li>Is customization and scalability important?</li>\n</ul>\n<p>The answers will help narrow your options and focus on languages that suit the project’s needs. For example, if you are building a dynamic application for data collection, JavaScript or PHP alongside HTML and CSS are excellent choices.</p>\n<h3 id=\"targeted-platform\">Targeted platform</h3>\n<p>The web, mobile, TV, and other screen-enabled electronic devices present users with interfaces they touch, see and interact with. Having a good understanding of the supported languages on such platforms is important. For example, building an application for the Apple platform involves using languages like Swift, Dart (via <a href=\"https://roadmap.sh/flutter\" target=\"_blank\">Flutter</a>), and JavaScript (via <a href=\"https://roadmap.sh/react-native\" target=\"_blank\">React Native</a>).</p>\n<h3 id=\"career-trajectory-and-opportunity\">Career trajectory and opportunity</h3>\n<p>It is important to carefully evaluate the stage of your career before making a choice. For example, if you are a beginner in technology, web development languages like HTML, CSS, and JavaScript might be a good entry point because of their gradual learning curve. On the other hand, an experienced developer seeking to expand their knowledge within the web ecosystem might opt for TypeScript, as it is widely adopted for mission-critical applications.</p>\n<p>In addition, if you plan to learn a new language to secure a job, it’s essential to carefully research the location, available job opportunities, and the technologies most companies are adopting, including the programming languages powering them.</p>\n<h3 id=\"ecosystem-and-community-support\">Ecosystem and community support</h3>\n<p>Before selecting a language, assess the size and activity level of the community in terms of available resources. Then, look at the updates, fixes, patches, and innovations surrounding libraries and frameworks in the language. For example, the JavaScript ecosystem constantly releases updates to libraries and frameworks.</p>\n<p>In summary, essential languages to learn in 2024 include HTML for structure, CSS for styling, and JavaScript for interactivity. TypeScript, Dart, Swift, and Kotlin are also significant.</p>\n<p>Furthermore, users’ evolving needs will continue to directly impact the approach to front-end development. This evolution will spur the rise of new technologies, libraries, and frameworks and prompt existing technologies to update their solutions. Business requirements will also play a significant role in determining the choice of technologies during front-end development.</p>\n<p>Staying informed about these changes is critical, as is knowing the appropriate path to follow when learning or adopting new technology. The <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">front-end r</a><a href=\"https://roadmap.sh/frontend\" target=\"_blank\">oadmap</a> is a reliable source of truth for developers seeking to stay updated and informed about the changes that may arise in front-end development.</p>\n<p>Beyond having access to a reliable roadmap, an essential aspect of learning is monitoring your progress, demonstrating your skills to potential employers, and joining a supportive community. <a href=\"https://roadmap.sh/signup\" target=\"_blank\">Sign up to get started</a> on the frontend roadmap while tracking your progress.</p>";

				const frontmatter$s = {"title":"What Front End Programming Languages Should You Learn?","description":"Get ahead in web development. Discover the essential frontend languages every pro developer uses!","authorId":"william","excludedBySlug":"/frontend/languages","seo":{"title":"What Front End Programming Languages Should You Learn?","description":"Get ahead in web development. Discover the essential frontend languages every pro developer uses!","ogImageUrl":"https://assets.roadmap.sh/guest/best-front-end-languages-exm6g.jpg"},"isNew":false,"type":"textual","date":"2024-05-02T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$s = "/workspaces/developer-roadmap/src/data/guides/frontend-languages.md";
				const url$s = undefined;
				function rawContent$s() {
					return "\nJust starting out in web or mobile development? You may feel swamped by all the programming languages, libraries, and frameworks. With new options popping up daily, it's easy to get overwhelmed. This guide will help you navigate that initial confusion.\n\nAs someone who's been through this process for over a decade, I’ve made this post to make your learning journey smoother.\n\nI'll focus on the essential front-end languages, libraries, and frameworks, equipping you with the knowledge you need to make informed decisions, a roadmap to help you focus on the right skills, and build a rewarding career in front-end development.\n\n\n## Top front-end programming languages to learn in 2024\n\nHere are the front-end programming languages you should learn in 2024.\n\nFor web front-end development:\n\n- HyperText Markup Language (HTML)\n- Cascading Style Sheet (CSS)\n- JavaScript\n- TypeScript\n\nFor mobile front-end development:\n\n- Dart\n- Swift\n- Kotlin\n\n## Front-end programming languages for web development\n\nWeb development involves building websites, web applications, and web services that users interact with through web browsers. Front-end development focuses on the user interface (UI) and user experience (UX) aspects of web applications, ensuring that the content is visually appealing, interactive, and responsive.\n\n### HyperText Markup Language (HTML)\nHTML serves as the backbone for building all web pages. It defines the structure and layout of content within a web browser, allowing for the display of text, images, videos, and more that users interact with. HTML is beginner-friendly, supported across multiple browsers, and fundamental to web development.\n\nHTML depends on languages like CSS and JavaScript to achieve full functionality, and it is mostly limited to web-based projects.\n\n### Cascading Style Sheet (CSS)\n\nCSS plays a crucial role in determining the appearance and organization of web content. When used in conjunction with HTML, it enhances the appearance and layout of web pages, enabling the creation of responsive designs that adapt to various screen sizes. CSS handles colors, fonts, spacing, and more, allowing developers to create visually appealing user interfaces.\n\nCSS has powerful styling options, is easy to start with, and has a great ecosystem of libraries and frameworks like Tailwind CSS, Bootstrap, Foundation, etc., to build aesthetically pleasing user interfaces.\n\nCSS can present inconsistent designs, as browsers may interpret it differently. Additionally, managing CSS in a large project can be difficult, as there are no strict rules for writing it.\n\n### JavaScript\n\n[JavaScript](https://roadmap.sh/javascript) is a versatile programming language used in conjunction with HTML and CSS to enhance the interaction of web pages. With features like excellent speed and cross-browser compatibility, JavaScript enables developers to add dynamic elements such as content updates, animations, 2D/3D graphics, and other interactive features to web applications.\n\nJavaScript is essential for web development and has a vast ecosystem of libraries and frameworks for building applications across multiple platforms.\n\nJavaScript implementation varies across different browsers, creating vulnerabilities for users. They may face threats such as unauthorized data access and system manipulation by injecting malicious code. Additionally, if JavaScript is disabled in a browser, certain features and functionality might not work, adversely affecting the user experience.\n\n### TypeScript\n\n[TypeScript](https://roadmap.sh/typescript) is a robust and widely used programming language developed by Microsoft, which extends JavaScript by adding static typing and other advanced features. TypeScript code transpiles to JavaScript and can run seamlessly wherever JavaScript runs, making it a highly versatile programming language for front-end development.\n\nTypeScript enhances your developer experience by identifying errors during development and providing fixes, speeding up the development process.\n\nTypeScript has a steeper learning curve than JavaScript, and it reduces development speed because an additional compilation step is required.\n\n## Front-end programming languages for mobile development\n\nMobile development involves building applications for mobile devices such as smartphones and tablets. Front-end development for mobile applications focuses on creating user interfaces that are optimized for mobile platforms, ensuring a seamless user experience.\n\n### Dart\n\nDart is a powerful, multi-purpose programming language designed for building high-quality applications on various platforms. It offers features such as sound null safety, object-oriented programming (OOP), pattern matching, and more, enabling developers to build and model robust software.\n\nDart is the primary language for [Flutter](https://roadmap.sh/flutter), enabling compilation to native code and providing portability and speed for building applications across web and mobile platforms using a single codebase.\n\nDart is strongly integrated with the Flutter framework, which may limit its support and resources outside of the framework. moreover, Dart has limited adoption compared to other programming languages, restricting its usage in other domains.\n\n### Swift\n\nSwift is a high-level, multi-paradigm, compiled programming language developed for all Apple platforms. It was released in 2014 to replace Apple’s earlier programming language, Objective-C. Swift is known for its speed, modernity, and safety, making it ideal for building iOS (mobile) applications, macOS (desktop), and other Apple platforms.\n\nSwift is fast, secure, and has a smaller memory footprint due to its standard libraries being integrated by default.\n\nSwift is primarily designed to support the Apple platform and has limited support for cross-platform development.\n\n### Kotlin\n\nKotlin is a cross-platform, statically typed, general-purpose programming language renowned for building robust and scalable applications. It serves as Google’s preferred language for Android app development. Initially released in July 2011, Kotlin has rapidly expanded its adoption beyond mobile app development. It is now employed for server-side, full stack, and data science applications.\n\nKotlin is based on Java but with enhanced capabilities, reliability, and ease of maintenance. It is the go-to language for developing modern Android applications and is backed by major organizations.\n\nHowever, it’s worth noting that compared to Java, job opportunities and adoption of Kotlin across software development are limited.\n\n## Top front-end frameworks and libraries to learn in 2024\n\nWhile programming languages are essential for creating robust applications that meet business needs, they can become burdensome when developing medium to large applications. Issues like lack of code reusability, maintainability challenges, time-consuming development, and repetition may arise.\n\nFrameworks and libraries offer a solution by providing a structured approach to application development. They offer pre-written code, reusable functions, coding standards, and architectural patterns that developers can leverage for common tasks, thus saving time and effort. Additionally, frameworks often have built-in security, scalability, and performance optimization features, enhancing overall software quality.\n\nYou should explore these frontend frameworks and libraries in 2024:\n\n- React\n- Vue\n- Angular\n- Svelte\n- Solid.js\n- Next.js\n- Remix\n- Nuxt\n- Astro\n\n### React\n\n[React](https://roadmap.sh/react) is a widely adopted JavaScript library developed by Meta and a vibrant community of individual contributors. It empowers developers to construct interfaces by assembling individual pieces known as components. React provides a reusable modular architecture through reusable components and a sophisticated rendering engine, facilitating the creation and management of small- to large applications.\n\nOver the years, React has undergone technological advancements and has become the foundation for various frameworks such as Next.js, Gatsby, and Remix. These frameworks build upon React's core capabilities, offering additional features and functionalities to streamline the development of web applications.\n\n### Vue\n\n[Vue](https://roadmap.sh/vue) is a JavaScript framework designed for developing user interfaces, leveraging the model-view-view model (MVVM) architecture to separate the user interface from the application's business logic. Vue extends HTML elements to facilitate the creation of reusable code components. It provides several built-in features, including templating, reactivity, and transitions. Additionally, Vue offers support for various libraries, making it suitable for developing applications like Single-Page Applications (SPAs), desktop and mobile applications of various scales, from small projects to large enterprise applications.\n\nVue has also become the foundation of frameworks like Nuxt.js, VuePress, and Vuetify, offering pre-built components, server-side rendering, themes, and much more for building complex websites and applications.\n\n### Angular\n\n[Angular](https://roadmap.sh/angular) is an open-source front-end framework developed by the Angular team at Google, along with contributions from individual developers. Built on TypeScript, Angular provides a well-structured framework with features like two-way data binding, reactive programming, dependency injection, and modular architecture. These features are particularly beneficial and make Angular trusted for building enterprise-grade applications.\n\nNotably, many other frameworks and open-source libraries have drawn inspiration from Angular's paradigm and architectural patterns, attesting to its influence and popularity within the web development community.\n\n### Svelte\n\nSvelte is an open-source component-based front-end framework for building web applications. It follows the paradigm of existing web frameworks but takes a unique approach with less code, no virtual Document Object Model (DOM), and reactivity. Svelte also powers frameworks like SvelteKit, a library for building production-ready applications.\n\n### Solid.js\n\nSolid.js is a declarative JavaScript framework for building UI with maximum control over reactivity; it does not re-render to get updates. It shares similarities with React but doesn't use the virtual DOM. Instead, it uses a compiler that converts its code to vanilla JavaScript. Solid.js supports all modern library features like fragments, portals, context, suspense, lazy components, etc., for a better developer experience.\n\n### Next.js\n\nNext.js is an open-source web development framework built on React's latest features. It has built-in features like dynamic HTML streaming, client and server rendering, server actions, data fetching, middleware, and more. It allows you to build a full-stack web application within a single project.\n\n### Remix\n\nLike Next.js, Remix is a full-stack web development framework built on React’s latest features. It utilizes classic and standard web fundamentals for crafting HTML forms and allows you to build your front-end and back-end in an innovative way.\n\n### Nuxt\n\nNuxt is an open-source framework for building full-stack web applications powered by Vue. It comes with features like file-based routing, data fetching, server routes, TypeScript support, middleware, and more, making it ideal for building scalable applications.\n\n### Astro\n\nAstro is an open-source web framework for building content-heavy websites like e-commerce platforms, blogs, and marketing websites. Compared to other frameworks, it reduces JavaScript overhead, loads faster, and has excellent SEO support. Additionally, it features Island, a component-based architecture optimized for content-driven websites. It is UI-agnostic, supporting other UI libraries such as Vue, Svelte, React, web components, etc.\n\n### Other innovative front-end languages and frameworks\n\nWeb and mobile platforms become increasingly powerful as more use cases are unlocked. This trend has led to increased technology actively creating bridges to integrate front-end usage in libraries and frameworks, enhancing user experience. Below are some languages and frameworks bridging the gap to make front-end development even more accessible:\n\n### HTMX\n\nHTMX is a dependency-free UI library for the web, which can replace traditional front-end libraries with the simplicity of HTML. It introduces new attributes to HTML to handle complex requirements of modern UIs, such as AJAX, CSS Transitions, WebSockets, and Server-Sent Events.\n\n### React Native\n\n[React Native](https://roadmap.sh/react-native) enables the development of cross-platform mobile applications, such as Android and iOS, using React.js. It compiles to native mobile code, which allows you to “write once and ship everywhere.” Thanks to the complimentary React.js community, React Native also features a rich tooling and plugin ecosystem.\n\n### WebAssembly and front-end development\n\nWebAssembly (or Wasm) is a binary instruction format serving as a compilation target for programming languages, enabling them to run efficiently in web browsers. It empowers developers to write high-performance code in languages like C, [C++](https://roadmap.sh/cpp), and [Rust](https://roadmap.sh/rust), which can then be seamlessly integrated into web applications, enhancing web front-end development capabilities.\n\nBeyond the web, WebAssembly has also gained adoption in various domains, such as game distribution, server-side applications, hybrid native apps on mobile devices, and symmetric computations.\n\nCompanies like Figma, AutoCAD, and cloud-native companies actively leverage WebAssembly to meet their performance needs and contribute to the WebAssembly ecosystem by building libraries, tools, and packages that enhance its capabilities.\n\n\n## How do you select the right front-end programming language?\n\nChoosing the right front-end programming language to learn is an important decision. It shouldn’t be taken lightly, as it significantly impacts your career trajectory and success. This section examines some points to help you select a front-end programming language to learn in 2024.\n\nThe points are:\n\n- Project requirement\n- Targeted platform\n- Career trajectory and opportunity\n- Ecosystem and community support\n\n### Project requirement\n\nA specific project's scope, goals, and features play an essential role in selecting the right language to learn, and answering these questions is vital:\n\n- What kind of application are you building?\n- How complex is the data flow and logic?\n- Is customization and scalability important?\n\nThe answers will help narrow your options and focus on languages that suit the project's needs. For example, if you are building a dynamic application for data collection, JavaScript or PHP alongside HTML and CSS are excellent choices.\n\n### Targeted platform\n\nThe web, mobile, TV, and other screen-enabled electronic devices present users with interfaces they touch, see and interact with. Having a good understanding of the supported languages on such platforms is important. For example, building an application for the Apple platform involves using languages like Swift, Dart (via [Flutter](https://roadmap.sh/flutter)), and JavaScript (via [React Native](https://roadmap.sh/react-native)).\n\n### Career trajectory and opportunity\n\nIt is important to carefully evaluate the stage of your career before making a choice. For example, if you are a beginner in technology, web development languages like HTML, CSS, and JavaScript might be a good entry point because of their gradual learning curve. On the other hand, an experienced developer seeking to expand their knowledge within the web ecosystem might opt for TypeScript, as it is widely adopted for mission-critical applications.\n\nIn addition, if you plan to learn a new language to secure a job, it's essential to carefully research the location, available job opportunities, and the technologies most companies are adopting, including the programming languages powering them.\n\n### Ecosystem and community support\n\nBefore selecting a language, assess the size and activity level of the community in terms of available resources. Then, look at the updates, fixes, patches, and innovations surrounding libraries and frameworks in the language. For example, the JavaScript ecosystem constantly releases updates to libraries and frameworks.\n\nIn summary, essential languages to learn in 2024 include HTML for structure, CSS for styling, and JavaScript for interactivity. TypeScript, Dart, Swift, and Kotlin are also significant.\n\nFurthermore, users' evolving needs will continue to directly impact the approach to front-end development. This evolution will spur the rise of new technologies, libraries, and frameworks and prompt existing technologies to update their solutions. Business requirements will also play a significant role in determining the choice of technologies during front-end development.\n\nStaying informed about these changes is critical, as is knowing the appropriate path to follow when learning or adopting new technology. The [front-end r](https://roadmap.sh/frontend)[oadmap](https://roadmap.sh/frontend) is a reliable source of truth for developers seeking to stay updated and informed about the changes that may arise in front-end development.\n\nBeyond having access to a reliable roadmap, an essential aspect of learning is monitoring your progress, demonstrating your skills to potential employers, and joining a supportive community. [Sign up to get started](https://roadmap.sh/signup) on the frontend roadmap while tracking your progress. \n\n";
				}
				function compiledContent$s() {
					return html$s;
				}
				function getHeadings$s() {
					return [{"depth":2,"slug":"top-front-end-programming-languages-to-learn-in-2024","text":"Top front-end programming languages to learn in 2024"},{"depth":2,"slug":"front-end-programming-languages-for-web-development","text":"Front-end programming languages for web development"},{"depth":3,"slug":"hypertext-markup-language-html","text":"HyperText Markup Language (HTML)"},{"depth":3,"slug":"cascading-style-sheet-css","text":"Cascading Style Sheet (CSS)"},{"depth":3,"slug":"javascript","text":"JavaScript"},{"depth":3,"slug":"typescript","text":"TypeScript"},{"depth":2,"slug":"front-end-programming-languages-for-mobile-development","text":"Front-end programming languages for mobile development"},{"depth":3,"slug":"dart","text":"Dart"},{"depth":3,"slug":"swift","text":"Swift"},{"depth":3,"slug":"kotlin","text":"Kotlin"},{"depth":2,"slug":"top-front-end-frameworks-and-libraries-to-learn-in-2024","text":"Top front-end frameworks and libraries to learn in 2024"},{"depth":3,"slug":"react","text":"React"},{"depth":3,"slug":"vue","text":"Vue"},{"depth":3,"slug":"angular","text":"Angular"},{"depth":3,"slug":"svelte","text":"Svelte"},{"depth":3,"slug":"solidjs","text":"Solid.js"},{"depth":3,"slug":"nextjs","text":"Next.js"},{"depth":3,"slug":"remix","text":"Remix"},{"depth":3,"slug":"nuxt","text":"Nuxt"},{"depth":3,"slug":"astro","text":"Astro"},{"depth":3,"slug":"other-innovative-front-end-languages-and-frameworks","text":"Other innovative front-end languages and frameworks"},{"depth":3,"slug":"htmx","text":"HTMX"},{"depth":3,"slug":"react-native","text":"React Native"},{"depth":3,"slug":"webassembly-and-front-end-development","text":"WebAssembly and front-end development"},{"depth":2,"slug":"how-do-you-select-the-right-front-end-programming-language","text":"How do you select the right front-end programming language?"},{"depth":3,"slug":"project-requirement","text":"Project requirement"},{"depth":3,"slug":"targeted-platform","text":"Targeted platform"},{"depth":3,"slug":"career-trajectory-and-opportunity","text":"Career trajectory and opportunity"},{"depth":3,"slug":"ecosystem-and-community-support","text":"Ecosystem and community support"}];
				}

				const Content$s = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$s;
					content.file = file$s;
					content.url = url$s;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$s)}`;
				});

const __vite_glob_0_17 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$s,
	compiledContent: compiledContent$s,
	default: Content$s,
	file: file$s,
	frontmatter: frontmatter$s,
	getHeadings: getHeadings$s,
	rawContent: rawContent$s,
	url: url$s
}, Symbol.toStringTag, { value: 'Module' }));

const html$r = "<p>Have you ever heard the saying that <strong>all full-stack developers are software engineers, but not all software engineers are full-stack developers</strong>?</p>\n<p>A full-stack developer is responsible for the user-facing side and the behind-the-scenes logic that makes everything work, while a software engineer may specialize in just one of these areas.\nDespite their differences, both roles require similar problem-solving skills, even though their toolkits may vary.</p>\n<p>This article provides an in-depth discussion of what each role entails, their similarities and differences, the necessary skills, and the growth potential in these fields.\nIt will also touch on salary ranges, help you determine which path fits you best, and provide roadmaps for your software engineering or full-stack development journey.</p>\n<p>The table below summarizes the major differences between a full stack developer and software engineer</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Full-Stack Developer</strong></th><th><strong>Software Engineer</strong></th></tr></thead><tbody><tr><td>Focuses on end-to-end development of applications (both front-end and back-end)</td><td>Specializes and practices in one domain and has a deep knowledge of it.</td></tr><tr><td>Mostly limited to just front-end and back-end development</td><td>There are a broad range of domain options to choose from. e.g front-end, back-end, mobile, desktop, embedded systems.</td></tr></tbody></table>\n<p>Here’s each role in detail.</p>\n<h2 id=\"who-is-a-full-stack-developer\">Who is a full stack developer?</h2>\n<p>A <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">full stack developer</a> possesses the knowledge and technical skill sets to work proficiently in a software application’s front-end and back-end. The application’s front-end encompasses everything the user can see while interacting with it, i.e., the user interface. The back-end consists of the server-side logic, the database, and the server.</p>\n<p>Let’s take a look at front-end and back-end development in greater detail.</p>\n<ul>\n<li>\n<p><strong>Front-end development</strong> refers to everything a user can see and interact with. It is also known as the client side of an application. It is concerned primarily with the user interface (UI) and user experience (UX).</p>\n<p>The common languages used in front-end development include HTML, Cascading Style Sheets (CSS), and JavaScript. HTML defines the markup of the web page. CSS builds upon HTML and represents the style and format of the webpage. JavaScript is a programming language often used for front-end development and adds logic to your web page. You’ll find an excellent guide and roadmap to learning <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> on our platform.</p>\n<p>There are quite a few front-end frameworks out there. Some of the common ones are <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, and <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>. You can look at the <a href=\"https://roadmap.sh/frontend?r=frontend-beginner\" target=\"_blank\">front-end beginners roadmap</a> or the <a href=\"https://roadmap.sh/frontend?r=frontend\" target=\"_blank\">advanced front-end roadmap</a> for a more detailed guide.</p>\n</li>\n<li>\n<p><strong>Back-end development</strong> includes everything the user <em>cannot</em> see. It is sometimes referred to as the server side of an application. It focuses on the application’s functionality and <em>business logic</em>. Examples of back-end components include data storage, security, and handling of business logic.</p>\n<p>Back-end development mainly involves creating API endpoints consumed by the application’s front-end. Some common back-end programming languages include C#, Java, Rust, Golang, and Python. Check out the <a href=\"https://roadmap.sh/backend\" target=\"_blank\">back-end developer</a> roadmap.</p>\n</li>\n</ul>\n<h2 id=\"skills-required-to-be-a-full-stack-developer\">Skills required to be a full stack developer</h2>\n<p>The necessary technical skills to be a full stack developer include:</p>\n<ul>\n<li>Knowledge of HTML, CSS, and <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a>/<a href=\"https://roadmap.sh/typescript\" target=\"_blank\">TypeScript</a>.</li>\n<li>Knowledge of at least one JavaScript framework e.g. <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue js</a>, <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>.</li>\n<li>Knowledge of at least one back-end language. You can transfer your knowledge of JavaScript to the back-end for back-end development with Node JS.</li>\n<li>In-depth understanding of server-side rendering and web security.</li>\n<li>Knowledge of APIs.</li>\n<li>Understanding of database management systems and database architecture.</li>\n<li>Basic knowledge of <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a>.</li>\n</ul>\n<h2 id=\"who-is-a-software-engineer\">Who is a software engineer?</h2>\n<p>A software engineer is a specialist with a deep understanding of software development, computer systems, and programming languages. They design and create software programs and applications that solve real-world problems. Software engineers are specialists who focus on a specific aspect of software development. They produce high-quality software solutions.</p>\n<p>There are two primary types of software engineers: applications and systems software engineers.</p>\n<p><strong>Application software engineers:</strong> Client-focused software engineers design and develop software users interact with. They could be front-end, back-end, or full-stack developers. They also develop applications for operating systems such as iOS, Android, Windows, Linux, and many more.</p>\n<p><strong>Systems software engineers:</strong> These software engineers develop systems and networks that drive the user-facing applications developed by the application software engineers. They are specialists in either hardware or software engineering or both. They can also integrate different software products into a single platform; for example, <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> engineers can use tools like <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a> and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a> to deploy and orchestrate applications.</p>\n<p>System software engineers often serve as IT or system architects who design and enforce industry tech standards. They are experts in software design and mostly design back-end systems that users do not directly interact with.</p>\n<p>Software systems are complex, and much thought goes into building them. Software engineers use their broad knowledge to break down these complex systems, and the usual software development life cycle looks like the following.</p>\n<ul>\n<li>\n<p>They design the whole system, typically employing the principles of <a href=\"https://roadmap.sh/system-design\" target=\"_blank\">system design</a> and <a href=\"https://roadmap.sh/software-design-architecture\" target=\"_blank\">software design architecture</a>. They decide on the software architecture to use for the application by weighing the pros and cons of different system architectures that might be suitable. Some standard architectures are monolith architecture, micro-services architecture, event-driven architecture, etc.</p>\n</li>\n<li>\n<p>After deciding on the system architecture, the next step is defining the tools. The tools include programming languages, database management, version control, and cloud systems (Google Cloud, Microsoft Azure, or <a href=\"https://roadmap.sh/aws\" target=\"_blank\">Amazon AWS</a>). Several factors affect the choice of the tools: existing knowledge and expertise, cost, suitability of the tools to the application, and so on.</p>\n</li>\n<li>\n<p>After choosing the tools, the next step is to define the different entities and their relationships. This is usually done with an expert experienced in the domain where the application to be built will be used.</p>\n</li>\n<li>\n<p>Building the system involves several iterations. Still, the target is usually to produce the minimum viable product (MVP), the application’s basic functionalities. A lot of software testing is done by quality assurance personnel and the application’s users.</p>\n</li>\n</ul>\n<p><strong>It is important to note that this process is iterative.</strong></p>\n<p>Full-stack developers and software engineers are in high demand in various sectors. According to the <a href=\"https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">U.S. Bureau of Labor Statistics</a>, jobs in software development are expected to grow by 25% between 2022 and 2032.</p>\n<p>Also, according to <a href=\"https://www.statista.com/statistics/1367003/in-demand-it-roles/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Statista</a>, full-stack developers and software engineers are among the top technical positions demanded by recruiters worldwide in 2023. Indeed reported that the average software engineer’s annual salary is $105,624, and that of a <a href=\"https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">full-stack software developer</a> is $124,120.</p>\n<h2 id=\"skills-required-to-be-a-software-engineer\">Skills required to be a software engineer</h2>\n<p>While software engineering requires a strong specialization in a domain, the following core skills are required for the role:</p>\n<ul>\n<li>Knowledge of <a href=\"https://roadmap.sh/computer-science\" target=\"_blank\">computer science fundamentals</a>, software development, and <a href=\"https://roadmap.sh/system-design\" target=\"_blank\">system design</a>.</li>\n<li>Knowledge of a programming language</li>\n<li>Strong analytical and problem-solving skills</li>\n<li>Knowledge of operating systems</li>\n<li>Understanding of networks and security</li>\n<li>Knowledge of cloud platforms and DevOps systems</li>\n<li>Knowledge of testing and debugging processes/systems</li>\n</ul>\n<h2 id=\"choosing-your-path-key-differences-to-consider\">Choosing your path: Key differences to consider</h2>\n<p>You might be wondering which specialization you should pursue. When choosing a path, consider the following points:</p>\n<ul>\n<li>\n<p><strong>Focus and expertise</strong>: Full-stack developers have broad expertise. They are experts in both front-end and back-end development. The opposite is the case for software engineers in practice. They specialize in a particular field and thus typically have a deeper, more specialized knowledge. For example, they could focus on only front-end development and have extensive knowledge of that aspect.</p>\n</li>\n<li>\n<p><strong>Accessibility and entry point</strong>: Two major pathways exist to becoming a full-stack developer or software engineer: self-taught and a formal education with a degree.</p>\n<p>For the formal pathway, you will be taught and develop a strong computer science\nbackground, which is the core of software development. Self-taught developers learn specific, industry-relevant skills on their own time. One advantage of the formal education path is gaining hands-on experience while studying through internships.</p>\n</li>\n</ul>\n<p>Software development and engineering open the door to many employment opportunities. Individuals can work in other tech fields, such as data science and analytics, machine learning, and artificial intelligence. There are numerous opportunities for career growth in both fields, starting with internships and progressing to senior levels, which come with years of experience and expertise.</p>\n<h2 id=\"common-ground-and-shared-skills\">Common ground and shared skills</h2>\n<p>Despite the differences between full-stack developers and software engineers, they share some common grounds and skills as they are both crucial in the software development lifecycle.</p>\n<ul>\n<li>\n<p><strong>Collaboration and teamwork</strong>: Full-stack developers and software engineers primarily work in a tech team comprising other developers and engineers, designers, product managers, QA testers, etc. They must collaborate with other team members to achieve a goal.</p>\n</li>\n<li>\n<p><strong>Technical knowledge</strong>: Both specializations require a good understanding of core programming principles such as object-oriented programming (OOP), separation of concerns, clean code, SOLID principles, etc. They also require strong problem-solving and analytical skills, which are critical in the roles and in getting the job done.</p>\n</li>\n<li>\n<p><strong>Lifelong learning:</strong> This is a common ground shared amongst all fields in tech. As tech continually and rapidly evolves, they must stay up to date, which involves continuous learning to stay ahead. They continually update their technical and soft skills to remain relevant in the tech industry.</p>\n</li>\n<li>\n<p><strong>Job description</strong>: Full-stack developers and software engineers share some common responsibilities, which can be reflected in their job descriptions. Some of these responsibilities include:</p>\n<ul>\n<li>Collaborating with other front-end, back-end, and full-stack developers to improve efficiency and identify and resolve blockers.</li>\n<li>Collaborating with cross-functional teams.</li>\n<li>Implementing new software features.</li>\n<li>Conceptualizing and designing software architecture for the front-end and back-end.</li>\n<li>Documenting the software development process.</li>\n<li>Troubleshooting, debugging, and upgrading existing systems.</li>\n<li>Complying with project plans and industry standards.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how-do-i-become-a-full-stack-developer-or-software-engineer\">How do I become a full stack developer or software engineer?</h2>\n<p>As you’ve seen, becoming a full stack developer requires various skill sets. roadmap.sh provides a step-by-step guide on how to become a <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">f</a><a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">ull</a><a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">-</a><a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">s</a><a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">tack</a> <a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">d</a><a href=\"https://roadmap.sh/full-stack\" target=\"_blank\">eveloper</a> and by signing up, you will be able to:</p>\n<ul>\n<li>Keep track of your learning progress and share it on your public roadmap.sh profile.</li>\n<li>Draw your roadmap, either as an individual learner or for <a href=\"https://roadmap.sh/teams\" target=\"_blank\">Dev</a> <a href=\"https://roadmap.sh/teams\" target=\"_blank\">t</a><a href=\"https://roadmap.sh/teams\" target=\"_blank\">eams</a>.</li>\n<li><a href=\"https://roadmap.sh/ai\" target=\"_blank\">Generate new roadmaps</a> with AI.</li>\n<li>Collaborate on official roadmaps.</li>\n</ul>\n<p>Recall that a software engineer, as defined above, specializes in different areas in the software development cycle. roadmap.sh provides learning paths for various software engineering specializations. You can also sign up for the <a href=\"https://roadmap.sh/computer-science\" target=\"_blank\">computer science</a>, <a href=\"https://roadmap.sh/datastructures-and-algorithms\" target=\"_blank\">data structures and algorithms,</a> <a href=\"https://roadmap.sh/software-design-architecture\" target=\"_blank\">software design and architecture</a>, and <a href=\"https://roadmap.sh/system-design\" target=\"_blank\">system design</a> roadmaps.</p>";

				const frontmatter$r = {"title":"Full Stack Developer or Software Engineer – Which Way to Go?","description":"Unsure about your dev career path? Compare full stack developer and software engineer roles to make an informed decision.","authorId":"william","excludedBySlug":"/full-stack/vs-software-engineer","seo":{"title":"Full Stack Developer or Software Engineer – Which Way to Go?","description":"Unsure about your dev career path? Compare full stack developer and software engineer roles to make an informed decision.","ogImageUrl":"https://assets.roadmap.sh/guest/full-stack-developer-vs-software-engineer-yy0dk.jpg"},"isNew":false,"type":"textual","date":"2024-05-02T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$r = "/workspaces/developer-roadmap/src/data/guides/full-stack-vs-software-engineer.md";
				const url$r = undefined;
				function rawContent$r() {
					return "\nHave you ever heard the saying that **all full-stack developers are software engineers, but not all software engineers are full-stack developers**?\n\nA full-stack developer is responsible for the user-facing side and the behind-the-scenes logic that makes everything work, while a software engineer may specialize in just one of these areas.\nDespite their differences, both roles require similar problem-solving skills, even though their toolkits may vary.\n\nThis article provides an in-depth discussion of what each role entails, their similarities and differences, the necessary skills, and the growth potential in these fields.\nIt will also touch on salary ranges, help you determine which path fits you best, and provide roadmaps for your software engineering or full-stack development journey.\n\nThe table below summarizes the major differences between a full stack developer and software engineer\n\n| **Full-Stack Developer**                                                        | **Software Engineer**                                                                                                 |\n|---------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|\n| Focuses on end-to-end development of applications (both front-end and back-end) | Specializes and practices in one domain and has a deep knowledge of it.                                               |\n| Mostly limited to just front-end and back-end development                       | There are a broad range of domain options to choose from. e.g front-end, back-end, mobile, desktop, embedded systems. |\n\nHere’s each role in detail.\n\n## Who is a full stack developer?\n\nA [full stack developer](https://roadmap.sh/full-stack) possesses the knowledge and technical skill sets to work proficiently in a software application's front-end and back-end. The application's front-end encompasses everything the user can see while interacting with it, i.e., the user interface. The back-end consists of the server-side logic, the database, and the server.\n\nLet's take a look at front-end and back-end development in greater detail.\n\n\n- **Front-end development** refers to everything a user can see and interact with. It is also known as the client side of an application. It is concerned primarily with the user interface (UI) and user experience (UX).\n\n\n    The common languages used in front-end development include HTML, Cascading Style Sheets (CSS), and JavaScript. HTML defines the markup of the web page. CSS builds upon HTML and represents the style and format of the webpage. JavaScript is a programming language often used for front-end development and adds logic to your web page. You’ll find an excellent guide and roadmap to learning [JavaScript](https://roadmap.sh/javascript) on our platform.\n    \n    There are quite a few front-end frameworks out there. Some of the common ones are [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), and [Angular](https://roadmap.sh/angular). You can look at the [front-end beginners roadmap](https://roadmap.sh/frontend?r=frontend-beginner) or the [advanced front-end roadmap](https://roadmap.sh/frontend?r=frontend) for a more detailed guide.\n\n- **Back-end development** includes everything the user *cannot* see. It is sometimes referred to as the server side of an application. It focuses on the application's functionality and *business logic*. Examples of back-end components include data storage, security, and handling of business logic.\n\n  Back-end development mainly involves creating API endpoints consumed by the application's front-end. Some common back-end programming languages include C#, Java, Rust, Golang, and Python. Check out the [back-end developer](https://roadmap.sh/backend) roadmap.\n\n## Skills required to be a full stack developer\n\nThe necessary technical skills to be a full stack developer include:\n\n- Knowledge of HTML, CSS, and [JavaScript](https://roadmap.sh/javascript)/[TypeScript](https://roadmap.sh/typescript).\n- Knowledge of at least one JavaScript framework e.g. [React](https://roadmap.sh/react), [Vue js](https://roadmap.sh/vue), [Angular](https://roadmap.sh/angular).\n- Knowledge of at least one back-end language. You can transfer your knowledge of JavaScript to the back-end for back-end development with Node JS.\n- In-depth understanding of server-side rendering and web security.\n- Knowledge of APIs.\n- Understanding of database management systems and database architecture.\n- Basic knowledge of [DevOps](https://roadmap.sh/devops).\n\n## Who is a software engineer?\n\nA software engineer is a specialist with a deep understanding of software development, computer systems, and programming languages. They design and create software programs and applications that solve real-world problems. Software engineers are specialists who focus on a specific aspect of software development. They produce high-quality software solutions.\n\nThere are two primary types of software engineers: applications and systems software engineers.\n\n**Application software engineers:** Client-focused software engineers design and develop software users interact with. They could be front-end, back-end, or full-stack developers. They also develop applications for operating systems such as iOS, Android, Windows, Linux, and many more.\n\n**Systems software engineers:** These software engineers develop systems and networks that drive the user-facing applications developed by the application software engineers. They are specialists in either hardware or software engineering or both. They can also integrate different software products into a single platform; for example, [DevOps](https://roadmap.sh/devops) engineers can use tools like [Docker](https://roadmap.sh/docker) and [Kubernetes](https://roadmap.sh/kubernetes) to deploy and orchestrate applications.\n\nSystem software engineers often serve as IT or system architects who design and enforce industry tech standards. They are experts in software design and mostly design back-end systems that users do not directly interact with.\n\nSoftware systems are complex, and much thought goes into building them. Software engineers use their broad knowledge to break down these complex systems, and the usual software development life cycle looks like the following.\n\n- They design the whole system, typically employing the principles of [system design](https://roadmap.sh/system-design) and [software design architecture](https://roadmap.sh/software-design-architecture). They decide on the software architecture to use for the application by weighing the pros and cons of different system architectures that might be suitable. Some standard architectures are monolith architecture, micro-services architecture, event-driven architecture, etc.\n\n- After deciding on the system architecture, the next step is defining the tools. The tools include programming languages, database management, version control, and cloud systems (Google Cloud, Microsoft Azure, or [Amazon AWS](https://roadmap.sh/aws)). Several factors affect the choice of the tools: existing knowledge and expertise, cost, suitability of the tools to the application, and so on.\n\n- After choosing the tools, the next step is to define the different entities and their relationships. This is usually done with an expert experienced in the domain where the application to be built will be used.\n\n- Building the system involves several iterations. Still, the target is usually to produce the minimum viable product (MVP), the application's basic functionalities. A lot of software testing is done by quality assurance personnel and the application's users.\n\n**It is important to note that this process is iterative.**\n\nFull-stack developers and software engineers are in high demand in various sectors. According to the [U.S. Bureau of Labor Statistics](https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm), jobs in software development are expected to grow by 25% between 2022 and 2032.\n\nAlso, according to [Statista](https://www.statista.com/statistics/1367003/in-demand-it-roles/), full-stack developers and software engineers are among the top technical positions demanded by recruiters worldwide in 2023. Indeed reported that the average software engineer's annual salary is $105,624, and that of a [full-stack software developer](https://www.indeed.com/career/full-stack-developer/salaries?from=top_sb) is $124,120.\n\n## Skills required to be a software engineer\n\nWhile software engineering requires a strong specialization in a domain, the following core skills are required for the role:\n\n- Knowledge of [computer science fundamentals](https://roadmap.sh/computer-science), software development, and [system design](https://roadmap.sh/system-design).\n- Knowledge of a programming language\n- Strong analytical and problem-solving skills\n- Knowledge of operating systems\n- Understanding of networks and security\n- Knowledge of cloud platforms and DevOps systems\n- Knowledge of testing and debugging processes/systems\n\n## Choosing your path: Key differences to consider\n\nYou might be wondering which specialization you should pursue. When choosing a path, consider the following points:\n\n- **Focus and expertise**: Full-stack developers have broad expertise. They are experts in both front-end and back-end development. The opposite is the case for software engineers in practice. They specialize in a particular field and thus typically have a deeper, more specialized knowledge. For example, they could focus on only front-end development and have extensive knowledge of that aspect.\n \n- **Accessibility and entry point**: Two major pathways exist to becoming a full-stack developer or software engineer: self-taught and a formal education with a degree.\n\n  For the formal pathway, you will be taught and develop a strong computer science\n  background, which is the core of software development. Self-taught developers learn specific, industry-relevant skills on their own time. One advantage of the formal education path is gaining hands-on experience while studying through internships.\n\nSoftware development and engineering open the door to many employment opportunities. Individuals can work in other tech fields, such as data science and analytics, machine learning, and artificial intelligence. There are numerous opportunities for career growth in both fields, starting with internships and progressing to senior levels, which come with years of experience and expertise.\n\n## Common ground and shared skills\n\nDespite the differences between full-stack developers and software engineers, they share some common grounds and skills as they are both crucial in the software development lifecycle.\n\n- **Collaboration and teamwork**: Full-stack developers and software engineers primarily work in a tech team comprising other developers and engineers, designers, product managers, QA testers, etc. They must collaborate with other team members to achieve a goal.\n\n- **Technical knowledge**: Both specializations require a good understanding of core programming principles such as object-oriented programming (OOP), separation of concerns, clean code, SOLID principles, etc. They also require strong problem-solving and analytical skills, which are critical in the roles and in getting the job done.\n\n- **Lifelong learning:** This is a common ground shared amongst all fields in tech. As tech continually and rapidly evolves, they must stay up to date, which involves continuous learning to stay ahead. They continually update their technical and soft skills to remain relevant in the tech industry.\n\n- **Job description**: Full-stack developers and software engineers share some common responsibilities, which can be reflected in their job descriptions. Some of these responsibilities include:\n\n    - Collaborating with other front-end, back-end, and full-stack developers to improve efficiency and identify and resolve blockers.\n    - Collaborating with cross-functional teams.\n    - Implementing new software features.\n    - Conceptualizing and designing software architecture for the front-end and back-end.\n    - Documenting the software development process.\n    - Troubleshooting, debugging, and upgrading existing systems.\n    - Complying with project plans and industry standards.\n\n## How do I become a full stack developer or software engineer?\n\nAs you’ve seen, becoming a full stack developer requires various skill sets. roadmap.sh provides a step-by-step guide on how to become a [f](https://roadmap.sh/full-stack)[ull](https://roadmap.sh/full-stack)[-](https://roadmap.sh/full-stack)[s](https://roadmap.sh/full-stack)[tack](https://roadmap.sh/full-stack) [d](https://roadmap.sh/full-stack)[eveloper](https://roadmap.sh/full-stack) and by signing up, you will be able to:\n\n- Keep track of your learning progress and share it on your public roadmap.sh profile.\n- Draw your roadmap, either as an individual learner or for [Dev](https://roadmap.sh/teams) [t](https://roadmap.sh/teams)[eams](https://roadmap.sh/teams).\n- [Generate new roadmaps](https://roadmap.sh/ai) with AI.\n- Collaborate on official roadmaps.\n\nRecall that a software engineer, as defined above, specializes in different areas in the software development cycle. roadmap.sh provides learning paths for various software engineering specializations. You can also sign up for the [computer science](https://roadmap.sh/computer-science), [data structures and algorithms,](https://roadmap.sh/datastructures-and-algorithms) [software design and architecture](https://roadmap.sh/software-design-architecture), and [system design](https://roadmap.sh/system-design) roadmaps.\n\n";
				}
				function compiledContent$r() {
					return html$r;
				}
				function getHeadings$r() {
					return [{"depth":2,"slug":"who-is-a-full-stack-developer","text":"Who is a full stack developer?"},{"depth":2,"slug":"skills-required-to-be-a-full-stack-developer","text":"Skills required to be a full stack developer"},{"depth":2,"slug":"who-is-a-software-engineer","text":"Who is a software engineer?"},{"depth":2,"slug":"skills-required-to-be-a-software-engineer","text":"Skills required to be a software engineer"},{"depth":2,"slug":"choosing-your-path-key-differences-to-consider","text":"Choosing your path: Key differences to consider"},{"depth":2,"slug":"common-ground-and-shared-skills","text":"Common ground and shared skills"},{"depth":2,"slug":"how-do-i-become-a-full-stack-developer-or-software-engineer","text":"How do I become a full stack developer or software engineer?"}];
				}

				const Content$r = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$r;
					content.file = file$r;
					content.url = url$r;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$r)}`;
				});

const __vite_glob_0_18 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$r,
	compiledContent: compiledContent$r,
	default: Content$r,
	file: file$r,
	frontmatter: frontmatter$r,
	getHeadings: getHeadings$r,
	rawContent: rawContent$r,
	url: url$r
}, Symbol.toStringTag, { value: 'Module' }));

const html$q = "<p>Around 10 years ago, Jeff Atwood (the founder of stackoverflow) made a case that JavaScript is going to be the future and he coined the “Atwood Law” which states that <em>Any application that can be written in JavaScript will eventually be written in JavaScript</em>. Fast-forward to today, 10 years later, if you look at it rings truer than ever. JavaScript is continuing to gain more and more adoption.</p>\n<h3 id=\"javascript-is-announced\">JavaScript is announced</h3>\n<p>JavaScript was initially created by <a href=\"https://twitter.com/BrendanEich\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Brendan Eich</a> of Netscape and was first announced in a press release by Netscape in 1995. It has a bizarre history of naming; initially it was named <code>Mocha</code> by the creator, which was later renamed to <code>LiveScript</code>. In 1996, about a year later after the release, NetScape decided to rename it to be <code>JavaScript</code> with hopes of capitalizing on the Java community (although JavaScript did not have any relationship with Java) and released Netscape 2.0 with the official support of JavaScript.</p>\n<h3 id=\"es1-es2-and-es3\">ES1, ES2 and ES3</h3>\n<p>In 1996, Netscape decided to submit it to <a href=\"https://en.wikipedia.org/wiki/Ecma_International\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ECMA International</a> with the hopes of getting it standardized. First edition of the standard specification was released in 1997 and the language was standardized. After the initial release, <code>ECMAScript</code> was continued to be worked upon and in no-time two more versions were released ECMAScript 2 in 1998 and ECMAScript 3 in 1999.</p>\n<h3 id=\"decade-of-silence-and-es4\">Decade of Silence and ES4</h3>\n<p>After the release of ES3 in 1999, there was a complete silence for a decade and no changes were made to the official standard. There was some work on the fourth edition in the initial days; some of the features that were being discussed included classes, modules, static typings, destructuring etc. It was being targeted to be released by 2008 but was abandoned due to political differences concerning language complexity. However, the vendors kept introducing the extensions to the language and the developers were left scratching their heads — adding polyfills to battle compatibility issues between different browsers.</p>\n<h3 id=\"from-silence-to-es5\">From silence to ES5</h3>\n<p>Google, Microsoft, Yahoo and other disputers of ES4 came together and decided to work on a less ambitious update to ES3 tentatively named ES3.1. But the teams were still fighting about what to include from ES4 and what not. Finally, in 2009 ES5 was released mainly focusing on fixing the compatibility and security issues etc. But there wasn’t much of a splash in the water — it took ages for the vendors to incorporate the standards and many developers were still using ES3 without being aware of the “modern” standards.</p>\n<h3 id=\"release-of-es6--ecmascript-2015\">Release of ES6 — ECMAScript 2015</h3>\n<p>After a few years of the release of ES5, things started to change, TC39 (the committee under ECMA international responsible for ECMAScript standardization) kept working on the next version of ECMAScript (ES6) which was originally named ES Harmony, before being eventually released with the name ES2015. ES2015 adds significant features and syntactic sugar to allow writing complex applications. Some of the features that ES6 has to offer include</p>\n<ul>\n<li>Classes, Modules, Arrows</li>\n<li>Enhanced object literals</li>\n<li>Template strings</li>\n<li>Destructuring</li>\n<li>Default and rest parameters</li>\n<li>Spread operator</li>\n<li><code>let</code> and <code>const</code></li>\n<li>Iterators  <code>for..of</code></li>\n<li>Generators</li>\n<li><code>map</code> and <code>set</code></li>\n<li>Proxies and Symbols</li>\n<li>Promises</li>\n<li>Math, Number, String, Array, Object APIs and <a href=\"http://es6-features.org/#Constants\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">etc</a></li>\n</ul>\n<p>Browser support for ES6 is still scarce but everything that ES6 has to offer is still available to developers by transpiling the ES6 code to ES5. With the release of 6th version of ECMAScript, TC39 decided to move to yearly model of releasing updates to ECMAScript so to make sure that the new features are added as soon as they are approved and we don’t have to wait for the full specification to be drafted and approved — thus 6th version of ECMAScript was renamed as ECMAScript 2015 or ES2015 before the release in June 2015. And the next versions of ECMAScript were decided to published in June of every year.</p>\n<h3 id=\"release-of-es7--ecmascript-2016\">Release of ES7 — ECMAScript 2016</h3>\n<p>In June 2016, seventh version of ECMAScript was released. As ECMAScript has been moved to an yearly release model, ECMAScript 2016 (ES2016) comparatively did not have much to offer. ES2016 includes just two new features</p>\n<ul>\n<li>Exponentiation operator <code>**</code></li>\n<li><code>Array.prototype.includes</code></li>\n</ul>\n<h3 id=\"release-of-es8--ecmascript-2017\">Release of ES8 — ECMAScript 2017</h3>\n<p>The eighth version of ECMAScript was released in June 2017. The key highlight of ES8 was the addition of async functions. Here is the list of new features in ES8</p>\n<ul>\n<li><code>Object.values()</code> and <code>Object.entries()</code></li>\n<li>String padding i.e. <code>String.prototype.padEnd()</code> and <code>String.prototype.padStart()</code></li>\n<li><code>Object.getOwnPropertyDescriptors</code></li>\n<li>Trailing commas in function parameter lists and calls</li>\n<li>Async functions</li>\n</ul>\n<h3 id=\"what-is-esnext-then\">What is ESNext then?</h3>\n<p>ESNext is a dynamic name that refers to whatever the current version of ECMAScript is at the given time. For example, at the time of this writing <code>ES2017</code> or <code>ES8</code> is the current <code>ESNext</code>.</p>\n<h3 id=\"what-does-the-future-hold\">What does the future hold?</h3>\n<p>Since the release of ES6, <a href=\"https://github.com/tc39\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">TC39</a> has quite streamlined their process. TC39 operates through a Github organization now and there are <a href=\"https://github.com/tc39/proposals\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">several proposals</a> for new features or syntax to be added to the next versions of ECMAScript. Any one can go ahead and <a href=\"https://github.com/tc39/proposals\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">submit a proposal</a> thus resulting in increasing the participation from the community. Every proposal goes through <a href=\"https://tc39.github.io/process-document/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">four stages of maturity</a> before it makes it into the specification.</p>\n<p>And that about wraps it up. Feel free to leave your feedback in the <a href=\"https://discord.gg/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">discord</a>. Also here are the links to original language specifications <a href=\"https://www.ecma-international.org/ecma-262/6.0/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ES6</a>, <a href=\"https://www.ecma-international.org/ecma-262/7.0/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ES7</a> and <a href=\"https://www.ecma-international.org/ecma-262/8.0/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">ES8</a>.</p>";

				const frontmatter$q = {"title":"Brief History of JavaScript","description":"How JavaScript was introduced and evolved over the years","authorId":"kamran","seo":{"title":"Brief History of JavaScript - roadmap.sh","description":"How JavaScript was introduced and evolved over the years"},"isNew":false,"type":"textual","date":"2017-10-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$q = "/workspaces/developer-roadmap/src/data/guides/history-of-javascript.md";
				const url$q = undefined;
				function rawContent$q() {
					return "\nAround 10 years ago, Jeff Atwood (the founder of stackoverflow) made a case that JavaScript is going to be the future and he coined the “Atwood Law” which states that _Any application that can be written in JavaScript will eventually be written in JavaScript_. Fast-forward to today, 10 years later, if you look at it rings truer than ever. JavaScript is continuing to gain more and more adoption.\n\n### JavaScript is announced\n\nJavaScript was initially created by [Brendan Eich](https://twitter.com/BrendanEich) of Netscape and was first announced in a press release by Netscape in 1995. It has a bizarre history of naming; initially it was named `Mocha` by the creator, which was later renamed to `LiveScript`. In 1996, about a year later after the release, NetScape decided to rename it to be `JavaScript` with hopes of capitalizing on the Java community (although JavaScript did not have any relationship with Java) and released Netscape 2.0 with the official support of JavaScript.\n\n### ES1, ES2 and ES3\n\nIn 1996, Netscape decided to submit it to [ECMA International](https://en.wikipedia.org/wiki/Ecma_International) with the hopes of getting it standardized. First edition of the standard specification was released in 1997 and the language was standardized. After the initial release, `ECMAScript` was continued to be worked upon and in no-time two more versions were released ECMAScript 2 in 1998 and ECMAScript 3 in 1999.\n\n### Decade of Silence and ES4\n\nAfter the release of ES3 in 1999, there was a complete silence for a decade and no changes were made to the official standard. There was some work on the fourth edition in the initial days; some of the features that were being discussed included classes, modules, static typings, destructuring etc. It was being targeted to be released by 2008 but was abandoned due to political differences concerning language complexity. However, the vendors kept introducing the extensions to the language and the developers were left scratching their heads — adding polyfills to battle compatibility issues between different browsers.\n\n### From silence to ES5\n\nGoogle, Microsoft, Yahoo and other disputers of ES4 came together and decided to work on a less ambitious update to ES3 tentatively named ES3.1. But the teams were still fighting about what to include from ES4 and what not. Finally, in 2009 ES5 was released mainly focusing on fixing the compatibility and security issues etc. But there wasn’t much of a splash in the water — it took ages for the vendors to incorporate the standards and many developers were still using ES3 without being aware of the “modern” standards.\n\n### Release of ES6 — ECMAScript 2015\n\nAfter a few years of the release of ES5, things started to change, TC39 (the committee under ECMA international responsible for ECMAScript standardization) kept working on the next version of ECMAScript (ES6) which was originally named ES Harmony, before being eventually released with the name ES2015. ES2015 adds significant features and syntactic sugar to allow writing complex applications. Some of the features that ES6 has to offer include\n\n- Classes, Modules, Arrows\n- Enhanced object literals\n- Template strings\n- Destructuring\n- Default and rest parameters\n- Spread operator\n- `let` and `const`\n- Iterators  `for..of`\n- Generators\n- `map` and `set`\n- Proxies and Symbols\n- Promises\n- Math, Number, String, Array, Object APIs and [etc](http://es6-features.org/#Constants)\n\nBrowser support for ES6 is still scarce but everything that ES6 has to offer is still available to developers by transpiling the ES6 code to ES5. With the release of 6th version of ECMAScript, TC39 decided to move to yearly model of releasing updates to ECMAScript so to make sure that the new features are added as soon as they are approved and we don’t have to wait for the full specification to be drafted and approved — thus 6th version of ECMAScript was renamed as ECMAScript 2015 or ES2015 before the release in June 2015. And the next versions of ECMAScript were decided to published in June of every year.\n\n### Release of ES7 — ECMAScript 2016\n\nIn June 2016, seventh version of ECMAScript was released. As ECMAScript has been moved to an yearly release model, ECMAScript 2016 (ES2016) comparatively did not have much to offer. ES2016 includes just two new features\n\n- Exponentiation operator `**`\n- `Array.prototype.includes`\n\n### Release of ES8 — ECMAScript 2017\n\nThe eighth version of ECMAScript was released in June 2017. The key highlight of ES8 was the addition of async functions. Here is the list of new features in ES8\n\n- `Object.values()` and `Object.entries()`\n- String padding i.e. `String.prototype.padEnd()` and `String.prototype.padStart()`\n- `Object.getOwnPropertyDescriptors`\n- Trailing commas in function parameter lists and calls\n- Async functions\n\n### What is ESNext then?\n\nESNext is a dynamic name that refers to whatever the current version of ECMAScript is at the given time. For example, at the time of this writing `ES2017` or `ES8` is the current `ESNext`.\n\n### What does the future hold?\n\nSince the release of ES6, [TC39](https://github.com/tc39) has quite streamlined their process. TC39 operates through a Github organization now and there are [several proposals](https://github.com/tc39/proposals) for new features or syntax to be added to the next versions of ECMAScript. Any one can go ahead and [submit a proposal](https://github.com/tc39/proposals) thus resulting in increasing the participation from the community. Every proposal goes through [four stages of maturity](https://tc39.github.io/process-document/) before it makes it into the specification.\n\nAnd that about wraps it up. Feel free to leave your feedback in the [discord](https://discord.gg/cJpEt5Qbwa). Also here are the links to original language specifications [ES6](https://www.ecma-international.org/ecma-262/6.0/), [ES7](https://www.ecma-international.org/ecma-262/7.0/) and [ES8](https://www.ecma-international.org/ecma-262/8.0/).\n";
				}
				function compiledContent$q() {
					return html$q;
				}
				function getHeadings$q() {
					return [{"depth":3,"slug":"javascript-is-announced","text":"JavaScript is announced"},{"depth":3,"slug":"es1-es2-and-es3","text":"ES1, ES2 and ES3"},{"depth":3,"slug":"decade-of-silence-and-es4","text":"Decade of Silence and ES4"},{"depth":3,"slug":"from-silence-to-es5","text":"From silence to ES5"},{"depth":3,"slug":"release-of-es6--ecmascript-2015","text":"Release of ES6 — ECMAScript 2015"},{"depth":3,"slug":"release-of-es7--ecmascript-2016","text":"Release of ES7 — ECMAScript 2016"},{"depth":3,"slug":"release-of-es8--ecmascript-2017","text":"Release of ES8 — ECMAScript 2017"},{"depth":3,"slug":"what-is-esnext-then","text":"What is ESNext then?"},{"depth":3,"slug":"what-does-the-future-hold","text":"What does the future hold?"}];
				}

				const Content$q = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$q;
					content.file = file$q;
					content.url = url$q;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$q)}`;
				});

const __vite_glob_0_19 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$q,
	compiledContent: compiledContent$q,
	default: Content$q,
	file: file$q,
	frontmatter: frontmatter$q,
	getHeadings: getHeadings$q,
	rawContent: rawContent$q,
	url: url$q
}, Symbol.toStringTag, { value: 'Module' }));

const html$p = "<p>If you are trying to get into tech or are already in tech and have been exploring roles across the industry, you must have come across Development and Operations (DevOps). In fact, DevOps is one of the highest-paying roles in the tech industry. But <strong>what is DevOps, and how is it different from other roles?</strong></p>\n<p><strong>DevOps is a software engineering approach that combines development (Dev) and operations (Ops) to shorten the software development lifecycle</strong> (feature development, bug fixes, updates) by embracing automation. It is a bridge between the development and the operations team. While the primary goal of a software engineer is to design and build software solutions, a DevOps engineer has a key role in streamlining the software delivery pipeline, automating infrastructure provisioning, and enhancing the deployment process.</p>\n<p>This article provides in-depth knowledge on how to become a DevOps engineer, highlighting the mindset and technical skills(including DevOps tools) required to become one.</p>\n<p><strong>TL;DR:</strong> DevOps combines development and operations to automate software delivery. To become a DevOps engineer, you should adopt a mindset of automation, risk awareness, systems thinking, and continuous learning. In addition to the mindset, follow the steps below:</p>\n<ul>\n<li>Step 1: Learn a programming language</li>\n<li>Step 2: Get comfortable with Linux and terminal</li>\n<li>Step 3: Version control and code hosting platforms</li>\n<li>Step 4: Networking fundamentals</li>\n<li>Step 5: Containerization</li>\n<li>Step 6: Cloud platform</li>\n<li>Step 7: Continuous integration and delivery</li>\n</ul>\n<p>Let’s dive into the essential skills required for a <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps engineer</a>.</p>\n<h2 id=\"skills-required-to-become-a-devops-engineer\">Skills required to become a DevOps Engineer</h2>\n<h3 id=\"operating-system\">Operating system</h3>\n<p>A DevOps engineer should understand the operating system, especially Linux (distribution or any variant). This is because most of the servers in use are Linux-based, so having a solid foundation in the Linux OS is imperative for infrastructure management and troubleshooting.</p>\n<h3 id=\"solid-programming-fundamentals\">Solid programming fundamentals</h3>\n<p>As a DevOps engineer, you will use your knowledge of programming and scripting language to:</p>\n<ul>\n<li>Automate frequent and boring tasks</li>\n<li>Patch a security bug exposing your internal application to outside users</li>\n<li>Create automation tools, monitoring tools, and logging tools</li>\n</ul>\n<p>Hence, hands-on experience with programming is crucial.</p>\n<h3 id=\"version-control\">Version control</h3>\n<p>Knowledge of version control is essential in all software engineering roles. As a DevOps engineer, you will likely work in a team rather than alone. Version control systems like Git facilitate collaboration in a team while providing a centralized repository for the code.</p>\n<h3 id=\"networking-fundamentals\">Networking fundamentals</h3>\n<p>Many modern-day applications are distributed systems that rely on networking. For instance, a single application could be composed of a frontend, backend, database, file server, etc., each residing on a separate server. For a seamless user experience, these separate entities should be able to communicate smoothly.</p>\n<h3 id=\"containerization-and-orchestration\">Containerization and orchestration</h3>\n<p><a href=\"https://roadmap.sh/docker\" target=\"_blank\">Containerization</a> and <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">orchestration</a> help solve the issues of software deployment and resource utilization. Knowledge of containerization and orchestration helps reduce deployment time and allows you to scale applications quickly without downtime, resulting in a better user experience.</p>\n<h3 id=\"cloud-platforms\">Cloud platforms</h3>\n<p>Procuring hardware to deploy the software is not always feasible and beneficial. Furthermore, once you purchase the hardware, you need more time and resources to manage the new hardware. Depending upon the complexity of the application, choosing cloud platforms instead of on-premise hardware can significantly reduce deployment time and cost.</p>\n<h3 id=\"infrastructure-as-code-iac\">Infrastructure as Code (IaC)</h3>\n<p>IaC can be seen as a superior form of automation for a DevOps engineer. IaC tools like Terraform and Amazon Cloud CDK allow the operations team to set up and manage infrastructure by simply changing a configuration file. This makes it easier to manage and scale the application.</p>\n<p>So, how do you learn these essential skills? In what sequence do you acquire these skills? The following section presents a complete roadmap on how you can learn these skills and become a DevOps engineer.</p>\n<h2 id=\"how-to-become-a-devops-engineer\">How to become a DevOps Engineer</h2>\n<p>The internet is full of resources for learning DevOps and DevOps tools. Many of these guides lack structure and organization, resulting in a dilemma of where to start. To help beginners learn DevOps in a structured manner, <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap.sh</a> has a beginner-friendly <a href=\"https://roadmap.sh/devops?r=devops-beginner\" target=\"_blank\">DevOps roadmap</a>.</p>\n<p>This section presents a concise version of the DevOps roadmap. It is recommended that you implement real-world projects recommended in each stage of the roadmap. In the end, you can publish these DevOps projects to GitHub as an open-source project repository, and the repository will act as your portfolio.</p>\n<h3 id=\"step-1-learn-a-programming-language\">Step 1: Learn a programming language</h3>\n<p>Programming language is essential to a DevOps engineer. I recommend you start with either Python or Go. <a href=\"https://roadmap.sh/python\" target=\"_blank\">Python</a> is a popular programming language that is easier to learn and used in various projects involving <a href=\"https://roadmap.sh/backend\" target=\"_blank\">backend</a> development, writing machine learning algorithms, automating everyday tasks, etc.</p>\n<p><a href=\"https://automatetheboringstuff.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Automate the Boring Stuff with Python</a> is an excellent resource for learning Python and basic programming concepts. It will also come in handy when building automation tools. To demonstrate your understanding of Python, you can create a web scraper that extracts a list of hotels, their address, prices, reviews, and locations from a site like <a href=\"http://booking.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">booking.com</a>.</p>\n<h3 id=\"step-2-get-comfortable-with-linux-and-the-terminal\">Step 2: Get comfortable with Linux and the terminal</h3>\n<p>According to <a href=\"https://gitnux.org/linux-statistics/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Gitnux</a>, 92.4% of the world’s top 1 million servers run on Linux, and about 96.3% of the world’s top 1 million websites are powered by Unix-like operating systems, with Linux being the most popular. This makes Linux a popular tool for all software engineers.</p>\n<p>Furthermore, you should make the terminal your best friend. Some programs and packages may not have a GUI counterpart, and even when they exist, using the CLI(Command Line Interface) alternative is faster and easier to automate.</p>\n<p>An excellent way to practice Linux is to install it on a thumb drive and try to do everyday tasks like changing the directory, creating new files and folders, editing files, searching for files and folders, etc., using Linux commands instead of using the GUI interface.</p>\n<h3 id=\"step-3-version-control-and-code-hosting-platforms\">Step 3: Version control and code hosting platforms</h3>\n<p>Version control systems like Git make it easier for developers to track changes in their source code by maintaining a history of the changes. Combined with platforms like GitHub or Bitbucket, Git can facilitate developers to work collaboratively with each other.</p>\n<p><a href=\"https://www.atlassian.com/git\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">This tutorial</a> will help you learn Git basics and how to use Git for collaboration using Bitbucket, a code hosting platform. For advanced concepts on git branching, <a href=\"https://learngitbranching.js.org\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">refer this site.</a> Once you go through the tutorial, you can easily switch from Bitbucket to GitHub and GitLab, which are more popular among developers.</p>\n<h3 id=\"step-4-networking-fundamentals\">Step 4: Networking fundamentals</h3>\n<p>Learning networking fundamentals becomes vital to the DevOps team when working with software components constantly communicating with other services. Knowledge of networks comes in handy when setting up resources in the public cloud. At a minimum, you should clearly understand standard protocols(TCP/IP, UDP), routing, IP addressing, subnetting, and ports.</p>\n<p>A DevOps engineer should have a sound knowledge of web servers like Nginx. Nginx allows you to serve your application on the web while handling reverse proxy and load balancing. <a href=\"https://httpd.apache.org\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Apache</a> is another web server that provides similar features.</p>\n<p>For your practice, you can create a simple frontend (or clone it from GitHub) and deploy it using Nginx or Apache.</p>\n<h3 id=\"step-5-containerization\">Step 5: Containerization</h3>\n<p>An application developed by one developer may not work on other machines due to the difference in environment. To eliminate this issue, DevOps engineers use containerization tools like Docker. Docker allows engineers to create consistent development, testing, and production environments. It also ensures the developed application is portable across different platforms.</p>\n<p>Applications rely on multiple containers that communicate with each other. To facilitate the orchestration of these containers, you can use container orchestration tools like <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>. The <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker Roadmap</a> provides essential resources to help you master Docker and Kubernetes.</p>\n<p>You can demonstrate your understanding of containerization tools by creating a simple project with frontend and back deployed as two separate containers. If you have already developed these components in the previous stages of the roadmap, re-use them to save time.</p>\n<h3 id=\"step-6-cloud-platform\">Step 6: Cloud platform</h3>\n<p>Cloud platforms like <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, Azure, and Google Cloud Platform are some popular cloud providers that allow you to deploy your projects without investing in expensive hardware. Many cloud services across these cloud platforms are analogous. So, if you are a beginner, start with AWS, as it is the most widely used cloud platform. Once you are comfortable with AWS’s services and key concepts, you can deploy the application created in earlier stages to the AWS.</p>\n<p>Alternatively, you could demonstrate your understanding by taking the <a href=\"https://aws.amazon.com/certification/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">certification exam from AWS</a>.</p>\n<p>Once comfortable launching your infrastructure using the GUI, you should learn about Infrastructure as Code(IaC). I recommend using <a href=\"https://www.terraform.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Terraform</a> for IaC as it is cloud-agnostic. Terraform allows you to set up and make changes to infrastructure resources by editing a configuration file.</p>\n<h3 id=\"step-7-continuous-integration-and-delivery\">Step 7: Continuous integration and delivery</h3>\n<p><a href=\"https://www.youtube.com/watch?v=nyKZTKQS_EQ\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Continuous Integration and Continuous Delivery</a> (or Continuous Deployment) (CI/CD) is a set of practices aimed at automating and streamlining software changes from development to production. Today, in practice, when you commit and push your changes to the remote repository (say GitHub), the tests kick off; if the tests pass successfully, your changes are merged and then deployed to the staging and production server.</p>\n<p>CI/CD is a combination of three skills: programming, writing configuration files, and Git. As such, you don’t need to learn new skills to implement CI/CD. However, some organizations use tools like CircleCI and Jenkins to simplify the process.</p>\n<p>You can practice CI/CD using GitHub actions. <a href=\"https://docs.github.com/en/actions/learn-github-actions\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">GitHub provides a set of tutorials</a> for the same. You can follow along those tutorials to get a good grasp of Continuous Integration and Continuous Deployment. Then, you can implement CICD in one of your projects created while learning previous skills in this roadmap.</p>\n<p>Next, let’s discuss the mindset needed to become a DevOps engineer.</p>\n<h2 id=\"devops-engineers-mindset\">DevOps Engineer’s mindset</h2>\n<p>To become a successful DevOps engineer, you must orient your thoughts around the following:</p>\n<h3 id=\"automation\">Automation</h3>\n<p>Software products or systems are prone to various errors, including human errors. Stress during work and the race against deadlines can increase the frequency of these errors. Automation helps reduce human error and eliminate boring tasks.</p>\n<h3 id=\"risk-awareness\">Risk awareness</h3>\n<p>DevOps engineers must understand the risks entangled with changes to a software system and deployment infrastructures. The risk should be minimized by utilizing automated testing, monitoring, and incremental changes.</p>\n<h3 id=\"systems-thinking\">Systems thinking</h3>\n<p>DevOps engineers must understand how different components within a system communicate and interact with each other to deliver the desired solution. A graphical representation of the system can come in handy when fixing issues or knowledge transfer.</p>\n<h3 id=\"continuous-learning\">Continuous learning</h3>\n<p>A continuous learning and continuous improvement mindset is essential across all roles in software engineering, but its importance is amplified for a DevOps engineer. A DevOps engineer must continually learn about new technologies, tools, and best practices and implement the ones best suited to the project.</p>\n<p>You may not have the DevOps mindset, but that is okay. You can build this mindset as you learn and grow into the role. Let us look at some technical skills required to become a DevOps engineer.</p>\n<h2 id=\"who-can-become-a-devops-engineer\">Who can become a DevOps Engineer?</h2>\n<p>Anyone with the right skillset can become a DevOps engineer. Typically, it is easier to transition into a DevOps role if you are a,</p>\n<ul>\n<li>Systems Engineer</li>\n<li>Backend Engineer</li>\n<li>Infrastructure Engineer</li>\n</ul>\n<p>If you are a newbie in software engineering, you are encouraged to learn the above skills and concepts. You can then apply for a DevOps intern position. You may look for vacancies in local companies or remote job boards.</p>\n<p>Depending on your current skill set and practical experience, the time to transition into a DevOps role will vary. However, following a structured learning path will help you speed up and ease the process.</p>\n<h2 id=\"what-next\">What next?</h2>\n<p>The <a href=\"https://roadmap.sh\" target=\"_blank\">roadmap</a> simplifies the <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> journey by breaking it into learnable skills via the DevOps roadmap. To effectively use the site, I encourage you to <a href=\"https://roadmap.sh/signup\" target=\"_blank\">sign up</a> on the platform and learn the desired skill by following the structured roadmap. You could explore additional roadmaps and advanced topics utilizing the search bar on the platform. The platform also allows you to:</p>\n<ul>\n<li>Keep track of your journey as you progress through a roadmap</li>\n<li>Draw your own roadmap or generate one using AI</li>\n<li>Create and share a roadmap for <a href=\"https://roadmap.sh/teams\" target=\"_blank\">your team</a></li>\n</ul>";

				const frontmatter$p = {"title":"How to become a DevOps Engineer in @currentYear@","description":"Want to become a DevOps engineer? Our @currentYear@ guide covers skills, certifications, and expert career advice. Start your journey today!","authorId":"william","excludedBySlug":"/devops/how-to-become-devops-engineer","seo":{"title":"How to become a DevOps Engineer in @currentYear@","description":"Want to become a DevOps engineer? Our @currentYear@ guide covers skills, certifications, and expert career advice. Start your journey today!","ogImageUrl":"https://assets.roadmap.sh/guest/how-to-become-devops-engineer-3opju.jpg"},"isNew":true,"type":"textual","date":"2024-06-11T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$p = "/workspaces/developer-roadmap/src/data/guides/how-to-become-devops-engineer.md";
				const url$p = undefined;
				function rawContent$p() {
					return "\nIf you are trying to get into tech or are already in tech and have been exploring roles across the industry, you must have come across Development and Operations (DevOps). In fact, DevOps is one of the highest-paying roles in the tech industry. But **what is DevOps, and how is it different from other roles?**\n\n**DevOps is a software engineering approach that combines development (Dev) and operations (Ops) to shorten the software development lifecycle** (feature development, bug fixes, updates) by embracing automation. It is a bridge between the development and the operations team. While the primary goal of a software engineer is to design and build software solutions, a DevOps engineer has a key role in streamlining the software delivery pipeline, automating infrastructure provisioning, and enhancing the deployment process.\n\nThis article provides in-depth knowledge on how to become a DevOps engineer, highlighting the mindset and technical skills(including DevOps tools) required to become one.\n\n**TL;DR:** DevOps combines development and operations to automate software delivery. To become a DevOps engineer, you should adopt a mindset of automation, risk awareness, systems thinking, and continuous learning. In addition to the mindset, follow the steps below:\n\n- Step 1: Learn a programming language\n- Step 2: Get comfortable with Linux and terminal\n- Step 3: Version control and code hosting platforms\n- Step 4: Networking fundamentals\n- Step 5: Containerization\n- Step 6: Cloud platform\n- Step 7: Continuous integration and delivery\n\nLet’s dive into the essential skills required for a [DevOps engineer](https://roadmap.sh/devops).\n\n## Skills required to become a DevOps Engineer\n\n### Operating system\n\nA DevOps engineer should understand the operating system, especially Linux (distribution or any variant). This is because most of the servers in use are Linux-based, so having a solid foundation in the Linux OS is imperative for infrastructure management and troubleshooting.\n\n### Solid programming fundamentals\n\nAs a DevOps engineer, you will use your knowledge of programming and scripting language to:\n\n- Automate frequent and boring tasks\n- Patch a security bug exposing your internal application to outside users \n- Create automation tools, monitoring tools, and logging tools\n\nHence, hands-on experience with programming is crucial. \n\n### Version control\n\nKnowledge of version control is essential in all software engineering roles. As a DevOps engineer, you will likely work in a team rather than alone. Version control systems like Git facilitate collaboration in a team while providing a centralized repository for the code.\n\n### Networking fundamentals\n\nMany modern-day applications are distributed systems that rely on networking. For instance, a single application could be composed of a frontend, backend, database, file server, etc., each residing on a separate server. For a seamless user experience, these separate entities should be able to communicate smoothly.\n\n### Containerization and orchestration\n\n[Containerization](https://roadmap.sh/docker) and [orchestration](https://roadmap.sh/kubernetes) help solve the issues of software deployment and resource utilization. Knowledge of containerization and orchestration helps reduce deployment time and allows you to scale applications quickly without downtime, resulting in a better user experience.\n\n### Cloud platforms\n\nProcuring hardware to deploy the software is not always feasible and beneficial. Furthermore, once you purchase the hardware, you need more time and resources to manage the new hardware. Depending upon the complexity of the application, choosing cloud platforms instead of on-premise hardware can significantly reduce deployment time and cost.\n\n### Infrastructure as Code (IaC)\n\nIaC can be seen as a superior form of automation for a DevOps engineer. IaC tools like Terraform and Amazon Cloud CDK allow the operations team to set up and manage infrastructure by simply changing a configuration file. This makes it easier to manage and scale the application.\n\nSo, how do you learn these essential skills? In what sequence do you acquire these skills? The following section presents a complete roadmap on how you can learn these skills and become a DevOps engineer.\n\n## How to become a DevOps Engineer\n\nThe internet is full of resources for learning DevOps and DevOps tools. Many of these guides lack structure and organization, resulting in a dilemma of where to start. To help beginners learn DevOps in a structured manner, [roadmap.sh](https://roadmap.sh) has a beginner-friendly [DevOps roadmap](https://roadmap.sh/devops?r=devops-beginner). \n\nThis section presents a concise version of the DevOps roadmap. It is recommended that you implement real-world projects recommended in each stage of the roadmap. In the end, you can publish these DevOps projects to GitHub as an open-source project repository, and the repository will act as your portfolio.\n\n### Step 1: Learn a programming language\n\nProgramming language is essential to a DevOps engineer. I recommend you start with either Python or Go. [Python](https://roadmap.sh/python) is a popular programming language that is easier to learn and used in various projects involving [backend](https://roadmap.sh/backend) development, writing machine learning algorithms, automating everyday tasks, etc. \n\n[Automate the Boring Stuff with Python](https://automatetheboringstuff.com/) is an excellent resource for learning Python and basic programming concepts. It will also come in handy when building automation tools. To demonstrate your understanding of Python, you can create a web scraper that extracts a list of hotels, their address, prices, reviews, and locations from a site like [booking.com](http://booking.com/).\n\n### Step 2: Get comfortable with Linux and the terminal\n\nAccording to [Gitnux](https://gitnux.org/linux-statistics/), 92.4% of the world’s top 1 million servers run on Linux, and about 96.3% of the world’s top 1 million websites are powered by Unix-like operating systems, with Linux being the most popular. This makes Linux a popular tool for all software engineers.\n\nFurthermore, you should make the terminal your best friend. Some programs and packages may not have a GUI counterpart, and even when they exist, using the CLI(Command Line Interface) alternative is faster and easier to automate. \n\nAn excellent way to practice Linux is to install it on a thumb drive and try to do everyday tasks like changing the directory, creating new files and folders, editing files, searching for files and folders, etc., using Linux commands instead of using the GUI interface.\n\n### Step 3: Version control and code hosting platforms\n\nVersion control systems like Git make it easier for developers to track changes in their source code by maintaining a history of the changes. Combined with platforms like GitHub or Bitbucket, Git can facilitate developers to work collaboratively with each other.\n\n[This tutorial](https://www.atlassian.com/git) will help you learn Git basics and how to use Git for collaboration using Bitbucket, a code hosting platform. For advanced concepts on git branching, [refer this site.](https://learngitbranching.js.org) Once you go through the tutorial, you can easily switch from Bitbucket to GitHub and GitLab, which are more popular among developers.\n\n### Step 4: Networking fundamentals\n\nLearning networking fundamentals becomes vital to the DevOps team when working with software components constantly communicating with other services. Knowledge of networks comes in handy when setting up resources in the public cloud. At a minimum, you should clearly understand standard protocols(TCP/IP, UDP), routing, IP addressing, subnetting, and ports. \n\nA DevOps engineer should have a sound knowledge of web servers like Nginx. Nginx allows you to serve your application on the web while handling reverse proxy and load balancing. [Apache](https://httpd.apache.org) is another web server that provides similar features.\n\nFor your practice, you can create a simple frontend (or clone it from GitHub) and deploy it using Nginx or Apache.\n\n### Step 5: Containerization\n\nAn application developed by one developer may not work on other machines due to the difference in environment. To eliminate this issue, DevOps engineers use containerization tools like Docker. Docker allows engineers to create consistent development, testing, and production environments. It also ensures the developed application is portable across different platforms. \n\nApplications rely on multiple containers that communicate with each other. To facilitate the orchestration of these containers, you can use container orchestration tools like [Kubernetes](https://roadmap.sh/kubernetes). The [Docker Roadmap](https://roadmap.sh/docker) provides essential resources to help you master Docker and Kubernetes. \n\nYou can demonstrate your understanding of containerization tools by creating a simple project with frontend and back deployed as two separate containers. If you have already developed these components in the previous stages of the roadmap, re-use them to save time.\n\n### Step 6: Cloud platform\n\nCloud platforms like [AWS](https://roadmap.sh/aws), Azure, and Google Cloud Platform are some popular cloud providers that allow you to deploy your projects without investing in expensive hardware. Many cloud services across these cloud platforms are analogous. So, if you are a beginner, start with AWS, as it is the most widely used cloud platform. Once you are comfortable with AWS’s services and key concepts, you can deploy the application created in earlier stages to the AWS. \n\nAlternatively, you could demonstrate your understanding by taking the [certification exam from AWS](https://aws.amazon.com/certification/).\n\nOnce comfortable launching your infrastructure using the GUI, you should learn about Infrastructure as Code(IaC). I recommend using [Terraform](https://www.terraform.io/) for IaC as it is cloud-agnostic. Terraform allows you to set up and make changes to infrastructure resources by editing a configuration file.\n\n### Step 7: Continuous integration and delivery\n\n[Continuous Integration and Continuous Delivery](https://www.youtube.com/watch?v=nyKZTKQS_EQ) (or Continuous Deployment) (CI/CD) is a set of practices aimed at automating and streamlining software changes from development to production. Today, in practice, when you commit and push your changes to the remote repository (say GitHub), the tests kick off; if the tests pass successfully, your changes are merged and then deployed to the staging and production server.\n\nCI/CD is a combination of three skills: programming, writing configuration files, and Git. As such, you don’t need to learn new skills to implement CI/CD. However, some organizations use tools like CircleCI and Jenkins to simplify the process.\n\nYou can practice CI/CD using GitHub actions. [GitHub provides a set of tutorials](https://docs.github.com/en/actions/learn-github-actions) for the same. You can follow along those tutorials to get a good grasp of Continuous Integration and Continuous Deployment. Then, you can implement CICD in one of your projects created while learning previous skills in this roadmap.\n\nNext, let’s discuss the mindset needed to become a DevOps engineer.\n\n## DevOps Engineer’s mindset\n\nTo become a successful DevOps engineer, you must orient your thoughts around the following:\n\n### Automation\n\nSoftware products or systems are prone to various errors, including human errors. Stress during work and the race against deadlines can increase the frequency of these errors. Automation helps reduce human error and eliminate boring tasks.\n\n### Risk awareness\n\nDevOps engineers must understand the risks entangled with changes to a software system and deployment infrastructures. The risk should be minimized by utilizing automated testing, monitoring, and incremental changes.\n\n### Systems thinking\n\nDevOps engineers must understand how different components within a system communicate and interact with each other to deliver the desired solution. A graphical representation of the system can come in handy when fixing issues or knowledge transfer.\n\n### Continuous learning\n\nA continuous learning and continuous improvement mindset is essential across all roles in software engineering, but its importance is amplified for a DevOps engineer. A DevOps engineer must continually learn about new technologies, tools, and best practices and implement the ones best suited to the project.\n\nYou may not have the DevOps mindset, but that is okay. You can build this mindset as you learn and grow into the role. Let us look at some technical skills required to become a DevOps engineer.\n\n## Who can become a DevOps Engineer?\n\nAnyone with the right skillset can become a DevOps engineer. Typically, it is easier to transition into a DevOps role if you are a,\n\n- Systems Engineer\n- Backend Engineer\n- Infrastructure Engineer\n\nIf you are a newbie in software engineering, you are encouraged to learn the above skills and concepts. You can then apply for a DevOps intern position. You may look for vacancies in local companies or remote job boards.\n\nDepending on your current skill set and practical experience, the time to transition into a DevOps role will vary. However, following a structured learning path will help you speed up and ease the process.\n\n## What next?\n\nThe [roadmap](https://roadmap.sh) simplifies the [DevOps](https://roadmap.sh/devops) journey by breaking it into learnable skills via the DevOps roadmap. To effectively use the site, I encourage you to [sign up](https://roadmap.sh/signup) on the platform and learn the desired skill by following the structured roadmap. You could explore additional roadmaps and advanced topics utilizing the search bar on the platform. The platform also allows you to:\n\n- Keep track of your journey as you progress through a roadmap\n- Draw your own roadmap or generate one using AI\n- Create and share a roadmap for [your team](https://roadmap.sh/teams)\n";
				}
				function compiledContent$p() {
					return html$p;
				}
				function getHeadings$p() {
					return [{"depth":2,"slug":"skills-required-to-become-a-devops-engineer","text":"Skills required to become a DevOps Engineer"},{"depth":3,"slug":"operating-system","text":"Operating system"},{"depth":3,"slug":"solid-programming-fundamentals","text":"Solid programming fundamentals"},{"depth":3,"slug":"version-control","text":"Version control"},{"depth":3,"slug":"networking-fundamentals","text":"Networking fundamentals"},{"depth":3,"slug":"containerization-and-orchestration","text":"Containerization and orchestration"},{"depth":3,"slug":"cloud-platforms","text":"Cloud platforms"},{"depth":3,"slug":"infrastructure-as-code-iac","text":"Infrastructure as Code (IaC)"},{"depth":2,"slug":"how-to-become-a-devops-engineer","text":"How to become a DevOps Engineer"},{"depth":3,"slug":"step-1-learn-a-programming-language","text":"Step 1: Learn a programming language"},{"depth":3,"slug":"step-2-get-comfortable-with-linux-and-the-terminal","text":"Step 2: Get comfortable with Linux and the terminal"},{"depth":3,"slug":"step-3-version-control-and-code-hosting-platforms","text":"Step 3: Version control and code hosting platforms"},{"depth":3,"slug":"step-4-networking-fundamentals","text":"Step 4: Networking fundamentals"},{"depth":3,"slug":"step-5-containerization","text":"Step 5: Containerization"},{"depth":3,"slug":"step-6-cloud-platform","text":"Step 6: Cloud platform"},{"depth":3,"slug":"step-7-continuous-integration-and-delivery","text":"Step 7: Continuous integration and delivery"},{"depth":2,"slug":"devops-engineers-mindset","text":"DevOps Engineer’s mindset"},{"depth":3,"slug":"automation","text":"Automation"},{"depth":3,"slug":"risk-awareness","text":"Risk awareness"},{"depth":3,"slug":"systems-thinking","text":"Systems thinking"},{"depth":3,"slug":"continuous-learning","text":"Continuous learning"},{"depth":2,"slug":"who-can-become-a-devops-engineer","text":"Who can become a DevOps Engineer?"},{"depth":2,"slug":"what-next","text":"What next?"}];
				}

				const Content$p = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$p;
					content.file = file$p;
					content.url = url$p;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$p)}`;
				});

const __vite_glob_0_20 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$p,
	compiledContent: compiledContent$p,
	default: Content$p,
	file: file$p,
	frontmatter: frontmatter$p,
	getHeadings: getHeadings$p,
	rawContent: rawContent$p,
	url: url$p
}, Symbol.toStringTag, { value: 'Module' }));

const html$o = "<p>Given below is the demonstration of a sample production environment for a web application that consists of two different components, application server and database server.</p>\n<p><img src=\"https://i.imgur.com/nBJDuVO.png\" alt=\"\"></p>\n<p>Application server has both a public and private IP address. It is accessible from the internet. Database server has only a private IP address and is accessible only from the application server.</p>\n<p>It is a common practice to have this setup due to security reasons. This is done to prevent unauthorized access to the database server.</p>\n<h2 id=\"what-is-a-jump-server\">What is a Jump Server?</h2>\n<p>A jump server is a server that is used to access other servers. It is also known as a bastion host. It is a server that is accessible from the internet and is used to access other servers that are not accessible from the internet.</p>\n<p>In the above example, the application server is called the jump server.</p>\n<p>For example, you might have this infrastructure on AWS, where you have a custom VPC with two subnets.</p>\n<ul>\n<li><strong>Public Subnet:</strong> Outside world can access</li>\n<li><strong>Private Subnet:</strong> Only accessible from within the VPC</li>\n</ul>\n<p>Let’s say that the application server is in the public subnet and the database server is in the private subnet.</p>\n<blockquote>\n<p>If you want to learn more about AWS VPC, check out this <a href=\"https://cs.fyi/guide/up-and-running-with-aws-vpc\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">detailed guide about AWS VPC</a>, Subnets and everything else you need to know about AWS VPC.</p>\n</blockquote>\n<blockquote>\n<p>Also, have a look at <a href=\"https://cs.fyi/guide/up-and-running-with-aws-ec2\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">this guide on AWS EC2 instances</a> which covers all the important concepts about EC2 instances and how to launch them.</p>\n</blockquote>\n<p>We can easily SSH into the application server from the internet i.e.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span>\n<span class=\"line\"></span></code></pre>\n<p>But the database server doesn’t have a public IP address. So, we can’t SSH into it from the internet. For example, following won’t work</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6272A4\"># Won't work because the IP address is private</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now if we have to SSH into the database server, we have to first SSH into the application server and then SSH into the database server from there. Because the application server, being in the same VPC, can access the database server.</p>\n<h2 id=\"lets-try-it-out\">Let’s try it Out</h2>\n<p>Let’s first SSH into the application server:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Once we are inside the application server, let’s try to SSH into the database server:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We have an error:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Warning: Identity file /home/ubuntu/.ssh/mykey.pem not accessible: No such file or directory.</span></span>\n<span class=\"line\"><span>ubuntu@192.168.1.0: Permission denied (publickey).</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>What happened? The reason is that the private key is not present on the application server i.e. <code>~/.ssh/mykey.pem</code>. Now, there are two ways to solve this problem.</p>\n<h3 id=\"solution-1---copy-the-private-key-to-server\">Solution 1 - Copy the Private Key to Server</h3>\n<p>We can copy the private key from our local machine to the application server and use it there to access the database server. You can do that by running the following command on your local machine:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">scp</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> path/to/key.pem</span><span style=\"color:#F1FA8C\"> examplefile</span><span style=\"color:#F1FA8C\"> yourusername@yourserver:/home/yourusername/</span></span>\n<span class=\"line\"></span></code></pre>\n<p>i.e. in our case it will be</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">scp</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67:/home/ubuntu/</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#   --------^---------- -------^-------- ----^--- ----^----- ----^--------</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#      key file path      file to copy     user      host    path to copy</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now we can SSH into the application server and use the private key copied at <code>/home/ubuntu/mykey.pem</code> to access the database server.</p>\n<p>The issue with this solution is that if our application server is compromised, the attacker will have access to our private key and can access the database server.</p>\n<h3 id=\"solution-2---use-ssh-agent-forwarding\">Solution 2 - Use SSH Agent Forwarding</h3>\n<p>The second solution is to use SSH agent forwarding. SSH agent forwarding is a technique that allows you to access a server that is not accessible from the internet. Follow these steps to set up the SSH agent forwarding:</p>\n<p>Add the private key (.pem file) that we use to connect to the application server to our local SSH agen:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh-add</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now if you run <code>ssh-add -l</code> you will see the key added to the agent:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>2048 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx path/to/key.pem (RSA)</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>Now let’s SSH into the application server using the following command</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -A</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#  ^^^ -A flag is used to enable agent forwarding</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Once you have SSHed into the application server, you can SSH into the database server simply by using the following command:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Voila! You have successfully SSHed into the database server from the application server.</p>\n<h4 id=\"summarized-steps\">Summarized Steps</h4>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6272A4\"># Add the private key to the local SSH agent</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh-add</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\"># SSH into the application server using the private key</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -A</span><span style=\"color:#BD93F9\"> -i</span><span style=\"color:#F1FA8C\"> ~/.ssh/mykey.pem</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\"># you don't need to specify the private key here because it is already added to the SSH agent, so you can simply use the following command</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -A</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\"># SSH into the database server from the application server</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now, we can even have a single command to SSH into the database server without first having to SSH int the application server. We can do that by using the <code>-J</code> flag which is used to specify the jump server.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#BD93F9\"> -A</span><span style=\"color:#BD93F9\"> -J</span><span style=\"color:#F1FA8C\"> ec2-user@3.112.5.67</span><span style=\"color:#F1FA8C\"> ec2-user@192.168.1.0</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#         -------^----------- --------^-----------</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">#            jump server          destination</span></span>\n<span class=\"line\"></span></code></pre>\n<h4 id=\"simplifying-the-ssh-command\">Simplifying the SSH Command</h4>\n<p>We can simplify this even further by adding these host entries to our <code>~/.ssh/config</code> file. Open the file in your favorite text editor and add the following lines:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">Host</span><span style=\"color:#F1FA8C\"> app</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  HostName</span><span style=\"color:#BD93F9\"> 3.112.5.67</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  User</span><span style=\"color:#F1FA8C\"> ec2-user</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  Port</span><span style=\"color:#BD93F9\"> 22</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  IdentityFile</span><span style=\"color:#F1FA8C\"> /Users/yourusername/.ssh/mykey.pem</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  ForwardAgent</span><span style=\"color:#F1FA8C\"> yes</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">Host</span><span style=\"color:#F1FA8C\"> db</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  HostName</span><span style=\"color:#BD93F9\"> 192.168.1.0</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  User</span><span style=\"color:#F1FA8C\"> ec2-user</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  Port</span><span style=\"color:#BD93F9\"> 22</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  ProxyJump</span><span style=\"color:#F1FA8C\"> app</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now we can SSH into the application or database server simply by running the following commands on your local machine:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6272A4\"># SSH into the application server</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#F1FA8C\"> app</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\"># SSH into the database server</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">ssh</span><span style=\"color:#F1FA8C\"> db</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this article, we learned about the jump server and how to use SSH agent forwarding to access a server that is not accessible from the internet. We also learned how to simplify the SSH command by adding host entries to the <code>~/.ssh/config</code> file.</p>";

				const frontmatter$o = {"title":"Jump Servers: What, Why and How","description":"Learn what is a Jump Server and how to set it up for SSH access.","authorId":"kamran","seo":{"title":"Jump Servers: What, Why and How - roadmap.sh","description":"Learn what is a Jump Server and how to set it up for SSH access."},"isNew":false,"type":"textual","date":"2023-03-20T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$o = "/workspaces/developer-roadmap/src/data/guides/how-to-setup-a-jump-server.md";
				const url$o = undefined;
				function rawContent$o() {
					return "\nGiven below is the demonstration of a sample production environment for a web application that consists of two different components, application server and database server.\n\n![](https://i.imgur.com/nBJDuVO.png)\n\nApplication server has both a public and private IP address. It is accessible from the internet. Database server has only a private IP address and is accessible only from the application server.\n\nIt is a common practice to have this setup due to security reasons. This is done to prevent unauthorized access to the database server.\n\n## What is a Jump Server?\n\nA jump server is a server that is used to access other servers. It is also known as a bastion host. It is a server that is accessible from the internet and is used to access other servers that are not accessible from the internet.\n\nIn the above example, the application server is called the jump server.\n\nFor example, you might have this infrastructure on AWS, where you have a custom VPC with two subnets.\n\n- **Public Subnet:** Outside world can access\n- **Private Subnet:** Only accessible from within the VPC\n\nLet's say that the application server is in the public subnet and the database server is in the private subnet.\n\n> If you want to learn more about AWS VPC, check out this [detailed guide about AWS VPC](https://cs.fyi/guide/up-and-running-with-aws-vpc), Subnets and everything else you need to know about AWS VPC.\n\n> Also, have a look at [this guide on AWS EC2 instances](https://cs.fyi/guide/up-and-running-with-aws-ec2) which covers all the important concepts about EC2 instances and how to launch them.\n\nWe can easily SSH into the application server from the internet i.e.\n\n```bash\nssh -i ~/.ssh/mykey.pem ec2-user@3.112.5.67\n```\n\nBut the database server doesn't have a public IP address. So, we can't SSH into it from the internet. For example, following won't work\n\n```bash\n# Won't work because the IP address is private\nssh -i ~/.ssh/mykey.pem ec2-user@192.168.1.0\n```\n\nNow if we have to SSH into the database server, we have to first SSH into the application server and then SSH into the database server from there. Because the application server, being in the same VPC, can access the database server.\n\n## Let's try it Out\n\nLet's first SSH into the application server:\n\n```bash\nssh -i ~/.ssh/mykey.pem ec2-user@3.112.5.67\n```\n\nOnce we are inside the application server, let's try to SSH into the database server:\n\n```bash\nssh -i ~/.ssh/mykey.pem ec2-user@192.168.1.0\n```\n\nWe have an error:\n\n```\nWarning: Identity file /home/ubuntu/.ssh/mykey.pem not accessible: No such file or directory.\nubuntu@192.168.1.0: Permission denied (publickey).\n```\n\nWhat happened? The reason is that the private key is not present on the application server i.e. `~/.ssh/mykey.pem`. Now, there are two ways to solve this problem.\n\n### Solution 1 - Copy the Private Key to Server\n\nWe can copy the private key from our local machine to the application server and use it there to access the database server. You can do that by running the following command on your local machine:\n\n```bash\nscp -i path/to/key.pem examplefile yourusername@yourserver:/home/yourusername/\n```\n\ni.e. in our case it will be\n\n```bash\nscp -i ~/.ssh/mykey.pem ~/.ssh/mykey.pem ec2-user@3.112.5.67:/home/ubuntu/\n#   --------^---------- -------^-------- ----^--- ----^----- ----^--------\n#      key file path      file to copy     user      host    path to copy\n```\n\nNow we can SSH into the application server and use the private key copied at `/home/ubuntu/mykey.pem` to access the database server.\n\nThe issue with this solution is that if our application server is compromised, the attacker will have access to our private key and can access the database server.\n\n### Solution 2 - Use SSH Agent Forwarding\n\nThe second solution is to use SSH agent forwarding. SSH agent forwarding is a technique that allows you to access a server that is not accessible from the internet. Follow these steps to set up the SSH agent forwarding:\n\nAdd the private key (.pem file) that we use to connect to the application server to our local SSH agen:\n\n```bash\nssh-add ~/.ssh/mykey.pem\n```\n\nNow if you run `ssh-add -l` you will see the key added to the agent:\n\n```\n2048 SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx path/to/key.pem (RSA)\n```\n\nNow let's SSH into the application server using the following command\n\n```bash\nssh -A -i ~/.ssh/mykey.pem ec2-user@3.112.5.67\n#  ^^^ -A flag is used to enable agent forwarding\n```\n\nOnce you have SSHed into the application server, you can SSH into the database server simply by using the following command:\n\n```bash\nssh ec2-user@192.168.1.0\n```\n\nVoila! You have successfully SSHed into the database server from the application server.\n\n#### Summarized Steps\n\n```bash\n# Add the private key to the local SSH agent\nssh-add ~/.ssh/mykey.pem\n\n# SSH into the application server using the private key\nssh -A -i ~/.ssh/mykey.pem ec2-user@3.112.5.67\n# you don't need to specify the private key here because it is already added to the SSH agent, so you can simply use the following command\nssh -A ec2-user@3.112.5.67\n\n# SSH into the database server from the application server\nssh ec2-user@192.168.1.0\n```\n\nNow, we can even have a single command to SSH into the database server without first having to SSH int the application server. We can do that by using the `-J` flag which is used to specify the jump server.\n\n```bash\nssh -A -J ec2-user@3.112.5.67 ec2-user@192.168.1.0\n#         -------^----------- --------^-----------\n#            jump server          destination\n```\n\n#### Simplifying the SSH Command\n\nWe can simplify this even further by adding these host entries to our `~/.ssh/config` file. Open the file in your favorite text editor and add the following lines:\n\n```bash\nHost app\n  HostName 3.112.5.67\n  User ec2-user\n  Port 22\n  IdentityFile /Users/yourusername/.ssh/mykey.pem\n  ForwardAgent yes\n\nHost db\n  HostName 192.168.1.0\n  User ec2-user\n  Port 22\n  ProxyJump app\n```\n\nNow we can SSH into the application or database server simply by running the following commands on your local machine:\n\n```bash\n# SSH into the application server\nssh app\n\n# SSH into the database server\nssh db\n```\n\n## Conclusion\n\nIn this article, we learned about the jump server and how to use SSH agent forwarding to access a server that is not accessible from the internet. We also learned how to simplify the SSH command by adding host entries to the `~/.ssh/config` file.\n";
				}
				function compiledContent$o() {
					return html$o;
				}
				function getHeadings$o() {
					return [{"depth":2,"slug":"what-is-a-jump-server","text":"What is a Jump Server?"},{"depth":2,"slug":"lets-try-it-out","text":"Let’s try it Out"},{"depth":3,"slug":"solution-1---copy-the-private-key-to-server","text":"Solution 1 - Copy the Private Key to Server"},{"depth":3,"slug":"solution-2---use-ssh-agent-forwarding","text":"Solution 2 - Use SSH Agent Forwarding"},{"depth":4,"slug":"summarized-steps","text":"Summarized Steps"},{"depth":4,"slug":"simplifying-the-ssh-command","text":"Simplifying the SSH Command"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$o = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$o;
					content.file = file$o;
					content.url = url$o;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$o)}`;
				});

const __vite_glob_0_21 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$o,
	compiledContent: compiledContent$o,
	default: Content$o,
	file: file$o,
	frontmatter: frontmatter$o,
	getHeadings: getHeadings$o,
	rawContent: rawContent$o,
	url: url$o
}, Symbol.toStringTag, { value: 'Module' }));

const html$n = "<p>Our last guide was about the <a href=\"/guides/basics-of-authentication\">basics of authentication</a>, where we discussed authentication, authorization, types of authentication, authentication factors, authentication strategies, and so on.</p>\n<p>In this guide today, we will be learning about basic authentication, and we will see how we can implement Basic Authentication in Node.js. We have a <a href=\"/guides/basic-authentication\">visual guide on the basic authentication</a> and an illustrative video, watch the video below or continue reading:</p>\n<iframe class=\"w-full aspect-video mb-5\" src=\"https://www.youtube.com/embed/mwccHwUn7Gc\" title=\"HTTP Basic Authentication\"></iframe>\n<h2 id=\"what-is-basic-authentication\">What is Basic Authentication?</h2>\n<p>Given the name “Basic Authentication”, you should not confuse Basic Authentication with the standard username and password authentication. Basic authentication is a part of the HTTP specification, and the details can be <a href=\"https://www.rfc-editor.org/rfc/rfc7617.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">found in the RFC7617</a>.</p>\n<p>Because it is a part of the HTTP specifications, all the browsers have native support for “HTTP Basic Authentication”. Given below is the screenshot from the implementation in Google Chrome.</p>\n<p><img src=\"/guides/basic-authentication/chrome-basic-auth.png\" alt=\"Chrome Basic Authentication\"></p>\n<h2 id=\"how-does-it-work\">How does it Work?</h2>\n<p>Now that we know what basic authentication is, the question is, how does it work? The answer is: it is controlled by the response of the server.</p>\n<h3 id=\"step-1\">Step 1</h3>\n<p>When the browser first requests the server, the server tries to check the availability of the <code>Authorization</code> header in the request. Because it is the first request, no <code>Authorization</code> header is found in the request. So the server responds with the <code>401 Unauthorized</code> response code and also sends the <code>WWW-Authenticate</code> header with the value set to <code>Basic</code>, which tells the browser that it needs to trigger the basic authentication flow.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>401 Unauthorized</span></span>\n<span class=\"line\"><span>WWW-Authenticate: Basic realm='user_pages'</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>If you notice the response, we have an additional parameter called <code>realm</code>, which is just a value assigned to a group of pages that share the same credentials.</p>\n<p>The browser might use Realm to cache the credential. In the future, when there is an authentication failure browser will check if it has the credentials in the cache for the given realm of the domain, and it may use the same credentials.</p>\n<h2 id=\"step-2\">Step 2</h2>\n<p>Upon receiving the response from the server, the browser will notice the <code>WWW-Authenticate</code> header and will show the authentication popup.</p>\n<p><img src=\"/guides/basic-authentication/chrome-basic-auth.png\" alt=\"Chrome Basic Authentication\"></p>\n<h2 id=\"step-3\">Step 3</h2>\n<p>After the user submits the credentials through this authentication popup, the browser will automatically encode the credentials using the <code>base64</code> encoding and send them in the <code>Authorization</code> header of the same request.</p>\n<h3 id=\"step-4\">Step 4</h3>\n<p>Upon receiving the request, the server will decode and verify the credentials. If the credentials are valid, the server will send the response to the client.</p>\n<p>So that is how Basic Authentication works.</p>\n<h2 id=\"basic-authentication-in-nodejs\">Basic Authentication in Node.js</h2>\n<p>I have prepared the sample project in Node.js, which can be found on GitHub <a href=\"https://github.com/kamranahmedse/node-basic-auth-example\" target=\"_blank\">kamranahmedse/node-basic-auth-example</a>. If you look at the codebase of the project, we have two files <code>index.js</code> with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6272A4\">// src/index.js</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> express </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">express</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> authMiddleware </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./auth</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> app </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> express</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> port </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 3000</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// This middleware is where we have the</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// basic authentication implementation</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">use</span><span style=\"color:#F8F8F2\">(authMiddleware);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">get</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, (</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Hello World!</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">listen</span><span style=\"color:#F8F8F2\">(port, () </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#F1FA8C\">`App running @ http://localhost:</span><span style=\"color:#FF79C6\">${</span><span style=\"color:#F8F8F2\">port</span><span style=\"color:#FF79C6\">}</span><span style=\"color:#F1FA8C\">`</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, it’s just a regular express server. <code>authMiddleware</code> registration is where we have all the code for “Basic Authentication”. Here is the content of the middleware:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#6272A4\">// src/auth.js</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> base64 </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">base-64</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">function</span><span style=\"color:#50FA7B\"> decodeCredentials</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">authHeader</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // ...</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">next</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // Take the header and decode credentials</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  const</span><span style=\"color:#F8F8F2\"> [username, password] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> decodeCredentials</span><span style=\"color:#F8F8F2\">(</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    req.headers.authorization </span><span style=\"color:#FF79C6\">||</span><span style=\"color:#E9F284\"> ''</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // Verify the credentials</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  if</span><span style=\"color:#F8F8F2\"> (username </span><span style=\"color:#FF79C6\">===</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> &#x26;&#x26;</span><span style=\"color:#F8F8F2\"> password </span><span style=\"color:#FF79C6\">===</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#50FA7B\"> next</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">  // Respond with authenticate header on auth failure.</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">set</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">WWW-Authenticate</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Basic realm=\"user_pages\"</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">status</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">401</span><span style=\"color:#F8F8F2\">).</span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Authentication required.</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And that is how the basic authentication is implemented in Node.js.</p>";

				const frontmatter$n = {"title":"HTTP Basic Authentication","description":"Learn what is HTTP Basic Authentication and how to implement it in Node.js","authorId":"kamran","seo":{"title":"HTTP Basic Authentication - roadmap.sh","description":"Learn what is HTTP Basic Authentication and how to implement it in Node.js"},"isNew":false,"type":"textual","date":"2022-10-03T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$n = "/workspaces/developer-roadmap/src/data/guides/http-basic-authentication.md";
				const url$n = undefined;
				function rawContent$n() {
					return "\nOur last guide was about the [basics of authentication](/guides/basics-of-authentication), where we discussed authentication, authorization, types of authentication, authentication factors, authentication strategies, and so on.\n\nIn this guide today, we will be learning about basic authentication, and we will see how we can implement Basic Authentication in Node.js. We have a [visual guide on the basic authentication](/guides/basic-authentication) and an illustrative video, watch the video below or continue reading:\n\n<iframe class=\"w-full aspect-video mb-5\" src=\"https://www.youtube.com/embed/mwccHwUn7Gc\" title=\"HTTP Basic Authentication\"></iframe>\n\n## What is Basic Authentication?\n\nGiven the name \"Basic Authentication\", you should not confuse Basic Authentication with the standard username and password authentication. Basic authentication is a part of the HTTP specification, and the details can be [found in the RFC7617](https://www.rfc-editor.org/rfc/rfc7617.html).\n\nBecause it is a part of the HTTP specifications, all the browsers have native support for \"HTTP Basic Authentication\". Given below is the screenshot from the implementation in Google Chrome.\n\n![Chrome Basic Authentication](/guides/basic-authentication/chrome-basic-auth.png)\n\n## How does it Work?\n\nNow that we know what basic authentication is, the question is, how does it work? The answer is: it is controlled by the response of the server.\n\n### Step 1\n\nWhen the browser first requests the server, the server tries to check the availability of the `Authorization` header in the request. Because it is the first request, no `Authorization` header is found in the request. So the server responds with the `401 Unauthorized` response code and also sends the `WWW-Authenticate` header with the value set to `Basic`, which tells the browser that it needs to trigger the basic authentication flow.\n\n```\n401 Unauthorized\nWWW-Authenticate: Basic realm='user_pages'\n```\n\nIf you notice the response, we have an additional parameter called `realm`, which is just a value assigned to a group of pages that share the same credentials.\n\nThe browser might use Realm to cache the credential. In the future, when there is an authentication failure browser will check if it has the credentials in the cache for the given realm of the domain, and it may use the same credentials.\n\n## Step 2\n\nUpon receiving the response from the server, the browser will notice the `WWW-Authenticate` header and will show the authentication popup.\n\n![Chrome Basic Authentication](/guides/basic-authentication/chrome-basic-auth.png)\n\n## Step 3\n\nAfter the user submits the credentials through this authentication popup, the browser will automatically encode the credentials using the `base64` encoding and send them in the `Authorization` header of the same request.\n\n### Step 4\n\nUpon receiving the request, the server will decode and verify the credentials. If the credentials are valid, the server will send the response to the client.\n\nSo that is how Basic Authentication works.\n\n## Basic Authentication in Node.js\n\nI have prepared the sample project in Node.js, which can be found on GitHub [kamranahmedse/node-basic-auth-example](https://github.com/kamranahmedse/node-basic-auth-example). If you look at the codebase of the project, we have two files `index.js` with the following content:\n\n```javascript\n// src/index.js\n\nconst express = require('express');\nconst authMiddleware = require('./auth');\n\nconst app = express();\nconst port = 3000;\n\n// This middleware is where we have the\n// basic authentication implementation\napp.use(authMiddleware);\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`App running @ http://localhost:${port}`);\n});\n```\n\nAs you can see, it's just a regular express server. `authMiddleware` registration is where we have all the code for \"Basic Authentication\". Here is the content of the middleware:\n\n```javascript\n// src/auth.js\nconst base64 = require('base-64');\n\nfunction decodeCredentials(authHeader) {\n  // ...\n}\n\nmodule.exports = function (req, res, next) {\n  // Take the header and decode credentials\n  const [username, password] = decodeCredentials(\n    req.headers.authorization || ''\n  );\n\n  // Verify the credentials\n  if (username === 'admin' && password === 'admin') {\n    return next();\n  }\n\n  // Respond with authenticate header on auth failure.\n  res.set('WWW-Authenticate', 'Basic realm=\"user_pages\"');\n  res.status(401).send('Authentication required.');\n};\n```\n\nAnd that is how the basic authentication is implemented in Node.js.\n";
				}
				function compiledContent$n() {
					return html$n;
				}
				function getHeadings$n() {
					return [{"depth":2,"slug":"what-is-basic-authentication","text":"What is Basic Authentication?"},{"depth":2,"slug":"how-does-it-work","text":"How does it Work?"},{"depth":3,"slug":"step-1","text":"Step 1"},{"depth":2,"slug":"step-2","text":"Step 2"},{"depth":2,"slug":"step-3","text":"Step 3"},{"depth":3,"slug":"step-4","text":"Step 4"},{"depth":2,"slug":"basic-authentication-in-nodejs","text":"Basic Authentication in Node.js"}];
				}

				const Content$n = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$n;
					content.file = file$n;
					content.url = url$n;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$n)}`;
				});

const __vite_glob_0_22 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$n,
	compiledContent: compiledContent$n,
	default: Content$n,
	file: file$n,
	frontmatter: frontmatter$n,
	getHeadings: getHeadings$n,
	rawContent: rawContent$n,
	url: url$n
}, Symbol.toStringTag, { value: 'Module' }));

const html$m = "<p>As users, we easily get frustrated by the buffering of videos, the images that take seconds to load, and pages that got stuck because the content is being loaded. Loading the resources from some cache is much faster than fetching the same from the originating server. It reduces latency, speeds up the loading of resources, decreases the load on the server, cuts down the bandwidth costs etc.</p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>What is a web cache? It is something that sits somewhere between the client and the server, continuously looking at the requests and their responses, looking for any responses that can be cached. So that there is less time consumed when the same request is made again.</p>\n<p><img src=\"https://i.imgur.com/mJYVvTh.png\" alt=\"Web Cache\"></p>\n<blockquote>\n<p>Note that this image is just to give you an idea. Depending upon the type of cache, the place where it is implemented could vary. More on this later.</p>\n</blockquote>\n<p>Before we get into further details, let me give you an overview of the terms that will be used, further in the article</p>\n<ul>\n<li><strong>Client</strong> could be your browser or any application requesting the server for some resource</li>\n<li><strong>Origin Server</strong>, the source of truth, houses all the content required by the client and is responsible for fulfilling the client’s requests.</li>\n<li><strong>Stale Content</strong> is cached but expired content</li>\n<li><strong>Fresh Content</strong> is the content available in the cache that hasn’t expired yet</li>\n<li><strong>Cache Validation</strong> is the process of contacting the server to check the validity of the cached content and get it updated for when it is going to expire</li>\n<li><strong>Cache Invalidation</strong> is the process of removing any stale content available in the cache</li>\n</ul>\n<p><img src=\"https://i.imgur.com/9MjlzvW.png\" alt=\"Web Cache\"></p>\n<h3 id=\"caching-locations\">Caching Locations</h3>\n<p>Web cache can be shared or private depending upon the location where it exists. Here is the list of different caching locations</p>\n<ul>\n<li><a href=\"#browser-cache\">Browser Cache</a></li>\n<li><a href=\"#proxy-cache\">Proxy Cache</a></li>\n<li><a href=\"#reverse-proxy-cache\">Reverse Proxy Cache</a></li>\n</ul>\n<h4 id=\"browser-cache\">Browser Cache</h4>\n<p>You might have noticed that when you click the back button in your browser it takes less time to load the page than the time that it took during the first load; this is the browser cache in play. Browser cache is the most common location for caching and browsers usually reserve some space for it.</p>\n<p><img src=\"https://i.imgur.com/mJYVvTh.png\" alt=\"Web Cache\"></p>\n<p>A browser cache is limited to just one user and unlike other caches, it can store the “private” responses. More on it later.</p>\n<h4 id=\"proxy-cache\">Proxy Cache</h4>\n<p>Unlike browser cache which serves a single user, proxy caches may serve hundreds of different users accessing the same content. They are usually implemented on a broader level by ISPs or any other independent entities for example.</p>\n<p><img src=\"https://i.imgur.com/3mj6e1O.png\" alt=\"Proxy Cache\"></p>\n<h4 id=\"reverse-proxy-cache\">Reverse Proxy Cache</h4>\n<p>A Reverse proxy cache or surrogate cache is implemented close to the origin servers in order to reduce the load on the server. Unlike proxy caches which are implemented by ISPs etc to reduce the bandwidth usage in a network, surrogates or reverse proxy caches are implemented near the origin servers by the server administrators to reduce the load on the server.</p>\n<p><img src=\"https://i.imgur.com/Eg4Cru3.png\" alt=\"Reverse Proxy Cache\"></p>\n<p>Although you can control the reverse proxy caches (since it is implemented by you on your server) you can not avoid or control browser and proxy caches. And if your website is not configured to use these caches properly, it will still be cached using whatever defaults are set on these caches.</p>\n<h3 id=\"caching-headers\">Caching Headers</h3>\n<p>So, how do we control the web cache? Whenever the server emits some response, it is accompanied by some HTTP headers to guide the caches on whether and how to cache this response. The content provider is the one that has to make sure to return proper HTTP headers to force the caches on how to cache the content.</p>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#caching-locations\">Caching Locations</a>\n<ul>\n<li><a href=\"#browser-cache\">Browser Cache</a></li>\n<li><a href=\"#proxy-cache\">Proxy Cache</a></li>\n<li><a href=\"#reverse-proxy-cache\">Reverse Proxy Cache</a></li>\n</ul>\n</li>\n<li><a href=\"#caching-headers\">Caching Headers</a>\n<ul>\n<li><a href=\"#expires\">Expires</a></li>\n<li><a href=\"#pragma\">Pragma</a></li>\n<li><a href=\"#cache-control\">Cache-Control</a>\n<ul>\n<li><a href=\"#private\">private</a></li>\n<li><a href=\"#public\">public</a></li>\n<li><a href=\"#no-store\">no-store</a></li>\n<li><a href=\"#no-cache\">no-cache</a></li>\n<li><a href=\"#max-age-seconds\">max-age: seconds</a></li>\n<li><a href=\"#s-maxage-seconds\">s-maxage: seconds</a></li>\n<li><a href=\"#must-revalidate\">must-revalidate</a></li>\n<li><a href=\"#proxy-revalidate\">proxy-revalidate</a></li>\n<li><a href=\"#mixing-values\">Mixing Values</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#validators\">Validators</a>\n<ul>\n<li><a href=\"#etag\">ETag</a></li>\n<li><a href=\"#last-modified\">Last-Modified</a></li>\n</ul>\n</li>\n<li><a href=\"#where-do-i-start\">Where do I start?</a>\n<ul>\n<li><a href=\"#utilizing-server\">Utilizing Server</a></li>\n<li><a href=\"#caching-recommendations\">Caching Recommendations</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"expires\">Expires</h4>\n<p>Before HTTP/1.1 and the introduction of <code>Cache-Control</code>, there was an <code>Expires</code> header which is simply a timestamp telling the caches how long should some content be considered fresh. A possible value to this header is the absolute expiry date; where a date has to be in GMT. Below is the sample header</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Expires: Mon, 13 Mar 2017 12:22:00 GMT</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It should be noted that the date cannot be more than a year and if the date format is wrong, the content will be considered stale. Also, the clock on the cache has to be in sync with the clock on the server, otherwise, the desired results might not be achieved.</p>\n<p>Although the <code>Expires</code> header is still valid and is supported widely by the caches, preference should be given to HTTP/1.1 successor of it i.e. <code>Cache-Control</code>.</p>\n<h4 id=\"pragma\">Pragma</h4>\n<p>Another one from the old, pre HTTP/1.1 days, is <code>Pragma</code>. Everything that it could do is now possible using the cache-control header given below. However, one thing I would like to point out about it is, that you might see <code>Pragma: no-cache</code> being used here and there in hopes of stopping the response from being cached. It might not necessarily work; as HTTP specification discusses it in the request headers and there is no mention of it in the response headers. Rather <code>Cache-Control</code> header should be used to control the caching.</p>\n<h4 id=\"cache-control\">Cache-Control</h4>\n<p>Cache-Control specifies how long and in what manner should the content be cached. This family of headers was introduced in HTTP/1.1 to overcome the limitations of the <code>Expires</code> header.</p>\n<p>Value for the <code>Cache-Control</code> header is composite i.e. it can have multiple directive/values. Let’s look at the possible values that this header may contain.</p>\n<h5 id=\"private\">private</h5>\n<p>Setting the cache to <code>private</code> means that the content will not be cached in any of the proxies and it will only be cached by the client (i.e. browser)</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: private</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Having said that, don’t let it fool you into thinking that setting this header will make your data any secure; you still have to use SSL for that purpose.</p>\n<h5 id=\"public\">public</h5>\n<p>If set to <code>public</code>, apart from being cached by the client, it can also be cached by the proxies; serving many other users</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: public</span></span>\n<span class=\"line\"></span></code></pre>\n<h5 id=\"no-store\">no-store</h5>\n<p><strong><code>no-store</code></strong> specifies that the content is not to be cached by any of the caches</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: no-store</span></span>\n<span class=\"line\"></span></code></pre>\n<h5 id=\"no-cache\">no-cache</h5>\n<p><strong><code>no-cache</code></strong> indicates that the cache can be maintained but the cached content is to be re-validated (using <code>ETag</code> for example) from the server before being served. That is, there is still a request to server but for validation and not to download the cached content.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: max-age=3600, no-cache, public</span></span>\n<span class=\"line\"></span></code></pre>\n<h5 id=\"max-age-seconds\">max-age: seconds</h5>\n<p><strong><code>max-age</code></strong> specifies the number of seconds for which the content will be cached. For example, if the <code>cache-control</code> looks like below:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: max-age=3600, public</span></span>\n<span class=\"line\"></span></code></pre>\n<p>it would mean that the content is publicly cacheable and will be considered stale after 60 minutes</p>\n<h5 id=\"s-maxage-seconds\">s-maxage: seconds</h5>\n<p><strong><code>s-maxage</code></strong> here <code>s-</code> prefix stands for shared. This directive specifically targets the shared caches. Like <code>max-age</code> it also gets the number of seconds for which something is to be cached. If present, it will override <code>max-age</code> and <code>expires</code> headers for shared caching.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: s-maxage=3600, public</span></span>\n<span class=\"line\"></span></code></pre>\n<h5 id=\"must-revalidate\">must-revalidate</h5>\n<p><strong><code>must-revalidate</code></strong> it might happen sometimes that if you have network problems and the content cannot be retrieved from the server, the browser may serve stale content without validation. <code>must-revalidate</code> avoids that. If this directive is present, it means that stale content cannot be served in any case and the data must be re-validated from the server before serving.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: max-age=3600, public, must-revalidate</span></span>\n<span class=\"line\"></span></code></pre>\n<h5 id=\"proxy-revalidate\">proxy-revalidate</h5>\n<p><strong><code>proxy-revalidate</code></strong> is similar to <code>must-revalidate</code> but it specifies the same for shared or proxy caches. In other words <code>proxy-revalidate</code> is to <code>must-revalidate</code> as <code>s-maxage</code> is to <code>max-age</code>. But why did they not call it <code>s-revalidate</code>?. I have no idea why, if you have any clue please leave a comment below.</p>\n<h5 id=\"mixing-values\">Mixing Values</h5>\n<p>You can combine these directives in different ways to achieve different caching behaviors, however <code>no-cache/no-store</code> and <code>public/private</code> are mutually exclusive.</p>\n<p>If you specify both <code>no-store</code> and <code>no-cache</code>, <code>no-store</code> will be given precedence over <code>no-cache</code>.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">; If specified both Cache-Control: no-store, no-cache ; Below will be considered</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Cache-Control: no-store</span></span>\n<span class=\"line\"></span></code></pre>\n<p>For <code>private/public</code>, for any unauthenticated requests cache is considered <code>public</code> and for any authenticated ones cache is considered <code>private</code>.</p>\n<h3 id=\"validators\">Validators</h3>\n<p>Up until now we only discussed how the content is cached and how long the cached content is to be considered fresh but we did not discuss how the client does the validation from the server. Below we discuss the headers used for this purpose.</p>\n<h4 id=\"etag\">ETag</h4>\n<p>Etag or “entity tag” was introduced in HTTP/1.1 specs. Etag is just a unique identifier that the server attaches with some resource. This ETag is later on used by the client to make conditional HTTP requests stating <code>\"give me this resource if ETag is not same as the ETag that I have\"</code> and the content is downloaded only if the etags do not match.</p>\n<p>Method by which ETag is generated is not specified in the HTTP docs and usually some collision-resistant hash function is used to assign etags to each version of a resource. There could be two types of etags i.e. strong and weak</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">ETag: \"j82j8232ha7sdh0q2882\" - Strong Etag ETag: W/\"j82j8232ha7sdh0q2882\" - Weak</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Etag (prefixed with `W/`)</span></span>\n<span class=\"line\"></span></code></pre>\n<p>A strong validating ETag means that two resources are <strong>exactly</strong> same and there is no difference between them at all. While a weak ETag means that two resources although not strictly the same but could be considered the same. Weak etags might be useful for dynamic content, for example.</p>\n<p>Now you know what etags are but how does the browser make this request? by making a request to server while sending the available Etag in <code>If-None-Match</code> header.</p>\n<p>Consider the scenario, you opened a web page which loaded a logo image with caching period of 60 seconds and ETag of <code>abc123xyz</code>. After about 30 minutes you reload the page, browser will notice that the logo which was fresh for 60 seconds is now stale; it will trigger a request to server, sending the ETag of the stale logo image in <code>if-none-match</code> header</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">If-None-Match: \"abc123xyz\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Server will then compare this ETag with the ETag of the current version of resource. If both etags are matched, server will send back the response of <code>304 Not Modified</code> which will tell the client that the copy that it has is still good and it will be considered fresh for another 60 seconds. If both the etags do not match i.e. the logo has likely changed and client will be sent the new logo which it will use to replace the stale logo that it has.</p>\n<h4 id=\"last-modified\">Last-Modified</h4>\n<p>Server might include the <code>Last-Modified</code> header indicating the date and time at which some content was last modified on.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">Last-Modified: Wed, 15 Mar 2017 12:30:26 GMT</span></span>\n<span class=\"line\"></span></code></pre>\n<p>When the content gets stale, client will make a conditional request including the last modified date that it has inside the header called <code>If-Modified-Since</code> to server to get the updated <code>Last-Modified</code> date; if it matches the date that the client has, <code>Last-Modified</code> date for the content is updated to be considered fresh for another <code>n</code> seconds. If the received <code>Last-Modified</code> date does not match the one that the client has, content is reloaded from the server and replaced with the content that client has.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">If-Modified-Since: Wed, 15 Mar 2017 12:30:26 GMT</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You might be questioning now, what if the cached content has both the <code>Last-Modified</code> and <code>ETag</code> assigned to it? Well, in that case both are to be used i.e. there will not be any re-downloading of the resource if and only if <code>ETag</code> matches the newly retrieved one and so does the <code>Last-Modified</code> date. If either the <code>ETag</code> does not match or the <code>Last-Modified</code> is greater than the one from the server, content has to be downloaded again.</p>\n<h3 id=\"where-do-i-start\">Where do I start?</h3>\n<p>Now that we have got <em>everything</em> covered, let us put everything in perspective and see how you can use this information.</p>\n<h4 id=\"utilizing-server\">Utilizing Server</h4>\n<p>Before we get into the possible caching strategies , let me add the fact that most of the servers including Apache and Nginx allow you to implement your caching policy through the server so that you don’t have to juggle with headers in your code.</p>\n<p><strong>For example</strong>, if you are using Apache and you have your static content placed at <code>/static</code>, you can put below <code>.htaccess</code> file in the directory to make all the content in it be cached for an year using below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\"># Cache everything for an year Header set Cache-Control \"max-age=31536000,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">public\"</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You can further use <code>filesMatch</code> directive to add conditionals and use different caching strategy for different kinds of files e.g.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\"># Cache any images for one year</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">&#x3C;</span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">filesMatch</span><span> </span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">\".(png|jpg|jpeg|gif)$\"</span><span style=\"color:#F8F8F2\">></span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Header set Cache-Control \"max-age=31536000, public\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">&#x3C;/</span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">filesMatch</span><span style=\"color:#F8F8F2\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\"># Cache any CSS and JS files for a month</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">&#x3C;</span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">filesMatch</span><span> </span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">\".(css|js)$\"</span><span style=\"color:#F8F8F2\">></span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Header set Cache-Control \"max-age=2628000, public\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">&#x3C;/</span><span style=\"color:#FF5555;font-style:italic;text-decoration:underline\">filesMatch</span><span style=\"color:#F8F8F2\">></span></span>\n<span class=\"line\"></span></code></pre>\n<p>Or if you don’t want to use the <code>.htaccess</code> file you can modify Apache’s configuration file <code>http.conf</code>. Same goes for Nginx, you can add the caching information in the location or server block.</p>\n<h4 id=\"caching-recommendations\">Caching Recommendations</h4>\n<p>There is no golden rule or set standards about how your caching policy should look like, each of the application is different and you have to look and find what suits your application the best. However, just to give you a rough idea</p>\n<ul>\n<li>You can have aggressive caching (e.g. cache for an year) on any static content and use fingerprinted filenames (e.g. <code>style.ju2i90.css</code>) so that the cache is automatically rejected whenever the files are updated.\nAlso it should be noted that you should not cross the upper limit of one year as it <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">might not be honored</a></li>\n<li>Look and decide do you even need caching for any dynamic content, if yes how long it should be. For example, in case of some RSS feed of a blog there could be the caching of a few hours but there couldn’t be any caching for inventory items in an ERP.</li>\n<li>Always add the validators (preferably ETags) in your response.</li>\n<li>Pay attention while choosing the visibility (private or public) of the cached content. Make sure that you do not accidentally cache any user-specific or sensitive content in any public proxies. When in doubt, do not use cache at all.</li>\n<li>Separate the content that changes often from the content that doesn’t change that often (e.g. in javascript bundles) so that when it is updated it doesn’t need to make the whole cached content stale.</li>\n<li>Test and monitor the caching headers being served by your site. You can use the browser console or <code>curl -I http://some-url.com</code> for that purpose.</li>\n</ul>\n<p>And that about wraps it up. Stay tuned for more!</p>";

				const frontmatter$m = {"title":"HTTP Caching","description":"Everything you need to know about web caching","authorId":"kamran","seo":{"title":"HTTP Caching - roadmap.sh","description":"Everything you need to know about web caching"},"isNew":false,"type":"textual","date":"2018-11-29T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$m = "/workspaces/developer-roadmap/src/data/guides/http-caching.md";
				const url$m = undefined;
				function rawContent$m() {
					return "\nAs users, we easily get frustrated by the buffering of videos, the images that take seconds to load, and pages that got stuck because the content is being loaded. Loading the resources from some cache is much faster than fetching the same from the originating server. It reduces latency, speeds up the loading of resources, decreases the load on the server, cuts down the bandwidth costs etc.\n\n### Introduction\n\nWhat is a web cache? It is something that sits somewhere between the client and the server, continuously looking at the requests and their responses, looking for any responses that can be cached. So that there is less time consumed when the same request is made again.\n\n![Web Cache](https://i.imgur.com/mJYVvTh.png)\n\n> Note that this image is just to give you an idea. Depending upon the type of cache, the place where it is implemented could vary. More on this later.\n\nBefore we get into further details, let me give you an overview of the terms that will be used, further in the article\n\n- **Client** could be your browser or any application requesting the server for some resource\n- **Origin Server**, the source of truth, houses all the content required by the client and is responsible for fulfilling the client's requests.\n- **Stale Content** is cached but expired content\n- **Fresh Content** is the content available in the cache that hasn't expired yet\n- **Cache Validation** is the process of contacting the server to check the validity of the cached content and get it updated for when it is going to expire\n- **Cache Invalidation** is the process of removing any stale content available in the cache\n\n![Web Cache](https://i.imgur.com/9MjlzvW.png)\n\n### Caching Locations\n\nWeb cache can be shared or private depending upon the location where it exists. Here is the list of different caching locations\n\n- [Browser Cache](#browser-cache)\n- [Proxy Cache](#proxy-cache)\n- [Reverse Proxy Cache](#reverse-proxy-cache)\n\n#### Browser Cache\n\nYou might have noticed that when you click the back button in your browser it takes less time to load the page than the time that it took during the first load; this is the browser cache in play. Browser cache is the most common location for caching and browsers usually reserve some space for it.\n\n![Web Cache](https://i.imgur.com/mJYVvTh.png)\n\nA browser cache is limited to just one user and unlike other caches, it can store the \"private\" responses. More on it later.\n\n#### Proxy Cache\n\nUnlike browser cache which serves a single user, proxy caches may serve hundreds of different users accessing the same content. They are usually implemented on a broader level by ISPs or any other independent entities for example.\n\n![Proxy Cache](https://i.imgur.com/3mj6e1O.png)\n\n#### Reverse Proxy Cache\n\nA Reverse proxy cache or surrogate cache is implemented close to the origin servers in order to reduce the load on the server. Unlike proxy caches which are implemented by ISPs etc to reduce the bandwidth usage in a network, surrogates or reverse proxy caches are implemented near the origin servers by the server administrators to reduce the load on the server.\n\n![Reverse Proxy Cache](https://i.imgur.com/Eg4Cru3.png)\n\nAlthough you can control the reverse proxy caches (since it is implemented by you on your server) you can not avoid or control browser and proxy caches. And if your website is not configured to use these caches properly, it will still be cached using whatever defaults are set on these caches.\n\n### Caching Headers\n\nSo, how do we control the web cache? Whenever the server emits some response, it is accompanied by some HTTP headers to guide the caches on whether and how to cache this response. The content provider is the one that has to make sure to return proper HTTP headers to force the caches on how to cache the content.\n\n- [Introduction](#introduction)\n- [Caching Locations](#caching-locations)\n  - [Browser Cache](#browser-cache)\n  - [Proxy Cache](#proxy-cache)\n  - [Reverse Proxy Cache](#reverse-proxy-cache)\n- [Caching Headers](#caching-headers)\n  - [Expires](#expires)\n  - [Pragma](#pragma)\n  - [Cache-Control](#cache-control)\n    - [private](#private)\n    - [public](#public)\n    - [no-store](#no-store)\n    - [no-cache](#no-cache)\n    - [max-age: seconds](#max-age-seconds)\n    - [s-maxage: seconds](#s-maxage-seconds)\n    - [must-revalidate](#must-revalidate)\n    - [proxy-revalidate](#proxy-revalidate)\n    - [Mixing Values](#mixing-values)\n- [Validators](#validators)\n  - [ETag](#etag)\n  - [Last-Modified](#last-modified)\n- [Where do I start?](#where-do-i-start)\n  - [Utilizing Server](#utilizing-server)\n  - [Caching Recommendations](#caching-recommendations)\n\n#### Expires\n\nBefore HTTP/1.1 and the introduction of `Cache-Control`, there was an `Expires` header which is simply a timestamp telling the caches how long should some content be considered fresh. A possible value to this header is the absolute expiry date; where a date has to be in GMT. Below is the sample header\n\n```html\nExpires: Mon, 13 Mar 2017 12:22:00 GMT\n```\n\nIt should be noted that the date cannot be more than a year and if the date format is wrong, the content will be considered stale. Also, the clock on the cache has to be in sync with the clock on the server, otherwise, the desired results might not be achieved.\n\nAlthough the `Expires` header is still valid and is supported widely by the caches, preference should be given to HTTP/1.1 successor of it i.e. `Cache-Control`.\n\n#### Pragma\n\nAnother one from the old, pre HTTP/1.1 days, is `Pragma`. Everything that it could do is now possible using the cache-control header given below. However, one thing I would like to point out about it is, that you might see `Pragma: no-cache` being used here and there in hopes of stopping the response from being cached. It might not necessarily work; as HTTP specification discusses it in the request headers and there is no mention of it in the response headers. Rather `Cache-Control` header should be used to control the caching.\n\n#### Cache-Control\n\nCache-Control specifies how long and in what manner should the content be cached. This family of headers was introduced in HTTP/1.1 to overcome the limitations of the `Expires` header.\n\nValue for the `Cache-Control` header is composite i.e. it can have multiple directive/values. Let's look at the possible values that this header may contain.\n\n##### private\n\nSetting the cache to `private` means that the content will not be cached in any of the proxies and it will only be cached by the client (i.e. browser)\n\n```html\nCache-Control: private\n```\n\nHaving said that, don't let it fool you into thinking that setting this header will make your data any secure; you still have to use SSL for that purpose.\n\n##### public\n\nIf set to `public`, apart from being cached by the client, it can also be cached by the proxies; serving many other users\n\n```html\nCache-Control: public\n```\n\n##### no-store\n\n**`no-store`** specifies that the content is not to be cached by any of the caches\n\n```html\nCache-Control: no-store\n```\n\n##### no-cache\n\n**`no-cache`** indicates that the cache can be maintained but the cached content is to be re-validated (using `ETag` for example) from the server before being served. That is, there is still a request to server but for validation and not to download the cached content.\n\n```html\nCache-Control: max-age=3600, no-cache, public\n```\n\n##### max-age: seconds\n\n**`max-age`** specifies the number of seconds for which the content will be cached. For example, if the `cache-control` looks like below:\n\n```html\nCache-Control: max-age=3600, public\n```\n\nit would mean that the content is publicly cacheable and will be considered stale after 60 minutes\n\n##### s-maxage: seconds\n\n**`s-maxage`** here `s-` prefix stands for shared. This directive specifically targets the shared caches. Like `max-age` it also gets the number of seconds for which something is to be cached. If present, it will override `max-age` and `expires` headers for shared caching.\n\n```html\nCache-Control: s-maxage=3600, public\n```\n\n##### must-revalidate\n\n**`must-revalidate`** it might happen sometimes that if you have network problems and the content cannot be retrieved from the server, the browser may serve stale content without validation. `must-revalidate` avoids that. If this directive is present, it means that stale content cannot be served in any case and the data must be re-validated from the server before serving.\n\n```html\nCache-Control: max-age=3600, public, must-revalidate\n```\n\n##### proxy-revalidate\n\n**`proxy-revalidate`** is similar to `must-revalidate` but it specifies the same for shared or proxy caches. In other words `proxy-revalidate` is to `must-revalidate` as `s-maxage` is to `max-age`. But why did they not call it `s-revalidate`?. I have no idea why, if you have any clue please leave a comment below.\n\n##### Mixing Values\n\nYou can combine these directives in different ways to achieve different caching behaviors, however `no-cache/no-store` and `public/private` are mutually exclusive.\n\nIf you specify both `no-store` and `no-cache`, `no-store` will be given precedence over `no-cache`.\n\n```html\n; If specified both Cache-Control: no-store, no-cache ; Below will be considered\nCache-Control: no-store\n```\n\nFor `private/public`, for any unauthenticated requests cache is considered `public` and for any authenticated ones cache is considered `private`.\n\n### Validators\n\nUp until now we only discussed how the content is cached and how long the cached content is to be considered fresh but we did not discuss how the client does the validation from the server. Below we discuss the headers used for this purpose.\n\n#### ETag\n\nEtag or \"entity tag\" was introduced in HTTP/1.1 specs. Etag is just a unique identifier that the server attaches with some resource. This ETag is later on used by the client to make conditional HTTP requests stating `\"give me this resource if ETag is not same as the ETag that I have\"` and the content is downloaded only if the etags do not match.\n\nMethod by which ETag is generated is not specified in the HTTP docs and usually some collision-resistant hash function is used to assign etags to each version of a resource. There could be two types of etags i.e. strong and weak\n\n```html\nETag: \"j82j8232ha7sdh0q2882\" - Strong Etag ETag: W/\"j82j8232ha7sdh0q2882\" - Weak\nEtag (prefixed with `W/`)\n```\n\nA strong validating ETag means that two resources are **exactly** same and there is no difference between them at all. While a weak ETag means that two resources although not strictly the same but could be considered the same. Weak etags might be useful for dynamic content, for example.\n\nNow you know what etags are but how does the browser make this request? by making a request to server while sending the available Etag in `If-None-Match` header.\n\nConsider the scenario, you opened a web page which loaded a logo image with caching period of 60 seconds and ETag of `abc123xyz`. After about 30 minutes you reload the page, browser will notice that the logo which was fresh for 60 seconds is now stale; it will trigger a request to server, sending the ETag of the stale logo image in `if-none-match` header\n\n```html\nIf-None-Match: \"abc123xyz\"\n```\n\nServer will then compare this ETag with the ETag of the current version of resource. If both etags are matched, server will send back the response of `304 Not Modified` which will tell the client that the copy that it has is still good and it will be considered fresh for another 60 seconds. If both the etags do not match i.e. the logo has likely changed and client will be sent the new logo which it will use to replace the stale logo that it has.\n\n#### Last-Modified\n\nServer might include the `Last-Modified` header indicating the date and time at which some content was last modified on.\n\n```html\nLast-Modified: Wed, 15 Mar 2017 12:30:26 GMT\n```\n\nWhen the content gets stale, client will make a conditional request including the last modified date that it has inside the header called `If-Modified-Since` to server to get the updated `Last-Modified` date; if it matches the date that the client has, `Last-Modified` date for the content is updated to be considered fresh for another `n` seconds. If the received `Last-Modified` date does not match the one that the client has, content is reloaded from the server and replaced with the content that client has.\n\n```html\nIf-Modified-Since: Wed, 15 Mar 2017 12:30:26 GMT\n```\n\nYou might be questioning now, what if the cached content has both the `Last-Modified` and `ETag` assigned to it? Well, in that case both are to be used i.e. there will not be any re-downloading of the resource if and only if `ETag` matches the newly retrieved one and so does the `Last-Modified` date. If either the `ETag` does not match or the `Last-Modified` is greater than the one from the server, content has to be downloaded again.\n\n### Where do I start?\n\nNow that we have got _everything_ covered, let us put everything in perspective and see how you can use this information.\n\n#### Utilizing Server\n\nBefore we get into the possible caching strategies , let me add the fact that most of the servers including Apache and Nginx allow you to implement your caching policy through the server so that you don't have to juggle with headers in your code.\n\n**For example**, if you are using Apache and you have your static content placed at `/static`, you can put below `.htaccess` file in the directory to make all the content in it be cached for an year using below\n\n```html\n# Cache everything for an year Header set Cache-Control \"max-age=31536000,\npublic\"\n```\n\nYou can further use `filesMatch` directive to add conditionals and use different caching strategy for different kinds of files e.g.\n\n```html\n# Cache any images for one year\n<filesMatch \".(png|jpg|jpeg|gif)$\">\n    Header set Cache-Control \"max-age=31536000, public\"\n</filesMatch>\n\n# Cache any CSS and JS files for a month\n<filesMatch \".(css|js)$\">\n    Header set Cache-Control \"max-age=2628000, public\"\n</filesMatch>\n```\n\nOr if you don't want to use the `.htaccess` file you can modify Apache's configuration file `http.conf`. Same goes for Nginx, you can add the caching information in the location or server block.\n\n#### Caching Recommendations\n\nThere is no golden rule or set standards about how your caching policy should look like, each of the application is different and you have to look and find what suits your application the best. However, just to give you a rough idea\n\n- You can have aggressive caching (e.g. cache for an year) on any static content and use fingerprinted filenames (e.g. `style.ju2i90.css`) so that the cache is automatically rejected whenever the files are updated.\n  Also it should be noted that you should not cross the upper limit of one year as it [might not be honored](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9)\n- Look and decide do you even need caching for any dynamic content, if yes how long it should be. For example, in case of some RSS feed of a blog there could be the caching of a few hours but there couldn't be any caching for inventory items in an ERP.\n- Always add the validators (preferably ETags) in your response.\n- Pay attention while choosing the visibility (private or public) of the cached content. Make sure that you do not accidentally cache any user-specific or sensitive content in any public proxies. When in doubt, do not use cache at all.\n- Separate the content that changes often from the content that doesn't change that often (e.g. in javascript bundles) so that when it is updated it doesn't need to make the whole cached content stale.\n- Test and monitor the caching headers being served by your site. You can use the browser console or `curl -I http://some-url.com` for that purpose.\n\nAnd that about wraps it up. Stay tuned for more!\n";
				}
				function compiledContent$m() {
					return html$m;
				}
				function getHeadings$m() {
					return [{"depth":3,"slug":"introduction","text":"Introduction"},{"depth":3,"slug":"caching-locations","text":"Caching Locations"},{"depth":4,"slug":"browser-cache","text":"Browser Cache"},{"depth":4,"slug":"proxy-cache","text":"Proxy Cache"},{"depth":4,"slug":"reverse-proxy-cache","text":"Reverse Proxy Cache"},{"depth":3,"slug":"caching-headers","text":"Caching Headers"},{"depth":4,"slug":"expires","text":"Expires"},{"depth":4,"slug":"pragma","text":"Pragma"},{"depth":4,"slug":"cache-control","text":"Cache-Control"},{"depth":5,"slug":"private","text":"private"},{"depth":5,"slug":"public","text":"public"},{"depth":5,"slug":"no-store","text":"no-store"},{"depth":5,"slug":"no-cache","text":"no-cache"},{"depth":5,"slug":"max-age-seconds","text":"max-age: seconds"},{"depth":5,"slug":"s-maxage-seconds","text":"s-maxage: seconds"},{"depth":5,"slug":"must-revalidate","text":"must-revalidate"},{"depth":5,"slug":"proxy-revalidate","text":"proxy-revalidate"},{"depth":5,"slug":"mixing-values","text":"Mixing Values"},{"depth":3,"slug":"validators","text":"Validators"},{"depth":4,"slug":"etag","text":"ETag"},{"depth":4,"slug":"last-modified","text":"Last-Modified"},{"depth":3,"slug":"where-do-i-start","text":"Where do I start?"},{"depth":4,"slug":"utilizing-server","text":"Utilizing Server"},{"depth":4,"slug":"caching-recommendations","text":"Caching Recommendations"}];
				}

				const Content$m = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$m;
					content.file = file$m;
					content.url = url$m;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$m)}`;
				});

const __vite_glob_0_23 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$m,
	compiledContent: compiledContent$m,
	default: Content$m,
	file: file$m,
	frontmatter: frontmatter$m,
	getHeadings: getHeadings$m,
	rawContent: rawContent$m,
	url: url$m
}, Symbol.toStringTag, { value: 'Module' }));

const html$l = "<p>Everyone these days is talking about LLMs, ChatGPT and what not. GitHub’s <a href=\"https://github.com/trending\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">trending page</a> is flooded with repositories that are using LLMs in one way or another. But what are LLMs? How do they work? What are the use cases? In this high level, introductory guide, we will try to answer these questions.</p>\n<h2 id=\"what-are-llms\">What are LLMs?</h2>\n<p>LLM stands for “Large Language Model.” These are advanced AI systems designed to understand and generate human-like text based on the input they receive. These models have been trained on vast amounts of text data and can perform a wide range of language-related tasks, such as answering questions, carrying out conversations, summarizing text, translating languages, and much more.</p>\n<p><a href=\"https://twitter.com/kamrify/status/1658271217189634049\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><img src=\"/guides/llms.png\" alt=\"LLMS Visualized\"></a></p>\n<p>OpenAI has been a major contributor to this space in the past few years with their models and research. However, there are other players in the market as well e.g. Meta with their <a href=\"https://huggingface.co/facebook/opt-66b\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">OPT</a>, <a href=\"https://huggingface.co/facebook/opt-iml-30b\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">OPT-IML</a> and <a href=\"https://ai.facebook.com/blog/large-language-model-llama-meta-ai/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">LLaMA</a> models, Google released <a href=\"https://huggingface.co/google/flan-t5-xxl\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">FLAN-T5</a> and <a href=\"https://huggingface.co/bert-base-uncased\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">BERT</a>, <a href=\"https://github.com/stability-AI/stableLM/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">StableLM</a> by Stability AI, <a href=\"https://crfm.stanford.edu/2023/03/13/alpaca.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Alpaca</a> at Stanford and there are many <a href=\"https://github.com/Hannibal046/Awesome-LLM\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">other opensource models as well</a>.</p>\n<h2 id=\"training-an-llm-model\">Training an LLM Model</h2>\n<p>On a high level, training an LLM model involves three steps i.e. data collection, training and evaluation.</p>\n<ul>\n<li>\n<p><strong>Data Collection</strong> The first step is to collect the data that will be used to train the model. The data can be collected from various sources such as Wikipedia, news articles, books, websites etc.</p>\n</li>\n<li>\n<p><strong>Training</strong>: The data then goes through a training pipeline where it is cleaned and preprocessed before being fed into the model for training. The training process usually takes a long time and requires a lot of computational power.</p>\n</li>\n<li>\n<p><strong>Evaluation</strong>: The final step is to evaluate the performance of the model to see how well it performs on various tasks such as question answering, summarization, translation etc.</p>\n</li>\n</ul>\n<p>The output from the training Pipeline is an LLM model which is simply the parameters or weights which capture the knowledge learned during the training process. These parameters or weights are typically serialized and stored in a file, which can then be loaded into any application that requires language processing capabilities e.g. text generation, question answering, language processing etc.</p>\n<h2 id=\"types-of-llms\">Types of LLMs</h2>\n<p>On a high level, LLMs can be categorized into two types i.e. Base LLMs and Instruction tuned LLMs.</p>\n<h3 id=\"base-llms\">Base LLMs</h3>\n<p>Base LLMs are the LLMs which are designed to predict the next word based on the training data. They are not designed to answer questions, carry out conversations or help solve problems. For example, if you give a base LLM the sentence “In this book about LLMs, we will discuss”, it might complete this sentence and give you “In this book about LLMs, we will discuss <strong>what LLMs are, how they work, and how you can leverage them in your applications.</strong>.” Or if you give it “What are some famous social networks?”, instead of answering it might give back “Why do people use social networks?” or “What are some of the benefits of social networks?“. As you can see, it is giving us relevant text but it is not answering the question. This is where the Instruction tuned LLMs come in to the picture.</p>\n<h3 id=\"instruction-tuned-llms\">Instruction tuned LLMs</h3>\n<p>Instruction Tuned LLMs, instead of trying to autocomplete your text, try to follow the given instructions using the data that they have been trained on. For example, if you input the sentence “What are LLMs?” it will use the data that it is trained on and try to answer the question. Similarly, if you input “What are some famous social networks?” it will try to answer the question instead of giving you a random answer.</p>\n<p>Instruction Tuned LLMs are built on top of Base LLMs:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Instruction Tuned LLMs = Base LLMs + Further Tuning + RLHF</span></span>\n<span class=\"line\"><span></span></span></code></pre>\n<p>To build an Instruction Tuned LLM, a Base LLM is taken and is further trained using a large dataset covering sample “Instructions” and how the model should perform as a result of those instructions. The model is then fine-tuned using a technique called “Reinforcement Learning with Human Feedback” (RLHF) which allows the model to learn from human feedback and improve its performance over time.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>LLMs are a powerful tool that can be used to solve a wide range of language-related tasks. They are being used in various industries such as healthcare, finance, education etc. to automate processes and improve efficiency. LLMs have the potential to revolutionize the way we interact with computers and make our lives easier.</p>\n<p>And that’s it for this guide. We have some exciting AI related content coming up in the next few weeks. Stay tuned!</p>";

				const frontmatter$l = {"title":"Introduction to LLMs","description":"What are LLMs, how does ChatGPT and other LLMs work?","authorId":"kamran","seo":{"title":"Introduction to LLMs - roadmap.sh","description":"What are LLMs, how does ChatGPT and other LLMs work?"},"isNew":false,"type":"textual","date":"2023-05-16T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$l = "/workspaces/developer-roadmap/src/data/guides/introduction-to-llms.md";
				const url$l = undefined;
				function rawContent$l() {
					return "\nEveryone these days is talking about LLMs, ChatGPT and what not. GitHub's [trending page](https://github.com/trending) is flooded with repositories that are using LLMs in one way or another. But what are LLMs? How do they work? What are the use cases? In this high level, introductory guide, we will try to answer these questions.\n\n## What are LLMs?\n\nLLM stands for \"Large Language Model.\" These are advanced AI systems designed to understand and generate human-like text based on the input they receive. These models have been trained on vast amounts of text data and can perform a wide range of language-related tasks, such as answering questions, carrying out conversations, summarizing text, translating languages, and much more.\n\n[![LLMS Visualized](/guides/llms.png)](https://twitter.com/kamrify/status/1658271217189634049)\n\n\nOpenAI has been a major contributor to this space in the past few years with their models and research. However, there are other players in the market as well e.g. Meta with their [OPT](https://huggingface.co/facebook/opt-66b), [OPT-IML](https://huggingface.co/facebook/opt-iml-30b) and [LLaMA](https://ai.facebook.com/blog/large-language-model-llama-meta-ai/) models, Google released [FLAN-T5](https://huggingface.co/google/flan-t5-xxl) and [BERT](https://huggingface.co/bert-base-uncased), [StableLM](https://github.com/stability-AI/stableLM/) by Stability AI, [Alpaca](https://crfm.stanford.edu/2023/03/13/alpaca.html) at Stanford and there are many [other opensource models as well](https://github.com/Hannibal046/Awesome-LLM).\n\n## Training an LLM Model\n\nOn a high level, training an LLM model involves three steps i.e. data collection, training and evaluation.\n\n- **Data Collection** The first step is to collect the data that will be used to train the model. The data can be collected from various sources such as Wikipedia, news articles, books, websites etc.\n\n- **Training**: The data then goes through a training pipeline where it is cleaned and preprocessed before being fed into the model for training. The training process usually takes a long time and requires a lot of computational power.\n\n- **Evaluation**: The final step is to evaluate the performance of the model to see how well it performs on various tasks such as question answering, summarization, translation etc.\n\nThe output from the training Pipeline is an LLM model which is simply the parameters or weights which capture the knowledge learned during the training process. These parameters or weights are typically serialized and stored in a file, which can then be loaded into any application that requires language processing capabilities e.g. text generation, question answering, language processing etc.\n\n## Types of LLMs\n\nOn a high level, LLMs can be categorized into two types i.e. Base LLMs and Instruction tuned LLMs.\n\n### Base LLMs\n\nBase LLMs are the LLMs which are designed to predict the next word based on the training data. They are not designed to answer questions, carry out conversations or help solve problems. For example, if you give a base LLM the sentence \"In this book about LLMs, we will discuss\", it might complete this sentence and give you \"In this book about LLMs, we will discuss **what LLMs are, how they work, and how you can leverage them in your applications.**.\" Or if you give it \"What are some famous social networks?\", instead of answering it might give back \"Why do people use social networks?\" or \"What are some of the benefits of social networks?\". As you can see, it is giving us relevant text but it is not answering the question. This is where the Instruction tuned LLMs come in to the picture.\n\n### Instruction tuned LLMs\n\nInstruction Tuned LLMs, instead of trying to autocomplete your text, try to follow the given instructions using the data that they have been trained on. For example, if you input the sentence \"What are LLMs?\" it will use the data that it is trained on and try to answer the question. Similarly, if you input \"What are some famous social networks?\" it will try to answer the question instead of giving you a random answer.\n\nInstruction Tuned LLMs are built on top of Base LLMs:\n\n```\nInstruction Tuned LLMs = Base LLMs + Further Tuning + RLHF\n```\n\nTo build an Instruction Tuned LLM, a Base LLM is taken and is further trained using a large dataset covering sample \"Instructions\" and how the model should perform as a result of those instructions. The model is then fine-tuned using a technique called \"Reinforcement Learning with Human Feedback\" (RLHF) which allows the model to learn from human feedback and improve its performance over time.\n\n## Conclusion\n\nLLMs are a powerful tool that can be used to solve a wide range of language-related tasks. They are being used in various industries such as healthcare, finance, education etc. to automate processes and improve efficiency. LLMs have the potential to revolutionize the way we interact with computers and make our lives easier.\n\nAnd that's it for this guide. We have some exciting AI related content coming up in the next few weeks. Stay tuned!\n";
				}
				function compiledContent$l() {
					return html$l;
				}
				function getHeadings$l() {
					return [{"depth":2,"slug":"what-are-llms","text":"What are LLMs?"},{"depth":2,"slug":"training-an-llm-model","text":"Training an LLM Model"},{"depth":2,"slug":"types-of-llms","text":"Types of LLMs"},{"depth":3,"slug":"base-llms","text":"Base LLMs"},{"depth":3,"slug":"instruction-tuned-llms","text":"Instruction tuned LLMs"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$l = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$l;
					content.file = file$l;
					content.url = url$l;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$l)}`;
				});

const __vite_glob_0_24 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$l,
	compiledContent: compiledContent$l,
	default: Content$l,
	file: file$l,
	frontmatter: frontmatter$l,
	getHeadings: getHeadings$l,
	rawContent: rawContent$l,
	url: url$l
}, Symbol.toStringTag, { value: 'Module' }));

const html$k = "<p>Java has been a popular programming language for the past 28 years and remains in the top four programming languages today. This is due to its use in many Java-based platforms and the growing demand for specialized Java developers in big data, machine learning, and financial services.</p>\n<p>If you are building web applications, the ability to work on both front-end and back-end development using Java is valuable. Fundamental and advanced Java skills such as multithreading, concurrency, JVM tuning, and object-oriented design are vital in enterprise environments.</p>\n<p>To remain competitive as a Java developer, you must continuously improve your skill sets to meet evolving industry demands.</p>\n<p>This article will equip you with the skills required in 2024. You’ll understand the landscape of Java demand, adoption, diverse applications, and strategies for excelling as a Java developer. By the end of this article, you will be confident about pursuing a Java development career.</p>\n<h2 id=\"who-is-a-java-full-stack-developer\">Who is a Java full stack developer?</h2>\n<p>A full stack developer creates applications for software’s <a href=\"https://roadmap.sh/frontend\" target=\"_blank\">Front-End (client)</a> and <a href=\"https://roadmap.sh/backend\" target=\"_blank\">Back-End (server)</a> development. They understand frameworks and tools for designing user interfaces (UIs) and managing application states, databases, and APIs.</p>\n<h3 id=\"required-skills-for-front-end-java-development\">Required skills for front-end Java development</h3>\n<p>Here are the front-end skills you should learn in 2024:</p>\n<ul>\n<li>HTML and CSS</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>Accessibility standards and compatibility</li>\n</ul>\n<ol>\n<li>\n<p><strong>HTML and CSS:</strong> HyperText Markup Language (HTML) is the building block for all web pages. It dictates users’ content and structure when interacting with a website or application, including text, images, videos, and more.</p>\n<p>Whereas HTML provides the structure of web pages, Cascading Style Sheets (CSS) enhance their appearance and layout. CSS determines how the content on a web page is styled and presented, including aspects like colors, fonts, spacing, and more. Additionally, CSS helps you create responsive designs that adapt to various screen sizes.</p>\n</li>\n<li>\n<p><strong>JavaScript:</strong> JavaScript is a programming language used alongside HTML and CSS to enhance the functionality and interactivity of web pages. Whereas HTML and CSS are responsible for creating the structure and design of web pages, <a href=\"https://roadmap.sh/javascript\" target=\"_blank\">JavaScript</a> adds dynamic elements such as content updates, animations, 2D/3D graphics, and other interactive features. Over the years, JavaScript has evolved significantly, introducing powerful frameworks such as <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, and <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, among others. These frameworks empower you to build software ranging from small applications to large-scale enterprise systems.</p>\n</li>\n<li>\n<p><strong>TypeScript</strong>: Typescript is an extension of JavaScript with static typing and other advanced features. <a href=\"https://roadmap.sh/typescript\" target=\"_blank\">TypeScript</a> code transpiles to JavaScript and can run seamlessly wherever JavaScript runs, making it a highly versatile programming language for front-end development. The knowledge enhances your productivity by allowing you to build robust applications, detect errors, and catch issues as they happen.</p>\n</li>\n<li>\n<p><strong>Accessibility standards and compatibility:</strong> As a Java full stack developer, having a solid understanding of accessibility and browser compatibility is important. The knowledge enables you to create web applications usable by people with disabilities, promoting inclusivity, complying with accessibility regulations, and ensuring a solid user experience.</p>\n</li>\n</ol>\n<h3 id=\"required-skills-for-back-end-java-development\">Required skills for back-end Java development</h3>\n<p>Here are the back-end skills you should learn in 2024:</p>\n<ul>\n<li>Java frameworks</li>\n<li>Database management</li>\n<li>Version control</li>\n<li>Version control providers</li>\n<li>Deployment mechanism</li>\n<li>Application Programming Interface (API)</li>\n<li>Web Security</li>\n<li>Caching</li>\n</ul>\n<ol>\n<li>\n<p><strong>Java frameworks:</strong> Frameworks are pre-written and thoroughly tested collections of code, classes, components, templates, and other structures that you can utilize to streamline the development process of applications. They come equipped with standard functionalities such as security measures, data retrieval mechanisms, and predefined project structures. Leveraging frameworks allows you to build applications more efficiently without starting from scratch or recreating existing solutions.</p>\n<p>While Java has several frameworks for building full stack applications, it’s crucial to consider each framework’s associated pros and cons, adoption rates, and how effectively they address the intended business requirements. One particularly renowned framework is the Java <a href=\"https://roadmap.sh/spring-boot\" target=\"_blank\">Spring Boot</a>, celebrated for simplifying the development process for small-scale and enterprise-level Java applications. In addition to its user-friendliness, it boasts a vast ecosystem and a thriving community of developers.</p>\n</li>\n<li>\n<p><strong>Database management:</strong> The choice of database and data storage methods significantly impacts how data is retrieved and utilized in applications. You must consider various factors, such as whether to use a NoSQL or SQL database, employ stored procedures or Object Relational Mapping (ORM), and opt for self-hosting or cloud-based hosting. It’s essential to address these questions in your journey toward full stack development.</p>\n</li>\n<li>\n<p><strong>Version control:</strong> Version control facilitates teamwork by allowing you and your team members to collaborate on a project simultaneously. It enables the management of changes to code and files over time without disrupting the workflow. In your full stack journey, it’s crucial to grasp version control features like branching, pull requests, merge requests, commits, commit history, and more.</p>\n</li>\n<li>\n<p><strong>Version control providers</strong>: Popular providers like <a href=\"http://github.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">GitHub</a> offer unique tools, such as user interfaces (UIs) and Command Line Interfaces (CLIs), for individuals and organizations to effectively manage and collaborate on code. Additionally, they offer a platform to search for and contribute to open-source projects, serving as a valuable resource for your learning and giving back to the community.</p>\n</li>\n<li>\n<p><strong>Deployment mechanism:</strong> The ultimate objective of application development is to deliver accessible solutions to end users. Deploying software involves various steps, such as packaging, configuring, releasing, and monitoring. Although these processes can overlap and business requirements may evolve, it is crucial to establish a reliable mechanism for building, testing, and deploying code to meet the desired objectives. In your journey as a full stack web developer, your responsibilities extend beyond creating applications. You must have a good understanding of tools such as <a href=\"https://roadmap.sh/docker\" target=\"_blank\">Docker</a>, <a href=\"https://roadmap.sh/kubernetes\" target=\"_blank\">Kubernetes</a>, and Jenkins and be proficient in <a href=\"https://roadmap.sh/devops\" target=\"_blank\">DevOps</a> best practices. Additionally, familiarity with popular cloud platforms like Azure, <a href=\"https://roadmap.sh/aws\" target=\"_blank\">AWS</a>, and GCP is essential for efficient deployment and scalability of applications.</p>\n</li>\n<li>\n<p><strong>Application Programming Interfaces (APIs)</strong>: APIs are rules and protocols that allow different software applications to communicate with each other. They give access to services or functionality other software systems provide, enabling developers to integrate these capabilities into their applications without understanding the underlying implementation details. A solid understanding of how APIs work, the standards they follow, and how they are exposed for utilization is important in full stack development.</p>\n</li>\n<li>\n<p><strong>Web security</strong>: As a Java full-stack developer, a good understanding of protecting web resources is essential. Knowing when to utilize tools like JSON Web Token (JWT), OAuth, and <a href=\"https://roadmap.sh/best-practices/api-security\" target=\"_blank\">API security best practices</a> is crucial. Knowing when to build solutions from scratch or leverage third-party offerings based on project requirements is key to successful development.</p>\n</li>\n<li>\n<p><strong>Caching</strong>: Caching is the process of storing data so that future requests for that same data can be served faster. It typically involves using temporary storage that sits between the front-end and the back-end. Caching speeds up application performance, increases efficiency, and enhances overall user experience. As a Java full-stack developer, having a solid understanding of caching techniques and technologies like Redis is crucial.</p>\n</li>\n</ol>\n<h2 id=\"how-to-stand-out-as-a-java-full-stack-developer\">How to stand out as a Java full stack developer</h2>\n<p>While mastering front-end and back-end technologies forms the core competencies for building an application as a Java full stack developer, it’s crucial to recognize that the technology landscape is dynamic, and business requirements evolve accordingly. Here are some additional skills that can be beneficial to you:</p>\n<ul>\n<li>Java Virtual Machine (JVM)</li>\n<li>Jakarta Server Pages</li>\n<li>Front-end frameworks</li>\n<li>Design patterns</li>\n<li>Community</li>\n<li>Soft skills</li>\n<li>Continuous learning</li>\n</ul>\n<h3 id=\"java-virtual-machine-jvm\">Java Virtual Machine (JVM)</h3>\n<p>The JVM is a virtual machine that loads, verifies, and executes Java programs. It enables Java applications to run on various devices while providing security and optimizing program memory usage. A good knowledge of JVM’s operation can empower you to build faster, safer, and more memory-efficient applications.</p>\n<h3 id=\"jakarta-server-pages\">Jakarta Server Pages</h3>\n<p>Jakarta Server Pages (JSP), previously known as Java Server Pages, is a suite of technologies that enables you to generate dynamic web pages. It facilitates the integration of Java code within static web markup, which is then compiled and executed on the server to deliver dynamic content.</p>\n<h3 id=\"front-end-frameworks\">Front-end frameworks</h3>\n<p>While Java can work with HTML, CSS, and JavaScript, there are scenarios where businesses need a clear separation between front-end and back-end development. This requirement could arise from diverse factors such as deployment strategies, continuous delivery pipelines, virtual (2D/3D) rendering demands, and performance optimizations. Therefore, knowledge of popular front-end frameworks like <a href=\"https://roadmap.sh/react\" target=\"_blank\">React</a>, <a href=\"https://roadmap.sh/vue\" target=\"_blank\">Vue</a>, <a href=\"https://roadmap.sh/angular\" target=\"_blank\">Angular</a>, etc. is critical.</p>\n<h3 id=\"design-patterns\">Design patterns</h3>\n<p>Design patterns are proven approaches to solving specific design challenges and promoting code reusability, maintainability, and scalability. A solid understanding of patterns like dependency injection, factory method patterns, builder patterns, etc., will prove invaluable when addressing common software design problems encountered during application development. These patterns provide developers with established solutions and best practices for effectively structuring their code and solving recurring design issues.</p>\n<h3 id=\"community\">Community</h3>\n<p>As the popular saying goes, “a tree cannot make a forest.” While it might be tempting to work in isolation and tackle all development tasks alone, it’s essential for you to join communities that encourage collaboration, peer learning, and staying updated on the latest developments.</p>\n<p>A great community to join is the <a href=\"https://discord.gg/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">r</a><a href=\"https://discord.gg/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">oadmap.sh</a> <a href=\"https://discord.gg/cJpEt5Qbwa\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Discord community</a>, where you can connect with like-minded individuals who share your passion for development.</p>\n<h3 id=\"soft-skills\">Soft skills</h3>\n<p>In addition to technical expertise, soft skills play a vital role in the development pipeline. Despite the advancements in AI shaping the technical landscape, human-centric soft skills remain highly valued. Machines may not fully grasp human needs, making empathy, critical thinking, and effective communication with business stakeholders indispensable qualities for you as a Java full stack developer.</p>\n<h3 id=\"continuous-learning\">Continuous learning</h3>\n<p>Frameworks, libraries, technologies, modes of adoption, and business requirements will continue to evolve. It is important you stay curious, continuously learn, and keep up with the latest developments in the Java ecosystem, which is huge.</p>\n<p>While staying informed about changes in the ecosystem can be overwhelming, especially with information from various sources like blogs, online training, bootcamp courses, etc., there’s a reliable and regularly updated platform for Java resources: <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java developer’s</a> <a href=\"https://roadmap.sh/java\" target=\"_blank\">r</a><a href=\"https://roadmap.sh/java\" target=\"_blank\">oadmap.sh</a>.</p>\n<h2 id=\"javas-adoption-in-the-real-world\">Java’s adoption in the real-world</h2>\n<p>Developed by James Gosling at <a href=\"https://en.wikipedia.org/wiki/Sun_Microsystems\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Sun Microsystems</a> in the 1990s, Java initially targeted interactive television but transitioned to Internet programming for its advanced features. The public release of Java 1.0 in 1996 introduced “<a href=\"https://en.wikipedia.org/wiki/Write_once,_run_anywhere\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">write once, run anywhere</a>” (WORA), offering no-cost runtimes across platforms and revolutionizing software development. Since then, Java has evolved significantly with numerous versions, runtimes, and platform support.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/evolution-of-java-xjbal.jpeg\" alt=\"Evolution of Java\"></p>\n<p>The WORA mantra empowers developers to write Java programs capable of running on any device. These programs are compiled into standard bytecode, which allows them to execute on any device equipped with a <a href=\"https://en.wikipedia.org/wiki/Java_virtual_machine\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Java virtual machine</a>. Due to its seamless cross-platform compatibility, Java has been widely adopted for building applications on various platforms, including web, mobile, and other digital devices. Below are some areas where Java has been massively adopted beyond its general usage:</p>\n<h3 id=\"java-in-virtual-reality-augmented-reality-and-mixed-reality\">Java in virtual reality, augmented reality, and mixed reality</h3>\n<p>Java has also been widely adopted for building applications that support interactivity and immersive experiences, particularly in the realms of virtual reality (VR), augmented reality (AR), and mixed reality (XR).</p>\n<p>For example, in e-commerce, developers can use Java’s capabilities to create realistic and virtual environments that allow customers to visualize how different clothing items and footwear will look on them before making a purchase.</p>\n<h3 id=\"java-in-ai\">Java in AI</h3>\n<p>Another field in which Java is gaining adoption is AI. Java’s maintainability, object-oriented approach, enhanced security, garbage collection, and platform independence have positioned it as a vital tool for modeling and powering AI applications. These features make Java well-suited for developing robust and scalable AI solutions that can effectively handle complex data processing and analysis tasks.</p>\n<h2 id=\"what-is-the-demand-for-java-developers\">What is the demand for Java developers?</h2>\n<p>According to Statista, <a href=\"https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Java is one of the most widely embraced programming languages among developers,</a> owing to its speed, security, and reliability. Its versatility has led to widespread adoption across industries, including big data, banking, retail, and stock markets.</p>\n<p><img src=\"https://assets.roadmap.sh/guest/most-used-programming-languages.png\" alt=\"Most used programming language statistics\"></p>\n<p>Based on the recently concluded <a href=\"https://survey.stackoverflow.co/2023/#technology\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Stack Overflow survey</a>, it was found that 30.49% of the respondents utilize Java in their professional endeavors, while 35.17% are in the process of adopting Java to fulfill their programming needs.</p>\n<p>Moreover, the demand for Java developers is projected to continue rising, <a href=\"https://www.statista.com/statistics/1296727/programming-languages-demanded-by-recruiters/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">with over 40% of recruiters actively seeking professionals skilled in Java programming</a>.</p>\n<p>In summary, a Java full stack developer needs expertise in front-end technologies (such as HTML, CSS, JavaScript, and WebSocket) and back-end skills (including Database management, Java frameworks, version control, version control providers, APIs, caching, etc.). These skills are essential for building comprehensive applications and ensuring seamless communication between the client and server sides.</p>\n<p>With billions of devices using Java across various platforms and its extensive adoption in big data, AI, VR/AR/XR, and more, the demand for Java developers is significant. This demand will persist for maintaining and developing new Java applications. Java’s ease of use, robustness, and scalability make it a top choice among developers, ensuring its relevance today and as technologies evolve.</p>\n<p>Whether you’re just getting into the field or an experienced developer aiming to stay updated with technological advancements, roadmap.sh’s <a href=\"https://roadmap.sh/java\" target=\"_blank\">Java roadmap</a> is an invaluable resource. Moreover, you now have the opportunity to generate your roadmap with AI, follow and track your progress, showcase your skills, and become part of a supportive community by <a href=\"https://roadmap.sh/signup\" target=\"_blank\">signing up</a> on roadmap.sh platform.</p>";

				const frontmatter$k = {"title":"Must-Have Java Full-stack Developer Skills in @currentYear@","description":"Master the essential skills every Java full stack developer needs. Boost your career with our expert tips!","authorId":"william","excludedBySlug":"/java/developer-skills","seo":{"title":"Must-Have Java Full-stack Developer Skills in @currentYear@","description":"Master the essential skills every Java full stack developer needs. Boost your career with our expert tips!","ogImageUrl":"https://assets.roadmap.sh/guest/java-full-stack-developer-skills-sjzbd.png"},"isNew":false,"type":"textual","date":"2024-05-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$k = "/workspaces/developer-roadmap/src/data/guides/java-developer-skills.md";
				const url$k = undefined;
				function rawContent$k() {
					return "\nJava has been a popular programming language for the past 28 years and remains in the top four programming languages today. This is due to its use in many Java-based platforms and the growing demand for specialized Java developers in big data, machine learning, and financial services.\n\nIf you are building web applications, the ability to work on both front-end and back-end development using Java is valuable. Fundamental and advanced Java skills such as multithreading, concurrency, JVM tuning, and object-oriented design are vital in enterprise environments.\n\nTo remain competitive as a Java developer, you must continuously improve your skill sets to meet evolving industry demands.\n\nThis article will equip you with the skills required in 2024. You’ll understand the landscape of Java demand, adoption, diverse applications, and strategies for excelling as a Java developer. By the end of this article, you will be confident about pursuing a Java development career.\n\n## Who is a Java full stack developer?\n\nA full stack developer creates applications for software's [Front-End (client)](https://roadmap.sh/frontend) and [Back-End (server)](https://roadmap.sh/backend) development. They understand frameworks and tools for designing user interfaces (UIs) and managing application states, databases, and APIs.\n\n### Required skills for front-end Java development\n\nHere are the front-end skills you should learn in 2024:\n\n- HTML and CSS\n- JavaScript\n- TypeScript\n- Accessibility standards and compatibility\n\n1. **HTML and CSS:** HyperText Markup Language (HTML) is the building block for all web pages. It dictates users' content and structure when interacting with a website or application, including text, images, videos, and more. \n\n   Whereas HTML provides the structure of web pages, Cascading Style Sheets (CSS) enhance their appearance and layout. CSS determines how the content on a web page is styled and presented, including aspects like colors, fonts, spacing, and more. Additionally, CSS helps you create responsive designs that adapt to various screen sizes.\n\n2. **JavaScript:** JavaScript is a programming language used alongside HTML and CSS to enhance the functionality and interactivity of web pages. Whereas HTML and CSS are responsible for creating the structure and design of web pages, [JavaScript](https://roadmap.sh/javascript) adds dynamic elements such as content updates, animations, 2D/3D graphics, and other interactive features. Over the years, JavaScript has evolved significantly, introducing powerful frameworks such as [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), and [Angular](https://roadmap.sh/angular), among others. These frameworks empower you to build software ranging from small applications to large-scale enterprise systems.\n\n3. **TypeScript**: Typescript is an extension of JavaScript with static typing and other advanced features. [TypeScript](https://roadmap.sh/typescript) code transpiles to JavaScript and can run seamlessly wherever JavaScript runs, making it a highly versatile programming language for front-end development. The knowledge enhances your productivity by allowing you to build robust applications, detect errors, and catch issues as they happen.\n\n4. **Accessibility standards and compatibility:** As a Java full stack developer, having a solid understanding of accessibility and browser compatibility is important. The knowledge enables you to create web applications usable by people with disabilities, promoting inclusivity, complying with accessibility regulations, and ensuring a solid user experience.\n\n### Required skills for back-end Java development\n\nHere are the back-end skills you should learn in 2024:\n\n- Java frameworks\n- Database management\n- Version control\n- Version control providers\n- Deployment mechanism\n- Application Programming Interface (API)\n- Web Security\n- Caching\n\n1. **Java frameworks:** Frameworks are pre-written and thoroughly tested collections of code, classes, components, templates, and other structures that you can utilize to streamline the development process of applications. They come equipped with standard functionalities such as security measures, data retrieval mechanisms, and predefined project structures. Leveraging frameworks allows you to build applications more efficiently without starting from scratch or recreating existing solutions. \n\n    While Java has several frameworks for building full stack applications, it's crucial to consider each framework's associated pros and cons, adoption rates, and how effectively they address the intended business requirements. One particularly renowned framework is the Java [Spring Boot](https://roadmap.sh/spring-boot), celebrated for simplifying the development process for small-scale and enterprise-level Java applications. In addition to its user-friendliness, it boasts a vast ecosystem and a thriving community of developers.\n\n2. **Database management:** The choice of database and data storage methods significantly impacts how data is retrieved and utilized in applications. You must consider various factors, such as whether to use a NoSQL or SQL database, employ stored procedures or Object Relational Mapping (ORM), and opt for self-hosting or cloud-based hosting. It's essential to address these questions in your journey toward full stack development.\n\n3. **Version control:** Version control facilitates teamwork by allowing you and your team members to collaborate on a project simultaneously. It enables the management of changes to code and files over time without disrupting the workflow. In your full stack journey, it's crucial to grasp version control features like branching, pull requests, merge requests, commits, commit history, and more.\n\n4. **Version control providers**: Popular providers like [GitHub](http://github.com/) offer unique tools, such as user interfaces (UIs) and Command Line Interfaces (CLIs), for individuals and organizations to effectively manage and collaborate on code. Additionally, they offer a platform to search for and contribute to open-source projects, serving as a valuable resource for your learning and giving back to the community.\n\n5. **Deployment mechanism:** The ultimate objective of application development is to deliver accessible solutions to end users. Deploying software involves various steps, such as packaging, configuring, releasing, and monitoring. Although these processes can overlap and business requirements may evolve, it is crucial to establish a reliable mechanism for building, testing, and deploying code to meet the desired objectives. In your journey as a full stack web developer, your responsibilities extend beyond creating applications. You must have a good understanding of tools such as [Docker](https://roadmap.sh/docker), [Kubernetes](https://roadmap.sh/kubernetes), and Jenkins and be proficient in [DevOps](https://roadmap.sh/devops) best practices. Additionally, familiarity with popular cloud platforms like Azure, [AWS](https://roadmap.sh/aws), and GCP is essential for efficient deployment and scalability of applications.\n\n6. **Application Programming Interfaces (APIs)**: APIs are rules and protocols that allow different software applications to communicate with each other. They give access to services or functionality other software systems provide, enabling developers to integrate these capabilities into their applications without understanding the underlying implementation details. A solid understanding of how APIs work, the standards they follow, and how they are exposed for utilization is important in full stack development.\n\n7. **Web security**: As a Java full-stack developer, a good understanding of protecting web resources is essential. Knowing when to utilize tools like JSON Web Token (JWT), OAuth, and [API security best practices](https://roadmap.sh/best-practices/api-security) is crucial. Knowing when to build solutions from scratch or leverage third-party offerings based on project requirements is key to successful development.\n\n8. **Caching**: Caching is the process of storing data so that future requests for that same data can be served faster. It typically involves using temporary storage that sits between the front-end and the back-end. Caching speeds up application performance, increases efficiency, and enhances overall user experience. As a Java full-stack developer, having a solid understanding of caching techniques and technologies like Redis is crucial.\n\n## How to stand out as a Java full stack developer\n\nWhile mastering front-end and back-end technologies forms the core competencies for building an application as a Java full stack developer, it's crucial to recognize that the technology landscape is dynamic, and business requirements evolve accordingly. Here are some additional skills that can be beneficial to you:\n\n- Java Virtual Machine (JVM)\n- Jakarta Server Pages\n- Front-end frameworks\n- Design patterns\n- Community\n- Soft skills\n- Continuous learning\n\n### Java Virtual Machine (JVM)\n\nThe JVM is a virtual machine that loads, verifies, and executes Java programs. It enables Java applications to run on various devices while providing security and optimizing program memory usage. A good knowledge of JVM's operation can empower you to build faster, safer, and more memory-efficient applications.\n\n### Jakarta Server Pages\n\nJakarta Server Pages (JSP), previously known as Java Server Pages, is a suite of technologies that enables you to generate dynamic web pages. It facilitates the integration of Java code within static web markup, which is then compiled and executed on the server to deliver dynamic content.\n\n### Front-end frameworks\n\nWhile Java can work with HTML, CSS, and JavaScript, there are scenarios where businesses need a clear separation between front-end and back-end development. This requirement could arise from diverse factors such as deployment strategies, continuous delivery pipelines, virtual (2D/3D) rendering demands, and performance optimizations. Therefore, knowledge of popular front-end frameworks like [React](https://roadmap.sh/react), [Vue](https://roadmap.sh/vue), [Angular](https://roadmap.sh/angular), etc. is critical.\n\n### Design patterns\n\nDesign patterns are proven approaches to solving specific design challenges and promoting code reusability, maintainability, and scalability. A solid understanding of patterns like dependency injection, factory method patterns, builder patterns, etc., will prove invaluable when addressing common software design problems encountered during application development. These patterns provide developers with established solutions and best practices for effectively structuring their code and solving recurring design issues.\n\n### Community\n\nAs the popular saying goes, \"a tree cannot make a forest.\" While it might be tempting to work in isolation and tackle all development tasks alone, it's essential for you to join communities that encourage collaboration, peer learning, and staying updated on the latest developments.\n\nA great community to join is the [r](https://discord.gg/cJpEt5Qbwa)[oadmap.sh](https://discord.gg/cJpEt5Qbwa) [Discord community](https://discord.gg/cJpEt5Qbwa), where you can connect with like-minded individuals who share your passion for development.\n\n### Soft skills\n\nIn addition to technical expertise, soft skills play a vital role in the development pipeline. Despite the advancements in AI shaping the technical landscape, human-centric soft skills remain highly valued. Machines may not fully grasp human needs, making empathy, critical thinking, and effective communication with business stakeholders indispensable qualities for you as a Java full stack developer.\n\n### Continuous learning\n\nFrameworks, libraries, technologies, modes of adoption, and business requirements will continue to evolve. It is important you stay curious, continuously learn, and keep up with the latest developments in the Java ecosystem, which is huge.\n\nWhile staying informed about changes in the ecosystem can be overwhelming, especially with information from various sources like blogs, online training, bootcamp courses, etc., there's a reliable and regularly updated platform for Java resources: [Java developer’s](https://roadmap.sh/java) [r](https://roadmap.sh/java)[oadmap.sh](https://roadmap.sh/java).\n\n## Java’s adoption in the real-world\n\nDeveloped by James Gosling at [Sun Microsystems](https://en.wikipedia.org/wiki/Sun_Microsystems) in the 1990s, Java initially targeted interactive television but transitioned to Internet programming for its advanced features. The public release of Java 1.0 in 1996 introduced \"[write once, run anywhere](https://en.wikipedia.org/wiki/Write_once,_run_anywhere)\" (WORA), offering no-cost runtimes across platforms and revolutionizing software development. Since then, Java has evolved significantly with numerous versions, runtimes, and platform support.\n\n![Evolution of Java](https://assets.roadmap.sh/guest/evolution-of-java-xjbal.jpeg)\n\nThe WORA mantra empowers developers to write Java programs capable of running on any device. These programs are compiled into standard bytecode, which allows them to execute on any device equipped with a [Java virtual machine](https://en.wikipedia.org/wiki/Java_virtual_machine). Due to its seamless cross-platform compatibility, Java has been widely adopted for building applications on various platforms, including web, mobile, and other digital devices. Below are some areas where Java has been massively adopted beyond its general usage:\n\n### Java in virtual reality, augmented reality, and mixed reality\n\nJava has also been widely adopted for building applications that support interactivity and immersive experiences, particularly in the realms of virtual reality (VR), augmented reality (AR), and mixed reality (XR).\n\nFor example, in e-commerce, developers can use Java’s capabilities to create realistic and virtual environments that allow customers to visualize how different clothing items and footwear will look on them before making a purchase.\n\n### Java in AI\n\nAnother field in which Java is gaining adoption is AI. Java's maintainability, object-oriented approach, enhanced security, garbage collection, and platform independence have positioned it as a vital tool for modeling and powering AI applications. These features make Java well-suited for developing robust and scalable AI solutions that can effectively handle complex data processing and analysis tasks.\n\n## What is the demand for Java developers?\n\nAccording to Statista, [Java is one of the most widely embraced programming languages among developers,](https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/) owing to its speed, security, and reliability. Its versatility has led to widespread adoption across industries, including big data, banking, retail, and stock markets.\n\n![Most used programming language statistics](https://assets.roadmap.sh/guest/most-used-programming-languages.png)\n\nBased on the recently concluded [Stack Overflow survey](https://survey.stackoverflow.co/2023/#technology), it was found that 30.49% of the respondents utilize Java in their professional endeavors, while 35.17% are in the process of adopting Java to fulfill their programming needs.\n\nMoreover, the demand for Java developers is projected to continue rising, [with over 40% of recruiters actively seeking professionals skilled in Java programming](https://www.statista.com/statistics/1296727/programming-languages-demanded-by-recruiters/).\n\nIn summary, a Java full stack developer needs expertise in front-end technologies (such as HTML, CSS, JavaScript, and WebSocket) and back-end skills (including Database management, Java frameworks, version control, version control providers, APIs, caching, etc.). These skills are essential for building comprehensive applications and ensuring seamless communication between the client and server sides.\n\nWith billions of devices using Java across various platforms and its extensive adoption in big data, AI, VR/AR/XR, and more, the demand for Java developers is significant. This demand will persist for maintaining and developing new Java applications. Java’s ease of use, robustness, and scalability make it a top choice among developers, ensuring its relevance today and as technologies evolve.\n\nWhether you're just getting into the field or an experienced developer aiming to stay updated with technological advancements, roadmap.sh’s [Java roadmap](https://roadmap.sh/java) is an invaluable resource. Moreover, you now have the opportunity to generate your roadmap with AI, follow and track your progress, showcase your skills, and become part of a supportive community by [signing up](https://roadmap.sh/signup) on roadmap.sh platform.\n";
				}
				function compiledContent$k() {
					return html$k;
				}
				function getHeadings$k() {
					return [{"depth":2,"slug":"who-is-a-java-full-stack-developer","text":"Who is a Java full stack developer?"},{"depth":3,"slug":"required-skills-for-front-end-java-development","text":"Required skills for front-end Java development"},{"depth":3,"slug":"required-skills-for-back-end-java-development","text":"Required skills for back-end Java development"},{"depth":2,"slug":"how-to-stand-out-as-a-java-full-stack-developer","text":"How to stand out as a Java full stack developer"},{"depth":3,"slug":"java-virtual-machine-jvm","text":"Java Virtual Machine (JVM)"},{"depth":3,"slug":"jakarta-server-pages","text":"Jakarta Server Pages"},{"depth":3,"slug":"front-end-frameworks","text":"Front-end frameworks"},{"depth":3,"slug":"design-patterns","text":"Design patterns"},{"depth":3,"slug":"community","text":"Community"},{"depth":3,"slug":"soft-skills","text":"Soft skills"},{"depth":3,"slug":"continuous-learning","text":"Continuous learning"},{"depth":2,"slug":"javas-adoption-in-the-real-world","text":"Java’s adoption in the real-world"},{"depth":3,"slug":"java-in-virtual-reality-augmented-reality-and-mixed-reality","text":"Java in virtual reality, augmented reality, and mixed reality"},{"depth":3,"slug":"java-in-ai","text":"Java in AI"},{"depth":2,"slug":"what-is-the-demand-for-java-developers","text":"What is the demand for Java developers?"}];
				}

				const Content$k = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$k;
					content.file = file$k;
					content.url = url$k;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$k)}`;
				});

const __vite_glob_0_25 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$k,
	compiledContent: compiledContent$k,
	default: Content$k,
	file: file$k,
	frontmatter: frontmatter$k,
	getHeadings: getHeadings$k,
	rawContent: rawContent$k,
	url: url$k
}, Symbol.toStringTag, { value: 'Module' }));

const html$j = "<p>HTTP is the protocol that every web developer should know as it powers the whole web and knowing it is definitely going to help you develop better applications. In this guide, I am going to be discussing what HTTP is, how it came to be, where it is today and how did we get here.</p>\n<h3 id=\"what-is-http\">What is HTTP?</h3>\n<p>First things first, what is HTTP? HTTP is the <code>TCP/IP</code> based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet. By application layer protocol, I mean it’s just an abstraction layer that standardizes how the hosts (clients and servers) communicate and itself it depends upon <code>TCP/IP</code> to get request and response between the client and server. By default TCP port <code>80</code> is used but other ports can be used as well. HTTPS, however, uses port <code>443</code>.</p>\n<h3 id=\"http09--the-one-liner-1991\">HTTP/0.9 – The One Liner (1991)</h3>\n<p>The first documented version of HTTP was <a href=\"https://www.w3.org/Protocols/HTTP/AsImplemented.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\"><code>HTTP/0.9</code></a> which was put forward in 1991. It was the simplest protocol ever; having a single method called <code>GET</code>. If a client had to access some webpage on the server, it would have made the simple request like below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">GET /index.html</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And the response from server would have looked as follows</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">(response body) (connection closed)</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That is, the server would get the request, reply with the HTML in response and as soon as the content has been transferred, the connection will be closed. There were</p>\n<ul>\n<li>No headers</li>\n<li><code>GET</code> was the only allowed method</li>\n<li>Response had to be HTML</li>\n</ul>\n<p>As you can see, the protocol really had nothing more than being a stepping stone for what was to come.</p>\n<h3 id=\"http10---1996\">HTTP/1.0 - 1996</h3>\n<p>In 1996, the next version of HTTP i.e. <code>HTTP/1.0</code> evolved that vastly improved over the original version.</p>\n<p>Unlike <code>HTTP/0.9</code> which was only designed for HTML response, <code>HTTP/1.0</code> could now deal with other response formats i.e. images, video files, plain text or any other content type as well. It added more methods (i.e. <code>POST</code> and <code>HEAD</code>), request/response formats got changed, HTTP headers got added to both the request and responses, status codes were added to identify the response, character set support was introduced, multi-part types, authorization, caching, content encoding and more was included.</p>\n<p>Here is how a sample <code>HTTP/1.0</code> request and response might have looked like:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">GET / HTTP/1.0 Host: kamranahmed.info User-Agent: Mozilla/5.0 (Macintosh; Intel</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Mac OS X 10_10_5) Accept: */*</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, alongside the request, client has also sent its personal information, required response type etc. While in <code>HTTP/0.9</code> client could never send such information because there were no headers.</p>\n<p>Example response to the request above may have looked like below</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">HTTP/1.0 200 OK Content-Type: text/plain Content-Length: 137582 Expires: Thu, 05</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Dec 1997 16:00:00 GMT Last-Modified: Wed, 5 August 1996 15:55:28 GMT Server:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">Apache 0.84 (response body) (connection closed)</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In the very beginning of the response there is <code>HTTP/1.0</code> (HTTP followed by the version number), then there is the status code <code>200</code> followed by the reason phrase (or description of the status code, if you will).</p>\n<p>In this newer version, request and response headers were still kept as <code>ASCII</code> encoded, but the response body could have been of any type i.e. image, video, HTML, plain text or any other content type. So, now that server could send any content type to the client; not so long after the introduction, the term “Hyper Text” in <code>HTTP</code> became misnomer. <code>HMTP</code> or Hypermedia transfer protocol might have made more sense but, I guess, we are stuck with the name for life.</p>\n<p>One of the major drawbacks of <code>HTTP/1.0</code> were you couldn’t have multiple requests per connection. That is, whenever a client will need something from the server, it will have to open a new TCP connection and after that single request has been fulfilled, connection will be closed. And for any next requirement, it will have to be on a new connection. Why is it bad? Well, let’s assume that you visit a webpage having <code>10</code> images, <code>5</code> stylesheets and <code>5</code> javascript files, totalling to <code>20</code> items that needs to fetched when request to that webpage is made. Since the server closes the connection as soon as the request has been fulfilled, there will be a series of <code>20</code> separate connections where each of the items will be served one by one on their separate connections. This large number of connections results in a serious performance hit as requiring a new <code>TCP</code> connection imposes a significant performance penalty because of three-way handshake followed by slow-start.</p>\n<h4 id=\"three-way-handshake\">Three-way Handshake</h4>\n<p>Three-way handshake in its simplest form is that all the <code>TCP</code> connections begin with a three-way handshake in which the client and the server share a series of packets before starting to share the application data.</p>\n<ul>\n<li><code>SYN</code> - Client picks up a random number, let’s say <code>x</code>, and sends it to the server.</li>\n<li><code>SYN ACK</code> - Server acknowledges the request by sending an <code>ACK</code> packet back to the client which is made up of a random number, let’s say <code>y</code> picked up by server and the number <code>x+1</code> where <code>x</code> is the number that was sent by the client</li>\n<li><code>ACK</code> - Client increments the number <code>y</code> received from the server and sends an <code>ACK</code> packet back with the number <code>y+1</code></li>\n</ul>\n<p>Once the three-way handshake is completed, the data sharing between the client and server may begin. It should be noted that the client may start sending the application data as soon as it dispatches the last <code>ACK</code> packet but the server will still have to wait for the <code>ACK</code> packet to be received in order to fulfill the request.</p>\n<p><img src=\"https://i.imgur.com/uERG2G2.png\" alt=\"Three-way Handshake\"></p>\n<blockquote>\n<p>Please note that there is a minor issue with the image, the last <code>ACK</code> packet sent by the client to end the handshake contains only <code>y+1</code> i.e. it should have been <code>ACK:y+1</code> instead of <code>ACK: x+1, y+1</code></p>\n</blockquote>\n<p>However, some implementations of <code>HTTP/1.0</code> tried to overcome this issue by introducing a new header called <code>Connection: keep-alive</code> which was meant to tell the server “Hey server, do not close this connection, I need it again”. But still, it wasn’t that widely supported and the problem still persisted.</p>\n<p>Apart from being connectionless, <code>HTTP</code> also is a stateless protocol i.e. server doesn’t maintain the information about the client and so each of the requests has to have the information necessary for the server to fulfill the request on its own without any association with any old requests. And so this adds fuel to the fire i.e. apart from the large number of connections that the client has to open, it also has to send some redundant data on the wire causing increased bandwidth usage.</p>\n<h3 id=\"http11---1999\">HTTP/1.1 - 1999</h3>\n<p>After merely 3 years of <code>HTTP/1.0</code>, the next version i.e. <code>HTTP/1.1</code> was released in 1999; which made alot of improvements over its predecessor. The major improvements over <code>HTTP/1.0</code> included</p>\n<ul>\n<li>\n<p><strong>New HTTP methods</strong> were added, which introduced <code>PUT</code>, <code>PATCH</code>, <code>OPTIONS</code>, <code>DELETE</code></p>\n</li>\n<li>\n<p><strong>Hostname Identification</strong> In <code>HTTP/1.0</code> <code>Host</code> header wasn’t required but <code>HTTP/1.1</code> made it required.</p>\n</li>\n<li>\n<p><strong>Persistent Connections</strong> As discussed above, in <code>HTTP/1.0</code> there was only one request per connection and the connection was closed as soon as the request was fulfilled which resulted in acute performance hit and latency problems. <code>HTTP/1.1</code> introduced the persistent connections i.e. <strong>connections weren’t closed by default</strong> and were kept open which allowed multiple sequential requests. To close the connections, the header <code>Connection: close</code> had to be available on the request. Clients usually send this header in the last request to safely close the connection.</p>\n</li>\n<li>\n<p><strong>Pipelining</strong> It also introduced the support for pipelining, where the client could send multiple requests to the server without waiting for the response from server on the same connection and server had to send the response in the same sequence in which requests were received. But how does the client know that this is the point where first response download completes and the content for next response starts, you may ask! Well, to solve this, there must be <code>Content-Length</code> header present which clients can use to identify where the response ends and it can start waiting for the next response.</p>\n<blockquote>\n<p>It should be noted that in order to benefit from persistent connections or pipelining, <code>Content-Length</code> header must be available on the response, because this would let the client know when the transmission completes and it can send the next request (in normal sequential way of sending requests) or start waiting for the next response (when pipelining is enabled).</p>\n</blockquote>\n<blockquote>\n<p>But there was still an issue with this approach. And that is, what if the data is dynamic and server cannot find the content length before hand? Well in that case, you really can’t benefit from persistent connections, could you?! In order to solve this <code>HTTP/1.1</code> introduced chunked encoding. In such cases server may omit content-Length in favor of chunked encoding (more to it in a moment). However, if none of them are available, then the connection must be closed at the end of request.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Chunked Transfers</strong> In case of dynamic content, when the server cannot really find out the <code>Content-Length</code> when the transmission starts, it may start sending the content in pieces (chunk by chunk) and add the <code>Content-Length</code> for each chunk when it is sent. And when all of the chunks are sent i.e. whole transmission has completed, it sends an empty chunk i.e. the one with <code>Content-Length</code> set to zero in order to identify the client that transmission has completed. In order to notify the client about the chunked transfer, server includes the header <code>Transfer-Encoding: chunked</code></p>\n</li>\n<li>\n<p>Unlike <code>HTTP/1.0</code> which had Basic authentication only, <code>HTTP/1.1</code> included digest and proxy authentication</p>\n</li>\n<li>\n<p>Caching</p>\n</li>\n<li>\n<p>Byte Ranges</p>\n</li>\n<li>\n<p>Character sets</p>\n</li>\n<li>\n<p>Language negotiation</p>\n</li>\n<li>\n<p>Client cookies</p>\n</li>\n<li>\n<p>Enhanced compression support</p>\n</li>\n<li>\n<p>New status codes</p>\n</li>\n<li>\n<p>..and more</p>\n</li>\n</ul>\n<p>I am not going to dwell about all the <code>HTTP/1.1</code> features in this post as it is a topic in itself and you can already find a lot about it. The one such document that I would recommend you to read is <a href=\"https://www.ra.ethz.ch/cdstore/www8/data/2136/pdf/pd1.pdf\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Key differences between <code>HTTP/1.0</code> and HTTP/1.1</a> and here is the link to <a href=\"https://tools.ietf.org/html/rfc2616\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">original RFC</a> for the overachievers.</p>\n<p><code>HTTP/1.1</code> was introduced in 1999 and it had been a standard for many years. Although, it improved alot over its predecessor; with the web changing everyday, it started to show its age. Loading a web page these days is more resource-intensive than it ever was. A simple webpage these days has to open more than 30 connections. Well <code>HTTP/1.1</code> has persistent connections, then why so many connections? you say! The reason is, in <code>HTTP/1.1</code> it can only have one outstanding connection at any moment of time. <code>HTTP/1.1</code> tried to fix this by introducing pipelining but it didn’t completely address the issue because of the <strong>head-of-line blocking</strong> where a slow or heavy request may block the requests behind and once a request gets stuck in a pipeline, it will have to wait for the next requests to be fulfilled. To overcome these shortcomings of <code>HTTP/1.1</code>, the developers started implementing the workarounds, for example use of spritesheets, encoded images in CSS, single humongous CSS/Javascript files, <a href=\"https://www.maxcdn.com/one/visual-glossary/domain-sharding-2/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">domain sharding</a> etc.</p>\n<h3 id=\"spdy---2009\">SPDY - 2009</h3>\n<p>Google went ahead and started experimenting with alternative protocols to make the web faster and improving web security while reducing the latency of web pages. In 2009, they announced <code>SPDY</code>.</p>\n<blockquote>\n<p><code>SPDY</code> is a trademark of Google and isn’t an acronym.</p>\n</blockquote>\n<p>It was seen that if we keep increasing the bandwidth, the network performance increases in the beginning but a point comes when there is not much of a performance gain. But if you do the same with latency i.e. if we keep dropping the latency, there is a constant performance gain. This was the core idea for performance gain behind <code>SPDY</code>, decrease the latency to increase the network performance.</p>\n<blockquote>\n<p>For those who don’t know the difference, latency is the delay i.e. how long it takes for data to travel between the source and destination (measured in milliseconds) and bandwidth is the amount of data transferred per second (bits per second).</p>\n</blockquote>\n<p>The features of <code>SPDY</code> included, multiplexing, compression, prioritization, security etc. I am not going to get into the details of SPDY, as you will get the idea when we get into the nitty gritty of <code>HTTP/2</code> in the next section as I said <code>HTTP/2</code> is mostly inspired from SPDY.</p>\n<p><code>SPDY</code> didn’t really try to replace HTTP; it was a translation layer over HTTP which existed at the application layer and modified the request before sending it over to the wire. It started to become a defacto standards and majority of browsers started implementing it.</p>\n<p>In 2015, at Google, they didn’t want to have two competing standards and so they decided to merge it into HTTP while giving birth to <code>HTTP/2</code> and deprecating SPDY.</p>\n<h3 id=\"http2---2015\">HTTP/2 - 2015</h3>\n<p>By now, you must be convinced that why we needed another revision of the HTTP protocol. <code>HTTP/2</code> was designed for low latency transport of content. The key features or differences from the old version of <code>HTTP/1.1</code> include</p>\n<ul>\n<li>Binary instead of Textual</li>\n<li>Multiplexing - Multiple asynchronous HTTP requests over a single connection</li>\n<li>Header compression using HPACK</li>\n<li>Server Push - Multiple responses for single request</li>\n<li>Request Prioritization</li>\n<li>Security</li>\n</ul>\n<p><img src=\"https://i.imgur.com/S85j8gg.png\" alt=\"HTTP Model\"></p>\n<h4 id=\"1-binary-protocol\">1. Binary Protocol</h4>\n<p><code>HTTP/2</code> tends to address the issue of increased latency that existed in HTTP/1.x by making it a binary protocol. Being a binary protocol, it easier to parse but unlike <code>HTTP/1.x</code> it is no longer readable by the human eye. The major building blocks of <code>HTTP/2</code> are Frames and Streams</p>\n<h5 id=\"frames-and-streams\">Frames and Streams</h5>\n<p>HTTP messages are now composed of one or more frames. There is a <code>HEADERS</code> frame for the meta data and <code>DATA</code> frame for the payload and there exist several other types of frames (<code>HEADERS</code>, <code>DATA</code>, <code>RST_STREAM</code>, <code>SETTINGS</code>, <code>PRIORITY</code> etc) that you can check through <a href=\"https:/http2.github.iohttp2-spec/#FrameTypes\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">the <code>HTTP/2</code> specs</a>.</p>\n<p>Every <code>HTTP/2</code> request and response is given a unique stream ID and it is divided into frames. Frames are nothing but binary pieces of data. A collection of frames is called a Stream. Each frame has a stream id that identifies the stream to which it belongs and each frame has a common header. Also, apart from stream ID being unique, it is worth mentioning that, any request initiated by client uses odd numbers and the response from server has even numbers stream IDs.</p>\n<p>Apart from the <code>HEADERS</code> and <code>DATA</code>, another frame type that I think worth mentioning here is <code>RST_STREAM</code> which is a special frame type that is used to abort some stream i.e. client may send this frame to let the server know that I don’t need this stream anymore. In <code>HTTP/1.1</code> the only way to make the server stop sending the response to client was closing the connection which resulted in increased latency because a new connection had to be opened for any consecutive requests. While in HTTP/2, client can use <code>RST_STREAM</code> and stop receiving a specific stream while the connection will still be open and the other streams will still be in play.</p>\n<h4 id=\"2-multiplexing\">2. Multiplexing</h4>\n<p>Since <code>HTTP/2</code> is now a binary protocol and as I said above that it uses frames and streams for requests and responses, once a TCP connection is opened, all the streams are sent asynchronously through the same connection without opening any additional connections. And in turn, the server responds in the same asynchronous way i.e. the response has no order and the client uses the assigned stream id to identify the stream to which a specific packet belongs. This also solves the <strong>head-of-line blocking</strong> issue that existed in HTTP/1.x i.e. the client will not have to wait for the request that is taking time and other requests will still be getting processed.</p>\n<h4 id=\"3-hpack-header-compression\">3. HPACK Header Compression</h4>\n<p>It was part of a separate RFC which was specifically aimed at optimizing the sent headers. The essence of it is that when we are constantly accessing the server from a same client there is alot of redundant data that we are sending in the headers over and over, and sometimes there might be cookies increasing the headers size which results in bandwidth usage and increased latency. To overcome this, <code>HTTP/2</code> introduced header compression.</p>\n<p><img src=\"https://i.imgur.com/3IPWXvR.png\" alt=\"Header Compression\"></p>\n<p>Unlike request and response, headers are not compressed in <code>gzip</code> or <code>compress</code> etc formats but there is a different mechanism in place for header compression which is literal values are encoded using Huffman code and a headers table is maintained by the client and server and both the client and server omit any repetitive headers (e.g. user agent etc) in the subsequent requests and reference them using the headers table maintained by both.</p>\n<p>While we are talking headers, let me add here that the headers are still the same as in HTTP/1.1, except for the addition of some pseudo headers i.e. <code>:method</code>, <code>:scheme</code>, <code>:host</code> and <code>:path</code></p>\n<h4 id=\"4-server-push\">4. Server Push</h4>\n<p>Server push is another tremendous feature of <code>HTTP/2</code> where the server, knowing that the client is going to ask for a certain resource, can push it to the client without even client asking for it. For example, let’s say a browser loads a web page, it parses the whole page to find out the remote content that it has to load from the server and then sends consequent requests to the server to get that content.</p>\n<p>Server push allows the server to decrease the round trips by pushing the data that it knows that client is going to demand. How it is done is, server sends a special frame called <code>PUSH_PROMISE</code> notifying the client that, “Hey, I am about to send this resource to you! Do not ask me for it.” The <code>PUSH_PROMISE</code> frame is associated with the stream that caused the push to happen and it contains the promised stream ID i.e. the stream on which the server will send the resource to be pushed.</p>\n<h4 id=\"5-request-prioritization\">5. Request Prioritization</h4>\n<p>A client can assign a priority to a stream by including the prioritization information in the <code>HEADERS</code> frame by which a stream is opened. At any other time, client can send a <code>PRIORITY</code> frame to change the priority of a stream.</p>\n<p>Without any priority information, server processes the requests asynchronously i.e. without any order. If there is priority assigned to a stream, then based on this prioritization information, server decides how much of the resources need to be given to process which request.</p>\n<h4 id=\"6-security\">6. Security</h4>\n<p>There was extensive discussion on whether security (through <code>TLS</code>) should be made mandatory for <code>HTTP/2</code> or not. In the end, it was decided not to make it mandatory. However, most vendors stated that they will only support <code>HTTP/2</code> when it is used over <code>TLS</code>. So, although <code>HTTP/2</code> doesn’t require encryption by specs but it has kind of become mandatory by default anyway. With that out of the way, <code>HTTP/2</code> when implemented over <code>TLS</code> does impose some requirements i.e. <code>TLS</code> version <code>1.2</code> or higher must be used, there must be a certain level of minimum key sizes, ephemeral keys are required etc.</p>\n<p><code>HTTP/2</code> is here and it has already <a href=\"https://caniuse.com/#search=http2\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">surpassed SPDY in adaption</a> which is gradually increasing. <code>HTTP/2</code> has alot to offer in terms of performance gain and it is about time we should start using it.</p>\n<p>For anyone interested in further details here is the <a href=\"https:/http2.github.iohttp2-spec\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">link to specs</a> and a link <a href=\"https://www.http2demo.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">demonstrating the performance benefits of <code>HTTP/2</code></a>.</p>\n<p>And that about wraps it up. Until next time! stay tuned.</p>";

				const frontmatter$j = {"title":"Journey to HTTP/2","description":"The evolution of HTTP. How it all started and where we stand today","authorId":"kamran","seo":{"title":"Journey to HTTP/2 - roadmap.sh","description":"The evolution of HTTP. How it all started and where we stand today"},"isNew":false,"type":"textual","date":"2018-12-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$j = "/workspaces/developer-roadmap/src/data/guides/journey-to-http2.md";
				const url$j = undefined;
				function rawContent$j() {
					return "\nHTTP is the protocol that every web developer should know as it powers the whole web and knowing it is definitely going to help you develop better applications. In this guide, I am going to be discussing what HTTP is, how it came to be, where it is today and how did we get here.\n\n### What is HTTP?\n\nFirst things first, what is HTTP? HTTP is the `TCP/IP` based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet. By application layer protocol, I mean it's just an abstraction layer that standardizes how the hosts (clients and servers) communicate and itself it depends upon `TCP/IP` to get request and response between the client and server. By default TCP port `80` is used but other ports can be used as well. HTTPS, however, uses port `443`.\n\n### HTTP/0.9 – The One Liner (1991)\n\nThe first documented version of HTTP was [`HTTP/0.9`](https://www.w3.org/Protocols/HTTP/AsImplemented.html) which was put forward in 1991. It was the simplest protocol ever; having a single method called `GET`. If a client had to access some webpage on the server, it would have made the simple request like below\n\n```html\nGET /index.html\n```\n\nAnd the response from server would have looked as follows\n\n```html\n(response body) (connection closed)\n```\n\nThat is, the server would get the request, reply with the HTML in response and as soon as the content has been transferred, the connection will be closed. There were\n\n- No headers\n- `GET` was the only allowed method\n- Response had to be HTML\n\nAs you can see, the protocol really had nothing more than being a stepping stone for what was to come.\n\n### HTTP/1.0 - 1996\n\nIn 1996, the next version of HTTP i.e. `HTTP/1.0` evolved that vastly improved over the original version.\n\nUnlike `HTTP/0.9` which was only designed for HTML response, `HTTP/1.0` could now deal with other response formats i.e. images, video files, plain text or any other content type as well. It added more methods (i.e. `POST` and `HEAD`), request/response formats got changed, HTTP headers got added to both the request and responses, status codes were added to identify the response, character set support was introduced, multi-part types, authorization, caching, content encoding and more was included.\n\nHere is how a sample `HTTP/1.0` request and response might have looked like:\n\n```html\nGET / HTTP/1.0 Host: kamranahmed.info User-Agent: Mozilla/5.0 (Macintosh; Intel\nMac OS X 10_10_5) Accept: */*\n```\n\nAs you can see, alongside the request, client has also sent its personal information, required response type etc. While in `HTTP/0.9` client could never send such information because there were no headers.\n\nExample response to the request above may have looked like below\n\n```html\nHTTP/1.0 200 OK Content-Type: text/plain Content-Length: 137582 Expires: Thu, 05\nDec 1997 16:00:00 GMT Last-Modified: Wed, 5 August 1996 15:55:28 GMT Server:\nApache 0.84 (response body) (connection closed)\n```\n\nIn the very beginning of the response there is `HTTP/1.0` (HTTP followed by the version number), then there is the status code `200` followed by the reason phrase (or description of the status code, if you will).\n\nIn this newer version, request and response headers were still kept as `ASCII` encoded, but the response body could have been of any type i.e. image, video, HTML, plain text or any other content type. So, now that server could send any content type to the client; not so long after the introduction, the term \"Hyper Text\" in `HTTP` became misnomer. `HMTP` or Hypermedia transfer protocol might have made more sense but, I guess, we are stuck with the name for life.\n\nOne of the major drawbacks of `HTTP/1.0` were you couldn't have multiple requests per connection. That is, whenever a client will need something from the server, it will have to open a new TCP connection and after that single request has been fulfilled, connection will be closed. And for any next requirement, it will have to be on a new connection. Why is it bad? Well, let's assume that you visit a webpage having `10` images, `5` stylesheets and `5` javascript files, totalling to `20` items that needs to fetched when request to that webpage is made. Since the server closes the connection as soon as the request has been fulfilled, there will be a series of `20` separate connections where each of the items will be served one by one on their separate connections. This large number of connections results in a serious performance hit as requiring a new `TCP` connection imposes a significant performance penalty because of three-way handshake followed by slow-start.\n\n#### Three-way Handshake\n\nThree-way handshake in its simplest form is that all the `TCP` connections begin with a three-way handshake in which the client and the server share a series of packets before starting to share the application data.\n\n- `SYN` - Client picks up a random number, let's say `x`, and sends it to the server.\n- `SYN ACK` - Server acknowledges the request by sending an `ACK` packet back to the client which is made up of a random number, let's say `y` picked up by server and the number `x+1` where `x` is the number that was sent by the client\n- `ACK` - Client increments the number `y` received from the server and sends an `ACK` packet back with the number `y+1`\n\nOnce the three-way handshake is completed, the data sharing between the client and server may begin. It should be noted that the client may start sending the application data as soon as it dispatches the last `ACK` packet but the server will still have to wait for the `ACK` packet to be received in order to fulfill the request.\n\n![Three-way Handshake](https://i.imgur.com/uERG2G2.png)\n\n> Please note that there is a minor issue with the image, the last `ACK` packet sent by the client to end the handshake contains only `y+1` i.e. it should have been `ACK:y+1` instead of `ACK: x+1, y+1`\n\nHowever, some implementations of `HTTP/1.0` tried to overcome this issue by introducing a new header called `Connection: keep-alive` which was meant to tell the server \"Hey server, do not close this connection, I need it again\". But still, it wasn't that widely supported and the problem still persisted.\n\nApart from being connectionless, `HTTP` also is a stateless protocol i.e. server doesn't maintain the information about the client and so each of the requests has to have the information necessary for the server to fulfill the request on its own without any association with any old requests. And so this adds fuel to the fire i.e. apart from the large number of connections that the client has to open, it also has to send some redundant data on the wire causing increased bandwidth usage.\n\n### HTTP/1.1 - 1999\n\nAfter merely 3 years of `HTTP/1.0`, the next version i.e. `HTTP/1.1` was released in 1999; which made alot of improvements over its predecessor. The major improvements over `HTTP/1.0` included\n\n- **New HTTP methods** were added, which introduced `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n\n- **Hostname Identification** In `HTTP/1.0` `Host` header wasn't required but `HTTP/1.1` made it required.\n\n- **Persistent Connections** As discussed above, in `HTTP/1.0` there was only one request per connection and the connection was closed as soon as the request was fulfilled which resulted in acute performance hit and latency problems. `HTTP/1.1` introduced the persistent connections i.e. **connections weren't closed by default** and were kept open which allowed multiple sequential requests. To close the connections, the header `Connection: close` had to be available on the request. Clients usually send this header in the last request to safely close the connection.\n\n- **Pipelining** It also introduced the support for pipelining, where the client could send multiple requests to the server without waiting for the response from server on the same connection and server had to send the response in the same sequence in which requests were received. But how does the client know that this is the point where first response download completes and the content for next response starts, you may ask! Well, to solve this, there must be `Content-Length` header present which clients can use to identify where the response ends and it can start waiting for the next response.\n\n  > It should be noted that in order to benefit from persistent connections or pipelining, `Content-Length` header must be available on the response, because this would let the client know when the transmission completes and it can send the next request (in normal sequential way of sending requests) or start waiting for the next response (when pipelining is enabled).\n\n  > But there was still an issue with this approach. And that is, what if the data is dynamic and server cannot find the content length before hand? Well in that case, you really can't benefit from persistent connections, could you?! In order to solve this `HTTP/1.1` introduced chunked encoding. In such cases server may omit content-Length in favor of chunked encoding (more to it in a moment). However, if none of them are available, then the connection must be closed at the end of request.\n\n- **Chunked Transfers** In case of dynamic content, when the server cannot really find out the `Content-Length` when the transmission starts, it may start sending the content in pieces (chunk by chunk) and add the `Content-Length` for each chunk when it is sent. And when all of the chunks are sent i.e. whole transmission has completed, it sends an empty chunk i.e. the one with `Content-Length` set to zero in order to identify the client that transmission has completed. In order to notify the client about the chunked transfer, server includes the header `Transfer-Encoding: chunked`\n\n- Unlike `HTTP/1.0` which had Basic authentication only, `HTTP/1.1` included digest and proxy authentication\n- Caching\n- Byte Ranges\n- Character sets\n- Language negotiation\n- Client cookies\n- Enhanced compression support\n- New status codes\n- ..and more\n\nI am not going to dwell about all the `HTTP/1.1` features in this post as it is a topic in itself and you can already find a lot about it. The one such document that I would recommend you to read is [Key differences between `HTTP/1.0` and HTTP/1.1](https://www.ra.ethz.ch/cdstore/www8/data/2136/pdf/pd1.pdf) and here is the link to [original RFC](https://tools.ietf.org/html/rfc2616) for the overachievers.\n\n`HTTP/1.1` was introduced in 1999 and it had been a standard for many years. Although, it improved alot over its predecessor; with the web changing everyday, it started to show its age. Loading a web page these days is more resource-intensive than it ever was. A simple webpage these days has to open more than 30 connections. Well `HTTP/1.1` has persistent connections, then why so many connections? you say! The reason is, in `HTTP/1.1` it can only have one outstanding connection at any moment of time. `HTTP/1.1` tried to fix this by introducing pipelining but it didn't completely address the issue because of the **head-of-line blocking** where a slow or heavy request may block the requests behind and once a request gets stuck in a pipeline, it will have to wait for the next requests to be fulfilled. To overcome these shortcomings of `HTTP/1.1`, the developers started implementing the workarounds, for example use of spritesheets, encoded images in CSS, single humongous CSS/Javascript files, [domain sharding](https://www.maxcdn.com/one/visual-glossary/domain-sharding-2/) etc.\n\n### SPDY - 2009\n\nGoogle went ahead and started experimenting with alternative protocols to make the web faster and improving web security while reducing the latency of web pages. In 2009, they announced `SPDY`.\n\n> `SPDY` is a trademark of Google and isn't an acronym.\n\nIt was seen that if we keep increasing the bandwidth, the network performance increases in the beginning but a point comes when there is not much of a performance gain. But if you do the same with latency i.e. if we keep dropping the latency, there is a constant performance gain. This was the core idea for performance gain behind `SPDY`, decrease the latency to increase the network performance.\n\n> For those who don't know the difference, latency is the delay i.e. how long it takes for data to travel between the source and destination (measured in milliseconds) and bandwidth is the amount of data transferred per second (bits per second).\n\nThe features of `SPDY` included, multiplexing, compression, prioritization, security etc. I am not going to get into the details of SPDY, as you will get the idea when we get into the nitty gritty of `HTTP/2` in the next section as I said `HTTP/2` is mostly inspired from SPDY.\n\n`SPDY` didn't really try to replace HTTP; it was a translation layer over HTTP which existed at the application layer and modified the request before sending it over to the wire. It started to become a defacto standards and majority of browsers started implementing it.\n\nIn 2015, at Google, they didn't want to have two competing standards and so they decided to merge it into HTTP while giving birth to `HTTP/2` and deprecating SPDY.\n\n### HTTP/2 - 2015\n\nBy now, you must be convinced that why we needed another revision of the HTTP protocol. `HTTP/2` was designed for low latency transport of content. The key features or differences from the old version of `HTTP/1.1` include\n\n- Binary instead of Textual\n- Multiplexing - Multiple asynchronous HTTP requests over a single connection\n- Header compression using HPACK\n- Server Push - Multiple responses for single request\n- Request Prioritization\n- Security\n\n![HTTP Model](https://i.imgur.com/S85j8gg.png)\n\n#### 1. Binary Protocol\n\n`HTTP/2` tends to address the issue of increased latency that existed in HTTP/1.x by making it a binary protocol. Being a binary protocol, it easier to parse but unlike `HTTP/1.x` it is no longer readable by the human eye. The major building blocks of `HTTP/2` are Frames and Streams\n\n##### Frames and Streams\n\nHTTP messages are now composed of one or more frames. There is a `HEADERS` frame for the meta data and `DATA` frame for the payload and there exist several other types of frames (`HEADERS`, `DATA`, `RST_STREAM`, `SETTINGS`, `PRIORITY` etc) that you can check through [the `HTTP/2` specs](https:/http2.github.iohttp2-spec/#FrameTypes).\n\nEvery `HTTP/2` request and response is given a unique stream ID and it is divided into frames. Frames are nothing but binary pieces of data. A collection of frames is called a Stream. Each frame has a stream id that identifies the stream to which it belongs and each frame has a common header. Also, apart from stream ID being unique, it is worth mentioning that, any request initiated by client uses odd numbers and the response from server has even numbers stream IDs.\n\nApart from the `HEADERS` and `DATA`, another frame type that I think worth mentioning here is `RST_STREAM` which is a special frame type that is used to abort some stream i.e. client may send this frame to let the server know that I don't need this stream anymore. In `HTTP/1.1` the only way to make the server stop sending the response to client was closing the connection which resulted in increased latency because a new connection had to be opened for any consecutive requests. While in HTTP/2, client can use `RST_STREAM` and stop receiving a specific stream while the connection will still be open and the other streams will still be in play.\n\n#### 2. Multiplexing\n\nSince `HTTP/2` is now a binary protocol and as I said above that it uses frames and streams for requests and responses, once a TCP connection is opened, all the streams are sent asynchronously through the same connection without opening any additional connections. And in turn, the server responds in the same asynchronous way i.e. the response has no order and the client uses the assigned stream id to identify the stream to which a specific packet belongs. This also solves the **head-of-line blocking** issue that existed in HTTP/1.x i.e. the client will not have to wait for the request that is taking time and other requests will still be getting processed.\n\n#### 3. HPACK Header Compression\n\nIt was part of a separate RFC which was specifically aimed at optimizing the sent headers. The essence of it is that when we are constantly accessing the server from a same client there is alot of redundant data that we are sending in the headers over and over, and sometimes there might be cookies increasing the headers size which results in bandwidth usage and increased latency. To overcome this, `HTTP/2` introduced header compression.\n\n![Header Compression](https://i.imgur.com/3IPWXvR.png)\n\nUnlike request and response, headers are not compressed in `gzip` or `compress` etc formats but there is a different mechanism in place for header compression which is literal values are encoded using Huffman code and a headers table is maintained by the client and server and both the client and server omit any repetitive headers (e.g. user agent etc) in the subsequent requests and reference them using the headers table maintained by both.\n\nWhile we are talking headers, let me add here that the headers are still the same as in HTTP/1.1, except for the addition of some pseudo headers i.e. `:method`, `:scheme`, `:host` and `:path`\n\n#### 4. Server Push\n\nServer push is another tremendous feature of `HTTP/2` where the server, knowing that the client is going to ask for a certain resource, can push it to the client without even client asking for it. For example, let's say a browser loads a web page, it parses the whole page to find out the remote content that it has to load from the server and then sends consequent requests to the server to get that content.\n\nServer push allows the server to decrease the round trips by pushing the data that it knows that client is going to demand. How it is done is, server sends a special frame called `PUSH_PROMISE` notifying the client that, \"Hey, I am about to send this resource to you! Do not ask me for it.\" The `PUSH_PROMISE` frame is associated with the stream that caused the push to happen and it contains the promised stream ID i.e. the stream on which the server will send the resource to be pushed.\n\n#### 5. Request Prioritization\n\nA client can assign a priority to a stream by including the prioritization information in the `HEADERS` frame by which a stream is opened. At any other time, client can send a `PRIORITY` frame to change the priority of a stream.\n\nWithout any priority information, server processes the requests asynchronously i.e. without any order. If there is priority assigned to a stream, then based on this prioritization information, server decides how much of the resources need to be given to process which request.\n\n#### 6. Security\n\nThere was extensive discussion on whether security (through `TLS`) should be made mandatory for `HTTP/2` or not. In the end, it was decided not to make it mandatory. However, most vendors stated that they will only support `HTTP/2` when it is used over `TLS`. So, although `HTTP/2` doesn't require encryption by specs but it has kind of become mandatory by default anyway. With that out of the way, `HTTP/2` when implemented over `TLS` does impose some requirements i.e. `TLS` version `1.2` or higher must be used, there must be a certain level of minimum key sizes, ephemeral keys are required etc.\n\n`HTTP/2` is here and it has already [surpassed SPDY in adaption](https://caniuse.com/#search=http2) which is gradually increasing. `HTTP/2` has alot to offer in terms of performance gain and it is about time we should start using it.\n\nFor anyone interested in further details here is the [link to specs](https:/http2.github.iohttp2-spec) and a link [demonstrating the performance benefits of `HTTP/2`](https://www.http2demo.io/).\n\nAnd that about wraps it up. Until next time! stay tuned.\n";
				}
				function compiledContent$j() {
					return html$j;
				}
				function getHeadings$j() {
					return [{"depth":3,"slug":"what-is-http","text":"What is HTTP?"},{"depth":3,"slug":"http09--the-one-liner-1991","text":"HTTP/0.9 – The One Liner (1991)"},{"depth":3,"slug":"http10---1996","text":"HTTP/1.0 - 1996"},{"depth":4,"slug":"three-way-handshake","text":"Three-way Handshake"},{"depth":3,"slug":"http11---1999","text":"HTTP/1.1 - 1999"},{"depth":3,"slug":"spdy---2009","text":"SPDY - 2009"},{"depth":3,"slug":"http2---2015","text":"HTTP/2 - 2015"},{"depth":4,"slug":"1-binary-protocol","text":"1. Binary Protocol"},{"depth":5,"slug":"frames-and-streams","text":"Frames and Streams"},{"depth":4,"slug":"2-multiplexing","text":"2. Multiplexing"},{"depth":4,"slug":"3-hpack-header-compression","text":"3. HPACK Header Compression"},{"depth":4,"slug":"4-server-push","text":"4. Server Push"},{"depth":4,"slug":"5-request-prioritization","text":"5. Request Prioritization"},{"depth":4,"slug":"6-security","text":"6. Security"}];
				}

				const Content$j = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$j;
					content.file = file$j;
					content.url = url$j;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$j)}`;
				});

const __vite_glob_0_26 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$j,
	compiledContent: compiledContent$j,
	default: Content$j,
	file: file$j,
	frontmatter: frontmatter$j,
	getHeadings: getHeadings$j,
	rawContent: rawContent$j,
	url: url$j
}, Symbol.toStringTag, { value: 'Module' }));

const html$i = "<p><a href=\"/guides/jwt-authentication.png\"><img src=\"/guides/jwt-authentication.png\" alt=\"JWT Authentication\"></a></p>";

				const frontmatter$i = {"title":"JWT Authentication","description":"Understand what is JWT authentication and how is it implemented","authorId":"kamran","seo":{"title":"JWT Authentication - roadmap.sh","description":"Understand what is JWT authentication and how is it implemented"},"isNew":false,"type":"visual","date":"2021-06-20T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$i = "/workspaces/developer-roadmap/src/data/guides/jwt-authentication.md";
				const url$i = undefined;
				function rawContent$i() {
					return "\n[![JWT Authentication](/guides/jwt-authentication.png)](/guides/jwt-authentication.png)\n";
				}
				function compiledContent$i() {
					return html$i;
				}
				function getHeadings$i() {
					return [];
				}

				const Content$i = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$i;
					content.file = file$i;
					content.url = url$i;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$i)}`;
				});

const __vite_glob_0_27 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$i,
	compiledContent: compiledContent$i,
	default: Content$i,
	file: file$i,
	frontmatter: frontmatter$i,
	getHeadings: getHeadings$i,
	rawContent: rawContent$i,
	url: url$i
}, Symbol.toStringTag, { value: 'Module' }));

const html$h = "<p>I have been working on redoing the <a href=\"https://roadmap.sh\" target=\"_blank\">roadmaps</a> – splitting the skillset based on the seniority levels to make them easier to follow and not scare the new developers away. Since the roadmaps are going to be just about the technical knowledge, I thought it would be a good idea to reiterate and have an article on what I think of different seniority roles.</p>\n<p>I have seen many organizations decide the seniority of developers by giving more significance to the years of experience than they should. I have seen developers labeled “Junior” doing the work of Senior Developers and I have seen “Lead” developers who weren’t even qualified to be called “Senior”. The seniority of a developer cannot just be decided by their age, years of experience or technical knowledge that they have got. There are other factors in play here — their perception of work, how they interact with their peers and how they approach problems. We discuss these three key factors in detail for each of the seniority levels below.</p>\n<h3 id=\"different-seniority-titles\">Different Seniority Titles</h3>\n<p>Different organizations might have different seniority titles but they mainly fall into three categories:</p>\n<ul>\n<li>Junior Developer</li>\n<li>Mid Level Developer</li>\n<li>Senior Developer</li>\n</ul>\n<h3 id=\"junior-developer\">Junior Developer</h3>\n<p>Junior developers are normally fresh graduates and it’s either they don’t have or they have minimal industry experience. Not only they have weak coding skills but there are also a few other things that give Junior developers away:</p>\n<ul>\n<li>Their main mantra is “making it work” without giving much attention to how the solution is achieved. To them, a working software and good software are equivalent.</li>\n<li>They usually require very specific and structured directions to achieve something. They suffer from tunnel vision, need supervision and continuous guidance to be effective team members.</li>\n<li>Most of the Junior developers just try to live up to the role and, when stuck, they might leave work for a senior developer instead of at least trying to take a stab at something.</li>\n<li>They don’t know about the business side of the company and don’t realize how management/sales/marketing/etc think and they don’t realize how much rework, wasted effort, and end-user aggravation could be saved by getting to know the business domain.</li>\n<li>Over-engineering is a major problem, often leading to fragility and bugs.</li>\n<li>When given a problem, they often try to fix just the current problem a.k.a. fixing the symptoms instead of fixing the root problem.</li>\n<li>You might notice the “<a href=\"https://en.wikipedia.org/wiki/Somebody_else%27s_problem\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Somebody Else’s Problem</a>” behavior from them.</li>\n<li>They don’t know what or how much they don’t know, thanks to the <a href=\"https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Dunning–Kruger effect</a>.</li>\n<li>They don’t take initiatives and they might be afraid to work on an unfamiliar codebase.</li>\n<li>They don’t participate in team discussions.</li>\n</ul>\n<p>Being a Junior developer in the team is not necessarily a bad thing; since you are just starting out, you are not expected to be a know-it-all person. However, it is your responsibility to learn, gain experience, not get stuck with the “Junior” title and improve yourself. Here are a few tips for Junior developers to help move up the ladder of seniority:</p>\n<ul>\n<li>All sorts of problems can be solved if you work on them long enough. Do not give up if Stack Overflow or an issue on GitHub doesn’t have an answer. Saying “I am stuck, but I have tried X, Y, and Z. Do you have any pointers?” to your lead is much better than saying “This is beyond me.”</li>\n<li>Read a lot of code, not just code in the projects that you are working on, but reference/framework source code, open-source. Ask your fellow developers, perhaps on Reddit too, about the good open-source examples for the language/tools of your choice.</li>\n<li>Do personal side-projects, share them with people, contribute to the open-source community. Reach out to people for help. You will be surprised how much support you can get from the community. I still remember my first open-source project on GitHub from around 6 years ago which was a small PHP script (a library) that fetched details for a given address from Google’s Geocoding API. The codebase was super messy, it did not have any tests, did not have any linters or sniffers, and it did not have any CI because I didn’t know about any of this at that time. I am not sure how but one kind soul somehow found the project, forked it, refactored it, “modernized” it, added linting, code sniffing, added CI and opened the pull request. This one pull request taught me so many things that I might have never learned that fast on my own because I was still in college, working for a small service-based company and doing just small websites all on my own without knowing what is right and what is not. This one PR on GitHub was my introduction to open-source and I owe everything to that.</li>\n<li>Avoid what is known as <a href=\"https://en.wikipedia.org/wiki/Somebody_else%27s_problem\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">“Somebody Else’s Problem Field”</a> behavior.</li>\n<li>When given a problem to solve, try to identify the root cause and fix that instead of fixing the symptoms. And remember, not being able to reproduce means not solved. It is solved when you understand why it occurred and why it no longer does.</li>\n<li>Have respect for the code that was written before you. Be generous when passing judgment on the architecture or the design decisions made in the codebase. Understand that code is often ugly and weird for a reason other than incompetence. Learning to live with and thrive with legacy code is a great skill. Never assume anybody is stupid. Instead, figure out how these intelligent, well-intentioned and experienced people have come to a decision that is stupid now. Approach inheriting legacy code with an “opportunity mindset” rather than a complaining one.</li>\n<li>It’s okay to not know things. You don’t need to be ashamed of not knowing things already. There are no stupid questions, ask however many questions that would allow you to work effectively.</li>\n<li>Don’t let yourself be limited by the job title that you have. Keep working on your self-improvement.</li>\n<li>Do your homework. Predict what’s coming down the pipe. Be involved in the team discussions. Even if you are wrong, you will learn something.</li>\n<li>Learn about the domain that you are working with. Understand the product end-to-end as an end-user. Do not assume things, ask questions and get things cleared when in doubt.</li>\n<li>Learn to communicate effectively - soft skills matter. Learn how to write good emails, how to present your work, how to phrase your questions in a thoughtful manner.</li>\n<li>Sit with the senior developers, watch them work, find a mentor. No one likes a know-it-all. Get hold of your ego and be humble enough to take lessons from experienced people.</li>\n<li>Don’t just blindly follow the advice of “experts”, take it with a grain of salt.</li>\n<li>If you are asked to provide an estimate for some work, do not give an answer unless you have all the details to make a reasonable estimate. If you are forced to do that, pad it 2x or more depending on how much you don’t know about what needs to be done for the task to be marked ‘done’.</li>\n<li>Take some time to learn how to use a debugger. Debuggers are quite beneficial when navigating new, undocumented or poorly documented codebase, or to debug weird issues.</li>\n<li>Avoid saying “it works on my machine” — yes, I have heard that a lot.</li>\n<li>Try to turn any feelings of inadequacy or imposter syndrome into energy to push yourself forward and increase your skills and knowledge.</li>\n</ul>\n<h3 id=\"mid-level-developers\">Mid Level Developers</h3>\n<p>The next level after the Junior developers is Mid Level developers. They are technically stronger than the Junior developers and can work with minimal supervision. They still have some issues to address in order to jump to Senior level.</p>\n<p>Intermediate developers are more competent than the Junior developer. They start to see the flaws in their old codebase. They gain the knowledge but they get trapped into the next chain i.e. messing things up while trying to do them “the right way” e.g. hasty abstractions, overuse or unnecessary usage of Design Patterns — they may be able to provide solution faster than the Junior developers but the solution might put you into another rabbit-hole in the long run. Without supervision, they might delay the execution while trying to “do things properly”. They don’t know when to make tradeoffs and they still don’t know when to be dogmatic and when to be pragmatic. They can easily become attached to their solution, become myopic, and be unable to take feedback.</p>\n<p>Mid-level developers are quite common. Most of the organizations wrongly label them as “Senior Developers”. However, they need further mentoring in order to become Senior Developers. The next section describes the responsibilities of a senior developer and how you can become one.</p>\n<h3 id=\"senior-developers\">Senior Developers</h3>\n<p>Senior developers are the next level after the Mid-level developers. They are the people who can get things done on their own without any supervision and without creating any issues down the road. They are more mature, have gained experience by delivering both good and bad software in the past and have learned from it — they know how to be pragmatic. Here is the list of things that are normally expected of a Senior Developer:</p>\n<ul>\n<li>With their past experiences, mistakes made, issues faced by over-designed or under-designed software, they can foresee the problems and persuade the direction of the codebase or the architecture.</li>\n<li>They don’t have a “Shiny-Toy” syndrome. They are pragmatic in the execution. They can make the tradeoffs when required, and they know why. They know where to be dogmatic and where to be pragmatic.</li>\n<li>They have a good picture of the field, know what the best tool for the job is in most cases (even if they don’t know the tool). They have the innate ability to pick up a new tool/language/paradigm/etc in order to solve a problem that requires it.</li>\n<li>They are aware they’re on a team. They view it as a part of their responsibility to mentor others. This can range from pair programming with junior devs to taking un-glorious tasks of writing docs or tests or whatever else needs to be done.</li>\n<li>They have a deep understanding of the domain - they know about the business side of the company and realize how management/sales/marketing/etc think and benefit from their knowledge of the business domain during the development.</li>\n<li>They don’t make empty complaints, they make judgments based on the empirical evidence and they have suggestions for solutions.</li>\n<li>They think much more than just code - they know that their job is to provide solutions to the problems and not just to write code.</li>\n<li>They have the ability to take on large ill-defined problems, define them, break them up, and execute the pieces. A senior developer can take something big and abstract, and run with it. They will come up with a few options, discuss them with the team and implement them.</li>\n<li>They have respect for the code that was written before them. They are generous when passing judgment on the architecture or the design decisions made in the codebase. They approach inheriting legacy code with an “opportunity mindset” rather than a complaining one.</li>\n<li>They know how to give feedback without hurting anyone.</li>\n</ul>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>All teams are made up of a mix of all these seniority roles. Being content with your role is a bad thing and you should always strive to improve yourself for the next step. This article is based on my beliefs and observations in the industry. Lots of companies care more for the years of experience to decide the seniority which is a crappy metric — you don’t gain experience just by spending years. You gain it by continuously solving different sorts of problems, irrespective of the number of years you spend in the industry. I have seen fresh graduates having no industry experience get up to speed quickly and producing work of a Senior Engineer and I have seen Senior developers labeled “senior” merely because of their age and “years of experience”.</p>\n<p>The most important traits that you need to have in order to step up in your career are: not settling with mediocrity, having an open mindset, being humble, learning from your mistakes, working on the challenging problems and having an opportunity mindset rather than a complaining one.</p>\n<p>With that said, this post comes to an end. What are your thoughts on the levels of seniority of developers? Feel free to send improvements to this guide. Until next time, stay tuned!</p>";

				const frontmatter$h = {"title":"Levels of Seniority","description":"How to Step Up as a Junior, Mid Level or a Senior Developer?","authorId":"kamran","seo":{"title":"Levels of Seniority - roadmap.sh","description":"How to Step Up as a Junior, Mid Level or a Senior Developer?"},"isNew":false,"type":"textual","date":"2020-12-03T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$h = "/workspaces/developer-roadmap/src/data/guides/levels-of-seniority.md";
				const url$h = undefined;
				function rawContent$h() {
					return "\nI have been working on redoing the [roadmaps](https://roadmap.sh) – splitting the skillset based on the seniority levels to make them easier to follow and not scare the new developers away. Since the roadmaps are going to be just about the technical knowledge, I thought it would be a good idea to reiterate and have an article on what I think of different seniority roles.\n\nI have seen many organizations decide the seniority of developers by giving more significance to the years of experience than they should. I have seen developers labeled \"Junior\" doing the work of Senior Developers and I have seen \"Lead\" developers who weren't even qualified to be called \"Senior\". The seniority of a developer cannot just be decided by their age, years of experience or technical knowledge that they have got. There are other factors in play here -- their perception of work, how they interact with their peers and how they approach problems. We discuss these three key factors in detail for each of the seniority levels below.\n\n### Different Seniority Titles\n\nDifferent organizations might have different seniority titles but they mainly fall into three categories:\n\n- Junior Developer\n- Mid Level Developer\n- Senior Developer\n\n### Junior Developer\n\nJunior developers are normally fresh graduates and it's either they don't have or they have minimal industry experience. Not only they have weak coding skills but there are also a few other things that give Junior developers away:\n\n- Their main mantra is \"making it work\" without giving much attention to how the solution is achieved. To them, a working software and good software are equivalent.\n- They usually require very specific and structured directions to achieve something. They suffer from tunnel vision, need supervision and continuous guidance to be effective team members.\n- Most of the Junior developers just try to live up to the role and, when stuck, they might leave work for a senior developer instead of at least trying to take a stab at something.\n- They don't know about the business side of the company and don't realize how management/sales/marketing/etc think and they don't realize how much rework, wasted effort, and end-user aggravation could be saved by getting to know the business domain.\n- Over-engineering is a major problem, often leading to fragility and bugs.\n- When given a problem, they often try to fix just the current problem a.k.a. fixing the symptoms instead of fixing the root problem.\n- You might notice the \"[Somebody Else's Problem](https://en.wikipedia.org/wiki/Somebody_else%27s_problem)\" behavior from them.\n- They don't know what or how much they don't know, thanks to the [Dunning–Kruger effect](https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect).\n- They don't take initiatives and they might be afraid to work on an unfamiliar codebase.\n- They don't participate in team discussions.\n\nBeing a Junior developer in the team is not necessarily a bad thing; since you are just starting out, you are not expected to be a know-it-all person. However, it is your responsibility to learn, gain experience, not get stuck with the \"Junior\" title and improve yourself. Here are a few tips for Junior developers to help move up the ladder of seniority:\n\n- All sorts of problems can be solved if you work on them long enough. Do not give up if Stack Overflow or an issue on GitHub doesn't have an answer. Saying \"I am stuck, but I have tried X, Y, and Z. Do you have any pointers?\" to your lead is much better than saying \"This is beyond me.\"\n- Read a lot of code, not just code in the projects that you are working on, but reference/framework source code, open-source. Ask your fellow developers, perhaps on Reddit too, about the good open-source examples for the language/tools of your choice.\n- Do personal side-projects, share them with people, contribute to the open-source community. Reach out to people for help. You will be surprised how much support you can get from the community. I still remember my first open-source project on GitHub from around 6 years ago which was a small PHP script (a library) that fetched details for a given address from Google's Geocoding API. The codebase was super messy, it did not have any tests, did not have any linters or sniffers, and it did not have any CI because I didn't know about any of this at that time. I am not sure how but one kind soul somehow found the project, forked it, refactored it, \"modernized\" it, added linting, code sniffing, added CI and opened the pull request. This one pull request taught me so many things that I might have never learned that fast on my own because I was still in college, working for a small service-based company and doing just small websites all on my own without knowing what is right and what is not. This one PR on GitHub was my introduction to open-source and I owe everything to that.\n- Avoid what is known as [\"Somebody Else's Problem Field\"](https://en.wikipedia.org/wiki/Somebody_else%27s_problem) behavior.\n- When given a problem to solve, try to identify the root cause and fix that instead of fixing the symptoms. And remember, not being able to reproduce means not solved. It is solved when you understand why it occurred and why it no longer does.\n- Have respect for the code that was written before you. Be generous when passing judgment on the architecture or the design decisions made in the codebase. Understand that code is often ugly and weird for a reason other than incompetence. Learning to live with and thrive with legacy code is a great skill. Never assume anybody is stupid. Instead, figure out how these intelligent, well-intentioned and experienced people have come to a decision that is stupid now. Approach inheriting legacy code with an \"opportunity mindset\" rather than a complaining one.\n- It's okay to not know things. You don't need to be ashamed of not knowing things already. There are no stupid questions, ask however many questions that would allow you to work effectively.\n- Don't let yourself be limited by the job title that you have. Keep working on your self-improvement.\n- Do your homework. Predict what’s coming down the pipe. Be involved in the team discussions. Even if you are wrong, you will learn something.\n- Learn about the domain that you are working with. Understand the product end-to-end as an end-user. Do not assume things, ask questions and get things cleared when in doubt.\n- Learn to communicate effectively - soft skills matter. Learn how to write good emails, how to present your work, how to phrase your questions in a thoughtful manner.\n- Sit with the senior developers, watch them work, find a mentor. No one likes a know-it-all. Get hold of your ego and be humble enough to take lessons from experienced people.\n- Don't just blindly follow the advice of \"experts\", take it with a grain of salt.\n- If you are asked to provide an estimate for some work, do not give an answer unless you have all the details to make a reasonable estimate. If you are forced to do that, pad it 2x or more depending on how much you don't know about what needs to be done for the task to be marked 'done'.\n- Take some time to learn how to use a debugger. Debuggers are quite beneficial when navigating new, undocumented or poorly documented codebase, or to debug weird issues.\n- Avoid saying \"it works on my machine\" -- yes, I have heard that a lot.\n- Try to turn any feelings of inadequacy or imposter syndrome into energy to push yourself forward and increase your skills and knowledge.\n\n### Mid Level Developers\n\nThe next level after the Junior developers is Mid Level developers. They are technically stronger than the Junior developers and can work with minimal supervision. They still have some issues to address in order to jump to Senior level.\n\nIntermediate developers are more competent than the Junior developer. They start to see the flaws in their old codebase. They gain the knowledge but they get trapped into the next chain i.e. messing things up while trying to do them \"the right way\" e.g. hasty abstractions, overuse or unnecessary usage of Design Patterns -- they may be able to provide solution faster than the Junior developers but the solution might put you into another rabbit-hole in the long run. Without supervision, they might delay the execution while trying to \"do things properly\". They don't know when to make tradeoffs and they still don't know when to be dogmatic and when to be pragmatic. They can easily become attached to their solution, become myopic, and be unable to take feedback.\n\nMid-level developers are quite common. Most of the organizations wrongly label them as \"Senior Developers\". However, they need further mentoring in order to become Senior Developers. The next section describes the responsibilities of a senior developer and how you can become one.\n\n### Senior Developers\n\nSenior developers are the next level after the Mid-level developers. They are the people who can get things done on their own without any supervision and without creating any issues down the road. They are more mature, have gained experience by delivering both good and bad software in the past and have learned from it — they know how to be pragmatic. Here is the list of things that are normally expected of a Senior Developer:\n\n- With their past experiences, mistakes made, issues faced by over-designed or under-designed software, they can foresee the problems and persuade the direction of the codebase or the architecture.\n- They don't have a \"Shiny-Toy\" syndrome. They are pragmatic in the execution. They can make the tradeoffs when required, and they know why. They know where to be dogmatic and where to be pragmatic.\n- They have a good picture of the field, know what the best tool for the job is in most cases (even if they don't know the tool). They have the innate ability to pick up a new tool/language/paradigm/etc in order to solve a problem that requires it.\n- They are aware they're on a team. They view it as a part of their responsibility to mentor others. This can range from pair programming with junior devs to taking un-glorious tasks of writing docs or tests or whatever else needs to be done.\n- They have a deep understanding of the domain - they know about the business side of the company and realize how management/sales/marketing/etc think and benefit from their knowledge of the business domain during the development.\n- They don't make empty complaints, they make judgments based on the empirical evidence and they have suggestions for solutions.\n- They think much more than just code - they know that their job is to provide solutions to the problems and not just to write code.\n- They have the ability to take on large ill-defined problems, define them, break them up, and execute the pieces. A senior developer can take something big and abstract, and run with it. They will come up with a few options, discuss them with the team and implement them.\n- They have respect for the code that was written before them. They are generous when passing judgment on the architecture or the design decisions made in the codebase. They approach inheriting legacy code with an \"opportunity mindset\" rather than a complaining one.\n- They know how to give feedback without hurting anyone.\n\n### Conclusion\n\nAll teams are made up of a mix of all these seniority roles. Being content with your role is a bad thing and you should always strive to improve yourself for the next step. This article is based on my beliefs and observations in the industry. Lots of companies care more for the years of experience to decide the seniority which is a crappy metric -- you don't gain experience just by spending years. You gain it by continuously solving different sorts of problems, irrespective of the number of years you spend in the industry. I have seen fresh graduates having no industry experience get up to speed quickly and producing work of a Senior Engineer and I have seen Senior developers labeled \"senior\" merely because of their age and \"years of experience\".\n\nThe most important traits that you need to have in order to step up in your career are: not settling with mediocrity, having an open mindset, being humble, learning from your mistakes, working on the challenging problems and having an opportunity mindset rather than a complaining one.\n\nWith that said, this post comes to an end. What are your thoughts on the levels of seniority of developers? Feel free to send improvements to this guide. Until next time, stay tuned!\n";
				}
				function compiledContent$h() {
					return html$h;
				}
				function getHeadings$h() {
					return [{"depth":3,"slug":"different-seniority-titles","text":"Different Seniority Titles"},{"depth":3,"slug":"junior-developer","text":"Junior Developer"},{"depth":3,"slug":"mid-level-developers","text":"Mid Level Developers"},{"depth":3,"slug":"senior-developers","text":"Senior Developers"},{"depth":3,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$h = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$h;
					content.file = file$h;
					content.url = url$h;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$h)}`;
				});

const __vite_glob_0_28 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$h,
	compiledContent: compiledContent$h,
	default: Content$h,
	file: file$h,
	frontmatter: frontmatter$h,
	getHeadings: getHeadings$h,
	rawContent: rawContent$h,
	url: url$h
}, Symbol.toStringTag, { value: 'Module' }));

const html$g = "<p><a href=\"/guides/oauth.png\"><img src=\"/guides/oauth.png\" alt=\"OAuth - Open Authorization\"></a></p>";

				const frontmatter$g = {"title":"OAuth — Open Authorization","description":"Learn and understand what is OAuth and how it works","authorId":"kamran","seo":{"title":"OAuth — Open Authorization - roadmap.sh","description":"Learn and understand what is OAuth and how it works"},"isNew":false,"type":"visual","date":"2021-06-28T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$g = "/workspaces/developer-roadmap/src/data/guides/oauth.md";
				const url$g = undefined;
				function rawContent$g() {
					return "\n[![OAuth - Open Authorization](/guides/oauth.png)](/guides/oauth.png)\n";
				}
				function compiledContent$g() {
					return html$g;
				}
				function getHeadings$g() {
					return [];
				}

				const Content$g = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$g;
					content.file = file$g;
					content.url = url$g;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$g)}`;
				});

const __vite_glob_0_29 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$g,
	compiledContent: compiledContent$g,
	default: Content$g,
	file: file$g,
	frontmatter: frontmatter$g,
	getHeadings: getHeadings$g,
	rawContent: rawContent$g,
	url: url$g
}, Symbol.toStringTag, { value: 'Module' }));

const html$f = "<p>The Internet has connected people across the world using social media and audio/video calling features along with providing an overabundance of knowledge and tools. All this comes with an inherent danger of security and privacy breaches. In this guide, we will talk about <strong>proxies</strong> that play a vital role in mitigating these risks. We will cover the following topics in this guide:</p>\n<ul>\n<li><a href=\"#proxy-server\">Proxy Server</a></li>\n<li><a href=\"#forward-proxy-server\">Forward Proxy Server</a></li>\n<li><a href=\"#reverse-proxy-server\">Reverse Proxy Server</a></li>\n<li><a href=\"#summary\">Summary</a></li>\n</ul>\n<h2 id=\"proxy-server\">Proxy Server</h2>\n<p><strong><em>Every web request which is sent from the client to a web server goes through some type of proxy server.</em></strong> A proxy server acts as a gateway between client <em>(you)</em> and the internet and separates end-users from the websites you browse. It replaces the source IP address of the web request with the proxy server’s IP address and then forwards it to the web server. The web server is unaware of the client, it only sees the proxy server.</p>\n<p><img src=\"/guides/proxy/proxy-example.png\" alt=\"Proxy Server Description\"></p>\n<blockquote>\n<p>NOTE: This is not an accurate description but rather just an illustration.</p>\n</blockquote>\n<p>Proxy servers serve as a single point of control making it easier to enforce security policies. It also provides caching mechanism which stores the requested web pages on the proxy server to improve performance. If the requested web-page is available in cache memory then instead of forwarding the request to the web-server it will send the cached webpage back to the client. This <strong>saves big companies thousands of dollars</strong> by reducing the load on their servers as their website is visited by millions of users every day.</p>\n<h2 id=\"forward-proxy-server\">Forward Proxy Server</h2>\n<p>A forward proxy is generally implemented on the client side and <strong>sits in front of multiple clients</strong> or client sources. Forward proxy servers are mainly used by companies to <strong>manage the internet usage</strong> of their employees and <strong>restrict content</strong>. It is also used as a <strong>firewall</strong> to secure the company’s network by blocking any request which would pose threat to the company’s network. Proxy servers are also used to <strong>bypass geo-restriction</strong> and browse content that might be blocked in the user’s country. It enables users to <strong>browse anonymously</strong>, as the proxy server masks their details from the website’s servers.</p>\n<p><img src=\"/guides/proxy/forward-proxy.png\" alt=\"Forward Proxy Description\"></p>\n<blockquote>\n<p>NOTE: This is not an accurate description but rather just an illustration</p>\n</blockquote>\n<h2 id=\"reverse-proxy-server\">Reverse Proxy Server</h2>\n<p>Reverse proxy servers are implemented on the <strong>server side</strong> instead of the client side. It <strong>sits in front of multiple webservers</strong> and manages incoming requests by forwarding them to the web servers. It provides anonymity for the <strong>back-end web servers and not the client</strong>. Reverse proxy servers are generally used to perform tasks such as <strong>authentication, content caching, and encryption/decryption</strong> on behalf of the web server. These tasks would <strong>hog CPU cycles</strong> on the web server and degrade the performance of the website by introducing a high amount of delay in loading the webpage. Reverse proxies are also used as <strong>load balancers</strong> to distribute the incoming traffic efficiently among the web servers but it is <strong>not optimized</strong> for this task. In essence, a reverse proxy server is a gateway to a web-server or group of web-servers.</p>\n<p><img src=\"/guides/proxy/reverse-proxy.png\" alt=\"Reverse Proxy Description\"></p>\n<blockquote>\n<p>NOTE: This is not an accurate description but rather just an illustration. Red lines represent the server’s response and black lines represent the initial request from client(s).</p>\n</blockquote>\n<h2 id=\"summary\">Summary</h2>\n<p>A proxy server acts as a gateway between client <em>(you)</em> and the internet and separates end-users from the websites you browse. <strong><em>The position of the proxy server on the network determines whether it is a forward or a reverse proxy server</em></strong>. A Forward proxy is implemented on the client side and <strong>sits in front of multiple clients</strong> or client sources and forwards requests to the web server. Reverse proxy servers are implemented on the <strong>server side</strong> it <strong>sits in front of multiple webservers</strong> and manage the incoming requests by forwarding them to the web servers.</p>\n<p>If all this was too much to take in, I have a simple analogy for you.</p>\n<p>At a restaurant, the waiter/waitress takes your order and gives it to the kitchen head chef. The head chef then calls out the order and assigns tasks to everyone in the kitchen.</p>\n<p>In this analogy:</p>\n<ul>\n<li>You are the client</li>\n<li>Your order is the web request</li>\n<li>Waiter/Waitress is your forward proxy server</li>\n<li>Kitchen head chef is the reverse proxy server</li>\n<li>Other chefs working in the kitchen are the web servers</li>\n</ul>\n<p>With that said our guide comes to an end. Thank you for reading and feel free to submit any updates to the guide using the links below.</p>";

				const frontmatter$f = {"title":"Proxy Servers","description":"How do proxy servers work and what are forward and reverse proxies?","authorId":"ebrahim-bharmal","seo":{"title":"Proxy Servers - roadmap.sh","description":"How do proxy servers work and what are forward and reverse proxies?"},"isNew":false,"type":"textual","date":"2017-10-24T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$f = "/workspaces/developer-roadmap/src/data/guides/proxy-servers.md";
				const url$f = undefined;
				function rawContent$f() {
					return "\nThe Internet has connected people across the world using social media and audio/video calling features along with providing an overabundance of knowledge and tools. All this comes with an inherent danger of security and privacy breaches. In this guide, we will talk about **proxies** that play a vital role in mitigating these risks. We will cover the following topics in this guide:\n\n- [Proxy Server](#proxy-server)\n- [Forward Proxy Server](#forward-proxy-server)\n- [Reverse Proxy Server](#reverse-proxy-server)\n- [Summary](#summary)\n\n## Proxy Server\n\n**_Every web request which is sent from the client to a web server goes through some type of proxy server._** A proxy server acts as a gateway between client _(you)_ and the internet and separates end-users from the websites you browse. It replaces the source IP address of the web request with the proxy server's IP address and then forwards it to the web server. The web server is unaware of the client, it only sees the proxy server.\n\n![Proxy Server Description](/guides/proxy/proxy-example.png)\n\n> NOTE: This is not an accurate description but rather just an illustration.\n\nProxy servers serve as a single point of control making it easier to enforce security policies. It also provides caching mechanism which stores the requested web pages on the proxy server to improve performance. If the requested web-page is available in cache memory then instead of forwarding the request to the web-server it will send the cached webpage back to the client. This **saves big companies thousands of dollars** by reducing the load on their servers as their website is visited by millions of users every day.\n\n## Forward Proxy Server\n\nA forward proxy is generally implemented on the client side and **sits in front of multiple clients** or client sources. Forward proxy servers are mainly used by companies to **manage the internet usage** of their employees and **restrict content**. It is also used as a **firewall** to secure the company's network by blocking any request which would pose threat to the company's network. Proxy servers are also used to **bypass geo-restriction** and browse content that might be blocked in the user's country. It enables users to **browse anonymously**, as the proxy server masks their details from the website's servers.\n\n![Forward Proxy Description](/guides/proxy/forward-proxy.png)\n\n> NOTE: This is not an accurate description but rather just an illustration\n\n## Reverse Proxy Server\n\nReverse proxy servers are implemented on the **server side** instead of the client side. It **sits in front of multiple webservers** and manages incoming requests by forwarding them to the web servers. It provides anonymity for the **back-end web servers and not the client**. Reverse proxy servers are generally used to perform tasks such as **authentication, content caching, and encryption/decryption** on behalf of the web server. These tasks would **hog CPU cycles** on the web server and degrade the performance of the website by introducing a high amount of delay in loading the webpage. Reverse proxies are also used as **load balancers** to distribute the incoming traffic efficiently among the web servers but it is **not optimized** for this task. In essence, a reverse proxy server is a gateway to a web-server or group of web-servers.\n\n![Reverse Proxy Description](/guides/proxy/reverse-proxy.png)\n\n> NOTE: This is not an accurate description but rather just an illustration. Red lines represent the server's response and black lines represent the initial request from client(s).\n\n## Summary\n\nA proxy server acts as a gateway between client _(you)_ and the internet and separates end-users from the websites you browse. **_The position of the proxy server on the network determines whether it is a forward or a reverse proxy server_**. A Forward proxy is implemented on the client side and **sits in front of multiple clients** or client sources and forwards requests to the web server. Reverse proxy servers are implemented on the **server side** it **sits in front of multiple webservers** and manage the incoming requests by forwarding them to the web servers.\n\nIf all this was too much to take in, I have a simple analogy for you.\n\nAt a restaurant, the waiter/waitress takes your order and gives it to the kitchen head chef. The head chef then calls out the order and assigns tasks to everyone in the kitchen.\n\nIn this analogy:\n\n- You are the client\n- Your order is the web request\n- Waiter/Waitress is your forward proxy server\n- Kitchen head chef is the reverse proxy server\n- Other chefs working in the kitchen are the web servers\n\nWith that said our guide comes to an end. Thank you for reading and feel free to submit any updates to the guide using the links below.\n";
				}
				function compiledContent$f() {
					return html$f;
				}
				function getHeadings$f() {
					return [{"depth":2,"slug":"proxy-server","text":"Proxy Server"},{"depth":2,"slug":"forward-proxy-server","text":"Forward Proxy Server"},{"depth":2,"slug":"reverse-proxy-server","text":"Reverse Proxy Server"},{"depth":2,"slug":"summary","text":"Summary"}];
				}

				const Content$f = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$f;
					content.file = file$f;
					content.url = url$f;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$f)}`;
				});

const __vite_glob_0_30 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$f,
	compiledContent: compiledContent$f,
	default: Content$f,
	file: file$f,
	frontmatter: frontmatter$f,
	getHeadings: getHeadings$f,
	rawContent: rawContent$f,
	url: url$f
}, Symbol.toStringTag, { value: 'Module' }));

const html$e = "<p>Random numbers are everywhere from computer games to lottery systems, graphics software, statistical sampling, computer simulation and cryptography. Graphic below is a quick explanation to how the random numbers are generated and why they may not be truly random.</p>\n<p><a href=\"/guides/random-numbers.png\"><img src=\"/guides/random-numbers.png\" alt=\"Random Numbers\"></a></p>";

				const frontmatter$e = {"title":"Random Numbers: Are they?","description":"Learn how they are generated and why they may not be truly random.","authorId":"kamran","seo":{"title":"Random Numbers: Are they? - roadmap.sh","description":"Learn how they are generated and why they may not be truly random."},"isNew":false,"type":"visual","date":"2021-03-14T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$e = "/workspaces/developer-roadmap/src/data/guides/random-numbers.md";
				const url$e = undefined;
				function rawContent$e() {
					return "\nRandom numbers are everywhere from computer games to lottery systems, graphics software, statistical sampling, computer simulation and cryptography. Graphic below is a quick explanation to how the random numbers are generated and why they may not be truly random.\n\n[![Random Numbers](/guides/random-numbers.png)](/guides/random-numbers.png)\n";
				}
				function compiledContent$e() {
					return html$e;
				}
				function getHeadings$e() {
					return [];
				}

				const Content$e = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$e;
					content.file = file$e;
					content.url = url$e;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$e)}`;
				});

const __vite_glob_0_31 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$e,
	compiledContent: compiledContent$e,
	default: Content$e,
	file: file$e,
	frontmatter: frontmatter$e,
	getHeadings: getHeadings$e,
	rawContent: rawContent$e,
	url: url$e
}, Symbol.toStringTag, { value: 'Module' }));

const html$d = "<p>The chart below aims to give you a really basic understanding of how the capability of a DBMS is increased to handle a growing amount of load.</p>\n<p><a href=\"/guides/scaling-databases.svg\"><img src=\"/guides/scaling-databases.svg\" alt=\"Scaling Databases\"></a></p>";

				const frontmatter$d = {"title":"Scaling Databases","description":"Learn the ups and downs of different database scaling strategies","authorId":"kamran","seo":{"title":"Scaling Databases - roadmap.sh","description":"Learn the ups and downs of different database scaling strategies"},"isNew":false,"type":"visual","date":"2021-02-18T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$d = "/workspaces/developer-roadmap/src/data/guides/scaling-databases.md";
				const url$d = undefined;
				function rawContent$d() {
					return "\nThe chart below aims to give you a really basic understanding of how the capability of a DBMS is increased to handle a growing amount of load.\n\n[![Scaling Databases](/guides/scaling-databases.svg)](/guides/scaling-databases.svg)\n";
				}
				function compiledContent$d() {
					return html$d;
				}
				function getHeadings$d() {
					return [];
				}

				const Content$d = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$d;
					content.file = file$d;
					content.url = url$d;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$d)}`;
				});

const __vite_glob_0_32 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$d,
	compiledContent: compiledContent$d,
	default: Content$d,
	file: file$d,
	frontmatter: frontmatter$d,
	getHeadings: getHeadings$d,
	rawContent: rawContent$d,
	url: url$d
}, Symbol.toStringTag, { value: 'Module' }));

const html$c = "<p><a href=\"/guides/session-authentication.png\"><img src=\"/guides/session-authentication.png\" alt=\"Session Authentication\"></a></p>";

				const frontmatter$c = {"title":"Session Based Authentication","description":"Understand what is session based authentication and how it is implemented","authorId":"kamran","seo":{"title":"Session Based Authentication - roadmap.sh","description":"Understand what is session based authentication and how it is implemented"},"isNew":false,"type":"visual","date":"2021-05-26T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$c = "/workspaces/developer-roadmap/src/data/guides/session-authentication.md";
				const url$c = undefined;
				function rawContent$c() {
					return "\n[![Session Authentication](/guides/session-authentication.png)](/guides/session-authentication.png)\n";
				}
				function compiledContent$c() {
					return html$c;
				}
				function getHeadings$c() {
					return [];
				}

				const Content$c = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$c;
					content.file = file$c;
					content.url = url$c;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$c)}`;
				});

const __vite_glob_0_33 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$c,
	compiledContent: compiledContent$c,
	default: Content$c,
	file: file$c,
	frontmatter: frontmatter$c,
	getHeadings: getHeadings$c,
	rawContent: rawContent$c,
	url: url$c
}, Symbol.toStringTag, { value: 'Module' }));

const html$b = "<p>HTTP is the internet protocol that standardizes how clients and servers interact with each other. When you open a website, among other things, HTTP is the protocol that helps load the website in the browser.</p>\n<h2 id=\"http-is-stateless\">HTTP is Stateless</h2>\n<p>HTTP is a stateless protocol which means that each request made from the client to the server is treated as a standalone request; neither the client nor the server keeps track of the subsequent requests. Sessions allow you to change that; with sessions, the server has a way to associate some information with the client so that when the same client requests the server, it can retrieve that information.</p>\n<p>In this guide, we will learn what is Session-Based Authentication and how to implement it in Node.js. We also have a separate <a href=\"/guides/session-authentication\">visual guide on Session-Based Authentication</a> as well that explains the topic visually.</p>\n<h2 id=\"what-is-session-based-authentication\">What is Session-Based Authentication?</h2>\n<p>Session-based authentication is a stateful authentication technique where we use sessions to keep track of the authenticated user. Here is how Session Based Authentication works:</p>\n<ul>\n<li>User submits the login request for authentication.</li>\n<li>Server validates the credentials. If the credentials are valid, the server initiates a session and stores some information about the client. This information can be stored in memory, file system, or database. The server also generates a unique identifier that it can later use to retrieve this session information from the storage. Server sends this unique session identifier to the client.</li>\n<li>Client saves the session id in a cookie and this cookie is sent to the server in each request made after the authentication.</li>\n<li>Server, upon receiving a request, checks if the session id is present in the request and uses this session id to get information about the client.</li>\n</ul>\n<p>And that is how session-based authentication works.</p>\n<h2 id=\"session-based-authentication-in-nodejs\">Session-Based Authentication in Node.js</h2>\n<p>Now that we know what session-based authentication is, let’s see how we can implement session-based authentication in Node.js.</p>\n<p>Please note that, for the sake of simplicity, I have intentionally kept the project strictly relevant to the Session Based Authentication and have left out a lot of details that a production-ready application may require. Also, if you don’t want to follow along, project <a href=\"https://github.com/kamranahmedse/node-session-auth-example\" target=\"_blank\">codebase can be found on GitHub</a>.</p>\n<p>First things first, create an empty directory that will be holding our application.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">mkdir</span><span style=\"color:#F1FA8C\"> session-auth-example</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now run the following command to setup a sample <code>package.json</code> file:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">npm</span><span style=\"color:#F1FA8C\"> init</span><span style=\"color:#BD93F9\"> -y</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Next, we need to install the dependencies:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">npm</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#F1FA8C\"> express</span><span style=\"color:#F1FA8C\"> express-session</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>Express</code> is the application framework, and <code>express-session</code> is the package that helps work with sessions easily.</p>\n<h3 id=\"setting-up-the-server\">Setting up the server</h3>\n<p>Now create an <code>index.js</code> file at the root of the project with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> express </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">express</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> sessions </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">express-session</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> app </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> express</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">use</span><span style=\"color:#F8F8F2\">(</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">  sessions</span><span style=\"color:#F8F8F2\">({</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    secret</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">some secret</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    cookie</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">      maxAge</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> 1000</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#BD93F9\"> 60</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#BD93F9\"> 60</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#BD93F9\"> 24</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#6272A4\">// 24 hours</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    },</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    resave</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    saveUninitialized</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> false</span><span style=\"color:#F8F8F2\">,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  })</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">use</span><span style=\"color:#F8F8F2\">(express.</span><span style=\"color:#50FA7B\">json</span><span style=\"color:#F8F8F2\">());</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">use</span><span style=\"color:#F8F8F2\">(express.</span><span style=\"color:#50FA7B\">urlencoded</span><span style=\"color:#F8F8F2\">({ extended</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#BD93F9\"> true</span><span style=\"color:#F8F8F2\"> }));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// @todo register routes</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">listen</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">3000</span><span style=\"color:#F8F8F2\">, () </span><span style=\"color:#FF79C6\">=></span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  console.</span><span style=\"color:#50FA7B\">log</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#F1FA8C\">`Server Running at port 3000`</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The important piece to note here is the <code>express-session</code> middleware registration which automatically handles the session initialization, cookie parsing and session data retrieval, and so on. In our example here, we are passing the following configuration options:</p>\n<ul>\n<li><code>secret</code>: This is used to sign the session ID cookie. Using a secret that cannot be guessed will reduce the ability to hijack a session.</li>\n<li><code>cookie</code>: Object containing the configuration for session id cookie.</li>\n<li><code>resave</code>: Forces the session to be saved back to the session store, even if the session data was never modified during the request.</li>\n<li><code>saveUninitialized</code>: Forces an “uninitialized” session to be saved to the store, i.e., saves a session to the store even if the session was not initiated.</li>\n</ul>\n<p>Another important option is <code>store</code> which we can configure to change how/where the session data is stored on the server. By default, this data is stored in the memory, i.e., <code>MemoryStore</code>.</p>\n<p>Look at the <a href=\"https://github.com/expressjs/session\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">express-session documentation</a> to learn more about the available options.</p>\n<h3 id=\"creating-handlers\">Creating Handlers</h3>\n<p>Create a directory called the <code>handlers</code> at the project’s root. This is the directory where we will be placing all the route-handling functions.</p>\n<p>Now let’s create the homepage route, which will show the welcome message and a link to log out for the logged-in users and redirect to the login screen for the logged-out users. Create a file at <code>handlers/home.js</code> with the following content.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> HomeHandler</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  if</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FF79C6\">!</span><span style=\"color:#F8F8F2\">req.session.userid) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> res.</span><span style=\"color:#50FA7B\">redirect</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/login</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">setHeader</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Content-Type</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">text/HTML</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#F1FA8C\">`</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;h1>Welcome back </span><span style=\"color:#FF79C6\">${</span><span style=\"color:#F8F8F2\">req.session.userid</span><span style=\"color:#FF79C6\">}</span><span style=\"color:#F1FA8C\">&#x3C;/h1></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;a href=\"/logout\">Logout&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  `</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">end</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>At the top of this function, you will notice the check <code>req.session.userid</code>. <code>req.session</code> is automatically populated using the session cookie by the <code>express-session</code> middleware that we registered earlier. <code>req.session.userid</code> is one of the data fields that we will set to store the <code>userid</code> of the logged in user.</p>\n<p>Next, we need to register this handler with a route. Open the <code>index.js</code> file at the root of the project and register the following route:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> HomeHandler </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./handlers/home.js</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">get</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, HomeHandler);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Next, we have the login page, redirecting the user to the home screen if the user is logged in or showing the login form. Create a file at <code>handlers/login.js</code> with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> LoginHandler</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  if</span><span style=\"color:#F8F8F2\"> (req.session.userid) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> res.</span><span style=\"color:#50FA7B\">redirect</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">setHeader</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Content-Type</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">text/HTML</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">write</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#F1FA8C\">`</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;h1>Login&#x3C;/h1></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;form method=\"post\" action=\"/process-login\"></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">      &#x3C;input type=\"text\" name=\"username\" placeholder=\"Username\" /> &#x3C;br></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">      &#x3C;input type=\"password\" name=\"password\" placeholder=\"Password\" /> &#x3C;br></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">      &#x3C;button type=\"submit\">Login&#x3C;/button></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">    &#x3C;/form></span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  `</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">end</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Again, at the top of the function, we are simply checking if we have <code>userid</code> in the session (which means the user is logged in). If the user is logged in, we redirect them to the homepage; if not, we show the login screen. In the login form, we have the method of <code>post</code>, and we submit the form to <code>/process-login</code>. Please note that, for the sake of simplicity, we have a simple HTML string returned in the response, but in a real-world application, you will probably have a separate view file.</p>\n<p>Let’s first register this page and then implement <code>/process-login</code> endpoint. Open the <code>index.js</code> file from the root of the project and register the following route:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> LoginHandler </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./handlers/login.js</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">get</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/login</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, LoginHandler);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Next, we have to implement the functionality to process the login form submissions. Create a file at <code>handlers/process-login.js</code> with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> processLogin</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">  if</span><span style=\"color:#F8F8F2\"> (req.body.username </span><span style=\"color:#FF79C6\">!==</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#FF79C6\"> ||</span><span style=\"color:#F8F8F2\"> req.body.password </span><span style=\"color:#FF79C6\">!==</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> res.</span><span style=\"color:#50FA7B\">send</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">Invalid username or password</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  req.session.userid </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> req.body.username;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">redirect</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, we are simply checking that the username and password should both be <code>admin</code> and <code>admin</code> for a user to authenticate successfully. Upon finding valid credentials, we set the <code>userid</code> in the session by updating <code>req.session.userid</code>. Similarly, you can set any data in the session. For example, if we wanted to store the user role, we would do the following:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">req.session.role </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#E9F284\"> '</span><span style=\"color:#F1FA8C\">admin</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And later access this value out of the session anywhere in the subsequent requests.</p>\n<p>Register this route in the <code>index.js</code> file at the root of the project:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> ProcessLoginHandler </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./handlers/process-login.js</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">post</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/process-login</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, ProcessLoginHandler);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Finally, we have the logout functionality. Create a file at <code>handlers/logout.js</code> with the following content:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#8BE9FD;font-style:italic\">module</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">exports</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#FF79C6\"> function</span><span style=\"color:#50FA7B\"> Logout</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">req</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">res</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  req.session.</span><span style=\"color:#50FA7B\">destroy</span><span style=\"color:#F8F8F2\">();</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">  res.</span><span style=\"color:#50FA7B\">redirect</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We reset the session by calling <code>req.session.destroy()</code> and then redirecting the user to the homepage. Register the logout handler in the <code>index.js</code> file using the following:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> LogoutHandler </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> require</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">./handlers/logout.js</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">app.</span><span style=\"color:#50FA7B\">get</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F1FA8C\">/logout</span><span style=\"color:#E9F284\">'</span><span style=\"color:#F8F8F2\">, LogoutHandler);</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"running-the-application\">Running the Application</h2>\n<p>Open the <code>package.json</code> file and register the <code>start</code> script as follows:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\"><code><span class=\"line\"><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">scripts</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: {</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">  \"</span><span style=\"color:#F1FA8C\">start</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#FF79C6\">:</span><span style=\"color:#E9F284\"> \"</span><span style=\"color:#F1FA8C\">node index.js</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">},</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now you can start the application by running the following command:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">npm</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#F1FA8C\"> start</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now, if you open up your browser and visit the project at <code>http://localhost:3000</code> you will be able to see the Session-Based Authentication in action.</p>";

				const frontmatter$b = {"title":"Session Based Authentication","description":"Learn what is Session Based Authentication and how to implement it in Node.js","authorId":"kamran","seo":{"title":"Session Based Authentication - roadmap.sh","description":"Learn what is Session Based Authentication and how to implement it in Node.js"},"isNew":false,"type":"textual","date":"2022-11-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$b = "/workspaces/developer-roadmap/src/data/guides/session-based-authentication.md";
				const url$b = undefined;
				function rawContent$b() {
					return "\nHTTP is the internet protocol that standardizes how clients and servers interact with each other. When you open a website, among other things, HTTP is the protocol that helps load the website in the browser.\n\n## HTTP is Stateless\n\nHTTP is a stateless protocol which means that each request made from the client to the server is treated as a standalone request; neither the client nor the server keeps track of the subsequent requests. Sessions allow you to change that; with sessions, the server has a way to associate some information with the client so that when the same client requests the server, it can retrieve that information.\n\nIn this guide, we will learn what is Session-Based Authentication and how to implement it in Node.js. We also have a separate [visual guide on Session-Based Authentication](/guides/session-authentication) as well that explains the topic visually.\n\n## What is Session-Based Authentication?\n\nSession-based authentication is a stateful authentication technique where we use sessions to keep track of the authenticated user. Here is how Session Based Authentication works:\n\n- User submits the login request for authentication.\n- Server validates the credentials. If the credentials are valid, the server initiates a session and stores some information about the client. This information can be stored in memory, file system, or database. The server also generates a unique identifier that it can later use to retrieve this session information from the storage. Server sends this unique session identifier to the client.\n- Client saves the session id in a cookie and this cookie is sent to the server in each request made after the authentication.\n- Server, upon receiving a request, checks if the session id is present in the request and uses this session id to get information about the client.\n\nAnd that is how session-based authentication works.\n\n## Session-Based Authentication in Node.js\n\nNow that we know what session-based authentication is, let's see how we can implement session-based authentication in Node.js.\n\nPlease note that, for the sake of simplicity, I have intentionally kept the project strictly relevant to the Session Based Authentication and have left out a lot of details that a production-ready application may require. Also, if you don't want to follow along, project [codebase can be found on GitHub](https://github.com/kamranahmedse/node-session-auth-example).\n\nFirst things first, create an empty directory that will be holding our application.\n\n```shell\nmkdir session-auth-example\n```\n\nNow run the following command to setup a sample `package.json` file:\n\n```shell\nnpm init -y\n```\n\nNext, we need to install the dependencies:\n\n```shell\nnpm install express express-session\n```\n\n`Express` is the application framework, and `express-session` is the package that helps work with sessions easily.\n\n### Setting up the server\n\nNow create an `index.js` file at the root of the project with the following content:\n\n```javascript\nconst express = require('express');\nconst sessions = require('express-session');\n\nconst app = express();\n\napp.use(\n  sessions({\n    secret: 'some secret',\n    cookie: {\n      maxAge: 1000 * 60 * 60 * 24, // 24 hours\n    },\n    resave: true,\n    saveUninitialized: false,\n  })\n);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// @todo register routes\n\napp.listen(3000, () => {\n  console.log(`Server Running at port 3000`);\n});\n```\n\nThe important piece to note here is the `express-session` middleware registration which automatically handles the session initialization, cookie parsing and session data retrieval, and so on. In our example here, we are passing the following configuration options:\n\n- `secret`: This is used to sign the session ID cookie. Using a secret that cannot be guessed will reduce the ability to hijack a session.\n- `cookie`: Object containing the configuration for session id cookie.\n- `resave`: Forces the session to be saved back to the session store, even if the session data was never modified during the request.\n- `saveUninitialized`: Forces an \"uninitialized\" session to be saved to the store, i.e., saves a session to the store even if the session was not initiated.\n\nAnother important option is `store` which we can configure to change how/where the session data is stored on the server. By default, this data is stored in the memory, i.e., `MemoryStore`.\n\nLook at the [express-session documentation](https://github.com/expressjs/session) to learn more about the available options.\n\n### Creating Handlers\n\nCreate a directory called the `handlers` at the project's root. This is the directory where we will be placing all the route-handling functions.\n\nNow let's create the homepage route, which will show the welcome message and a link to log out for the logged-in users and redirect to the login screen for the logged-out users. Create a file at `handlers/home.js` with the following content.\n\n```javascript\nmodule.exports = function HomeHandler(req, res) {\n  if (!req.session.userid) {\n    return res.redirect('/login');\n  }\n\n  res.setHeader('Content-Type', 'text/HTML');\n  res.write(`\n    <h1>Welcome back ${req.session.userid}</h1>\n    <a href=\"/logout\">Logout</a>\n  `);\n\n  res.end();\n};\n```\n\nAt the top of this function, you will notice the check `req.session.userid`. `req.session` is automatically populated using the session cookie by the `express-session` middleware that we registered earlier. `req.session.userid` is one of the data fields that we will set to store the `userid` of the logged in user.\n\nNext, we need to register this handler with a route. Open the `index.js` file at the root of the project and register the following route:\n\n```javascript\nconst HomeHandler = require('./handlers/home.js');\n\napp.get('/', HomeHandler);\n```\n\nNext, we have the login page, redirecting the user to the home screen if the user is logged in or showing the login form. Create a file at `handlers/login.js` with the following content:\n\n```javascript\nmodule.exports = function LoginHandler(req, res) {\n  if (req.session.userid) {\n    return res.redirect('/');\n  }\n\n  res.setHeader('Content-Type', 'text/HTML');\n  res.write(`\n    <h1>Login</h1>\n    <form method=\"post\" action=\"/process-login\">\n      <input type=\"text\" name=\"username\" placeholder=\"Username\" /> <br>\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" /> <br>\n      <button type=\"submit\">Login</button>\n    </form>\n  `);\n\n  res.end();\n};\n```\n\nAgain, at the top of the function, we are simply checking if we have `userid` in the session (which means the user is logged in). If the user is logged in, we redirect them to the homepage; if not, we show the login screen. In the login form, we have the method of `post`, and we submit the form to `/process-login`. Please note that, for the sake of simplicity, we have a simple HTML string returned in the response, but in a real-world application, you will probably have a separate view file.\n\nLet's first register this page and then implement `/process-login` endpoint. Open the `index.js` file from the root of the project and register the following route:\n\n```javascript\nconst LoginHandler = require('./handlers/login.js');\n\napp.get('/login', LoginHandler);\n```\n\nNext, we have to implement the functionality to process the login form submissions. Create a file at `handlers/process-login.js` with the following content:\n\n```javascript\nmodule.exports = function processLogin(req, res) {\n  if (req.body.username !== 'admin' || req.body.password !== 'admin') {\n    return res.send('Invalid username or password');\n  }\n\n  req.session.userid = req.body.username;\n\n  res.redirect('/');\n}\n```\n\nAs you can see, we are simply checking that the username and password should both be `admin` and `admin` for a user to authenticate successfully. Upon finding valid credentials, we set the `userid` in the session by updating `req.session.userid`. Similarly, you can set any data in the session. For example, if we wanted to store the user role, we would do the following:\n\n```javascript\nreq.session.role = 'admin';\n```\n\nAnd later access this value out of the session anywhere in the subsequent requests.\n\nRegister this route in the `index.js` file at the root of the project:\n\n```javascript\nconst ProcessLoginHandler = require('./handlers/process-login.js');\n\napp.post('/process-login', ProcessLoginHandler);\n```\n\nFinally, we have the logout functionality. Create a file at `handlers/logout.js` with the following content:\n\n```javascript\nmodule.exports = function Logout(req, res) {\n  req.session.destroy();\n  res.redirect('/');\n};\n```\n\nWe reset the session by calling `req.session.destroy()` and then redirecting the user to the homepage. Register the logout handler in the `index.js` file using the following:\n\n```javascript\nconst LogoutHandler = require('./handlers/logout.js');\n\napp.get('/logout', LogoutHandler);\n```\n\n## Running the Application\n\nOpen the `package.json` file and register the `start` script as follows:\n\n```javascript\n\"scripts\": {\n  \"start\": \"node index.js\"\n},\n```\n\nNow you can start the application by running the following command:\n\n```shell\nnpm run start\n```\n\nNow, if you open up your browser and visit the project at `http://localhost:3000` you will be able to see the Session-Based Authentication in action.\n";
				}
				function compiledContent$b() {
					return html$b;
				}
				function getHeadings$b() {
					return [{"depth":2,"slug":"http-is-stateless","text":"HTTP is Stateless"},{"depth":2,"slug":"what-is-session-based-authentication","text":"What is Session-Based Authentication?"},{"depth":2,"slug":"session-based-authentication-in-nodejs","text":"Session-Based Authentication in Node.js"},{"depth":3,"slug":"setting-up-the-server","text":"Setting up the server"},{"depth":3,"slug":"creating-handlers","text":"Creating Handlers"},{"depth":2,"slug":"running-the-application","text":"Running the Application"}];
				}

				const Content$b = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$b;
					content.file = file$b;
					content.url = url$b;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$b)}`;
				});

const __vite_glob_0_34 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$b,
	compiledContent: compiledContent$b,
	default: Content$b,
	file: file$b,
	frontmatter: frontmatter$b,
	getHeadings: getHeadings$b,
	rawContent: rawContent$b,
	url: url$b
}, Symbol.toStringTag, { value: 'Module' }));

const html$a = "<p>In this tutorial, I will guide you on creating a free Let’s Encrypt SSL certificate for your website that gets automatically renewed. This process requires minimal to no configuration on your part. Let’s get started!</p>\n<p>First and foremost, you need to have a remote server where your web application is deployed. You might have Nginx, Apache, or any other web server. This tutorial will be specific to Nginx or Apache; if you are using another web server, you can go to <a href=\"https://certbot.eff.org/instructions\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">certbot documentation</a> and get specific instructions for your platform.</p>\n<h2 id=\"installation\">Installation</h2>\n<p>We need to install <code>snapd</code>, which is the package manager that will allow us to install <code>certbot</code> from Let’s Encrypt for automatic renewal. Run the following commands in your terminal.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> apt-get</span><span style=\"color:#F1FA8C\"> update</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> apt-get</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#F1FA8C\"> snapd</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> snap</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#F1FA8C\"> core</span><span style=\"color:#F8F8F2\">; </span><span style=\"color:#50FA7B\">snap</span><span style=\"color:#F1FA8C\"> refresh</span><span style=\"color:#F1FA8C\"> core</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now that <code>snapd</code> is installed, we can install <code>certbot</code> which we will be using to obtain and install the SSL certificate.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> snap</span><span style=\"color:#F1FA8C\"> install</span><span style=\"color:#BD93F9\"> --classic</span><span style=\"color:#F1FA8C\"> certbot</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> ln</span><span style=\"color:#BD93F9\"> -s</span><span style=\"color:#F1FA8C\"> /snap/bin/certbot</span><span style=\"color:#F1FA8C\"> /usr/bin/certbot</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Run the following command to verify that <code>certbot</code> is installed.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">certbot</span><span style=\"color:#BD93F9\"> --version</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"getting-the-ssl-certificate\">Getting the SSL Certificate</h2>\n<p>Now that <code>certbot</code> is installed, we need to obtain an SSL certificate. The command will ask you for your email address and the domain name for which you want to obtain the SSL certificate. You can also specify multiple domain names if you want to secure multiple domains with a single certificate.</p>\n<p>You can either run the following command for the interactive mode where you will be asked several questions to obtain the SSL certificate.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#6272A4\"># Replace --nginx with --apache if you are using Apache</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> certbot</span><span style=\"color:#BD93F9\"> --nginx</span></span>\n<span class=\"line\"></span></code></pre>\n<p>You will be asked to enter your email address and agree to the terms of service. You will also be asked to enter the domain name for which you want to obtain the SSL certificate. You can also specify multiple domain names if you want to secure multiple domains with a single certificate.</p>\n<p>Alternatively, you can run the following command to obtain the SSL certificate in a non-interactive mode where you will not be asked any questions. This is useful if you want to automate the process.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> certbot</span><span style=\"color:#BD93F9\"> --apache</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --agree-tos</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  -m</span><span style=\"color:#F1FA8C\"> you@email.com</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --no-eff-email</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --redirect</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --domains</span><span style=\"color:#F1FA8C\"> news.roadmap.sh</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This command will obtain an SSL certificate for the specified domain name, install it for you, and redirect HTTP traffic to HTTPS. The SSL certificate is valid for three months, after which it will expire.</p>\n<h2 id=\"auto-renewal-of-ssl-certificate\">Auto-Renewal of SSL Certificate</h2>\n<p>SSL certificate generated using certbot is valid for 3 months; after which you need to renew the certificate. Certbot automatically sets up the renewal for you so you don’t have to worry about.</p>\n<p>For the renewal to work, you need to have a cronjob or a systemd timer set up. To check if the automatic renewal is active, you can use one of two methods:</p>\n<ul>\n<li>\n<p>Check cronjob to see if there is a certbot renewal cron job registered by running the following command:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> crontab</span><span style=\"color:#BD93F9\"> -l</span></span>\n<span class=\"line\"></span></code></pre>\n</li>\n<li>\n<p>If you don’t find the cron job registered, check the systemd timer by running the following command.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> systemctl</span><span style=\"color:#F1FA8C\"> list-timers</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There should be a line that includes <code>certbot.timer</code>. This timer is configured to run twice daily—once in the morning and once in the evening—to automatically renew the SSL certificate near expiration.</p>\n</li>\n</ul>\n<p>Alright, so once you have verified that the auto-renewal timer is set up, let’s verify that the actual auto-renewal is working. Let’s do that next.</p>\n<h2 id=\"testing-if-auto-renewal-is-working\">Testing if Auto-Renewal is Working</h2>\n<p>To test if the auto-renewal is working, you can run the following command provided by certbot to dry-run the renewal process.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\"><code><span class=\"line\"><span style=\"color:#50FA7B\">sudo</span><span style=\"color:#F1FA8C\"> certbot</span><span style=\"color:#F1FA8C\"> renew</span><span style=\"color:#BD93F9\"> --dry-run</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will not renew the certificate but will show you the output of the renewal process.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Try visiting your website using HTTPS and you should see a lock icon showing that the connection is secure. Also, upon visiting the HTTP version of your website, you should be redirected to the HTTPS version.</p>\n<p>That’s it! You have successfully obtained and installed a Let’s Encrypt SSL certificate on your web server. You have also set up the auto-renewal so that you don’t have to worry about renewing it manually.</p>";

				const frontmatter$a = {"title":"Guide to Let's Encrypt SSL Setup","description":"Learn how to protect your website using Let's Encrypt SSL Certificates.","authorId":"kamran","seo":{"title":"Guide to Let's Encrypt SSL Setup - roadmap.sh","description":"Learn how to protect your website using Let's Encrypt SSL Certificates."},"isNew":false,"type":"textual","date":"2023-03-13T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$a = "/workspaces/developer-roadmap/src/data/guides/setup-and-auto-renew-ssl-certificates.md";
				const url$a = undefined;
				function rawContent$a() {
					return "\nIn this tutorial, I will guide you on creating a free Let's Encrypt SSL certificate for your website that gets automatically renewed. This process requires minimal to no configuration on your part. Let's get started!\n\nFirst and foremost, you need to have a remote server where your web application is deployed. You might have Nginx, Apache, or any other web server. This tutorial will be specific to Nginx or Apache; if you are using another web server, you can go to [certbot documentation](https://certbot.eff.org/instructions) and get specific instructions for your platform.\n\n## Installation\n\nWe need to install `snapd`, which is the package manager that will allow us to install `certbot` from Let's Encrypt for automatic renewal. Run the following commands in your terminal.\n\n```shell\nsudo apt-get update\nsudo apt-get install snapd\n\nsudo snap install core; snap refresh core\n```\n\nNow that `snapd` is installed, we can install `certbot` which we will be using to obtain and install the SSL certificate.\n\n```shell\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n```\n\nRun the following command to verify that `certbot` is installed.\n\n```shell\ncertbot --version\n```\n\n## Getting the SSL Certificate\n\nNow that `certbot` is installed, we need to obtain an SSL certificate. The command will ask you for your email address and the domain name for which you want to obtain the SSL certificate. You can also specify multiple domain names if you want to secure multiple domains with a single certificate.\n\nYou can either run the following command for the interactive mode where you will be asked several questions to obtain the SSL certificate.\n\n```shell\n# Replace --nginx with --apache if you are using Apache\nsudo certbot --nginx\n```\n\nYou will be asked to enter your email address and agree to the terms of service. You will also be asked to enter the domain name for which you want to obtain the SSL certificate. You can also specify multiple domain names if you want to secure multiple domains with a single certificate.\n\nAlternatively, you can run the following command to obtain the SSL certificate in a non-interactive mode where you will not be asked any questions. This is useful if you want to automate the process.\n\n```shell\nsudo certbot --apache \\\n  --agree-tos \\\n  -m you@email.com \\\n  --no-eff-email \\\n  --redirect \\\n  --domains news.roadmap.sh\n```\n\nThis command will obtain an SSL certificate for the specified domain name, install it for you, and redirect HTTP traffic to HTTPS. The SSL certificate is valid for three months, after which it will expire.\n\n## Auto-Renewal of SSL Certificate\n\nSSL certificate generated using certbot is valid for 3 months; after which you need to renew the certificate. Certbot automatically sets up the renewal for you so you don't have to worry about.\n\nFor the renewal to work, you need to have a cronjob or a systemd timer set up. To check if the automatic renewal is active, you can use one of two methods:\n\n- Check cronjob to see if there is a certbot renewal cron job registered by running the following command:\n\n  ```shell\n  sudo crontab -l\n  ```\n\n- If you don't find the cron job registered, check the systemd timer by running the following command.\n\n  ```shell\n  sudo systemctl list-timers\n  ```\n\n  There should be a line that includes `certbot.timer`. This timer is configured to run twice daily—once in the morning and once in the evening—to automatically renew the SSL certificate near expiration.\n\nAlright, so once you have verified that the auto-renewal timer is set up, let's verify that the actual auto-renewal is working. Let's do that next.\n\n## Testing if Auto-Renewal is Working\n\nTo test if the auto-renewal is working, you can run the following command provided by certbot to dry-run the renewal process.\n\n```shell\nsudo certbot renew --dry-run\n```\n\nThis will not renew the certificate but will show you the output of the renewal process.\n\n## Conclusion\n\nTry visiting your website using HTTPS and you should see a lock icon showing that the connection is secure. Also, upon visiting the HTTP version of your website, you should be redirected to the HTTPS version.\n\nThat's it! You have successfully obtained and installed a Let's Encrypt SSL certificate on your web server. You have also set up the auto-renewal so that you don't have to worry about renewing it manually.\n";
				}
				function compiledContent$a() {
					return html$a;
				}
				function getHeadings$a() {
					return [{"depth":2,"slug":"installation","text":"Installation"},{"depth":2,"slug":"getting-the-ssl-certificate","text":"Getting the SSL Certificate"},{"depth":2,"slug":"auto-renewal-of-ssl-certificate","text":"Auto-Renewal of SSL Certificate"},{"depth":2,"slug":"testing-if-auto-renewal-is-working","text":"Testing if Auto-Renewal is Working"},{"depth":2,"slug":"conclusion","text":"Conclusion"}];
				}

				const Content$a = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$a;
					content.file = file$a;
					content.url = url$a;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$a)}`;
				});

const __vite_glob_0_35 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$a,
	compiledContent: compiledContent$a,
	default: Content$a,
	file: file$a,
	frontmatter: frontmatter$a,
	getHeadings: getHeadings$a,
	rawContent: rawContent$a,
	url: url$a
}, Symbol.toStringTag, { value: 'Module' }));

const html$9 = "<p>When you are working on a backend application, you are likely to need a database. You can either install it on your machine or use a Docker container. I prefer to use Docker containers because it is easier to setup and doesn’t pollute my machine with unnecessary dependencies.</p>\n<p>This short guide will show you how to spin up a MySQL, PostgreSQL, or MongoDB instance on your local machine using docker. Feel free to submit a PR adding more databases.</p>\n<h2 id=\"postgresql\">PostgreSQL</h2>\n<p>You can run the following command to run PostgreSQL in a Docker container:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --name</span><span style=\"color:#F1FA8C\"> pg</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --detach</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --publish</span><span style=\"color:#F1FA8C\"> 5432:5432</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --env</span><span style=\"color:#F1FA8C\"> POSTGRES_PASSWORD=admin</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  postgres</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now you can connect and run commands against the instance using the following:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> exec</span><span style=\"color:#BD93F9\"> -it</span><span style=\"color:#F1FA8C\"> pg</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  psql</span><span style=\"color:#BD93F9\"> -U</span><span style=\"color:#F1FA8C\"> postgres</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"mysql\">MySQL</h2>\n<p>You can run the following command to run MySQL in a Docker container:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --name</span><span style=\"color:#F1FA8C\"> ms</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --publish</span><span style=\"color:#F1FA8C\"> 3306:3306</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --detach</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --env</span><span style=\"color:#F1FA8C\"> MYSQL_ROOT_PASSWORD=admin</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  mysql</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now, you can use the following to run commands against the MySQL instance:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> exec</span><span style=\"color:#BD93F9\"> -it</span><span style=\"color:#F1FA8C\"> ms</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  mysql</span><span style=\"color:#BD93F9\"> -u</span><span style=\"color:#F1FA8C\"> root</span><span style=\"color:#BD93F9\"> -padmin</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"mongodb\">MongoDB</h2>\n<p>You can run the following command to run MongoDB in a Docker container:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> run</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --name</span><span style=\"color:#F1FA8C\"> mdb</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --publish</span><span style=\"color:#F1FA8C\"> 27017:27017</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#BD93F9\">  --detach</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  mongo</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now, you can use the following to run commands against the MongoDB instance:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#50FA7B\">docker</span><span style=\"color:#F1FA8C\"> exec</span><span style=\"color:#BD93F9\"> -it</span><span style=\"color:#F1FA8C\"> mdb</span><span style=\"color:#FF79C6\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#F1FA8C\">  mongo</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Feel free to <a href=\"https://github.com/kamranahmedse/roadmap.sh/tree/master/src/data/guides/single-command-database-setup.md\" target=\"_blank\">submit a pull request</a> by adding additional databases to this guide.</p>";

				const frontmatter$9 = {"title":"Single Command Database Setup","description":"Learn how to run MySQL, PostgreSQL, or MongoDB in Docker with single Command","authorId":"kamran","seo":{"title":"Single Command Database Setup - roadmap.sh","description":"Learn how to run MySQL, PostgreSQL, or MongoDB in Docker with single Command"},"isNew":false,"type":"textual","date":"2023-02-27T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","guide-sitemap"]};
				const file$9 = "/workspaces/developer-roadmap/src/data/guides/single-command-database-setup.md";
				const url$9 = undefined;
				function rawContent$9() {
					return "\nWhen you are working on a backend application, you are likely to need a database. You can either install it on your machine or use a Docker container. I prefer to use Docker containers because it is easier to setup and doesn't pollute my machine with unnecessary dependencies.\n\nThis short guide will show you how to spin up a MySQL, PostgreSQL, or MongoDB instance on your local machine using docker. Feel free to submit a PR adding more databases.\n\n## PostgreSQL\n\nYou can run the following command to run PostgreSQL in a Docker container:\n\n```bash\ndocker run \\\n  --name pg \\\n  --detach \\\n  --publish 5432:5432 \\\n  --env POSTGRES_PASSWORD=admin \\\n  postgres\n```\n\nNow you can connect and run commands against the instance using the following:\n\n```bash\ndocker exec -it pg \\\n  psql -U postgres\n```\n\n## MySQL\n\nYou can run the following command to run MySQL in a Docker container:\n\n```bash\ndocker run \\\n  --name ms \\\n  --publish 3306:3306 \\\n  --detach \\\n  --env MYSQL_ROOT_PASSWORD=admin \\\n  mysql\n```\n\nNow, you can use the following to run commands against the MySQL instance:\n\n```bash\ndocker exec -it ms \\\n  mysql -u root -padmin\n```\n\n## MongoDB\n\nYou can run the following command to run MongoDB in a Docker container:\n\n```bash\ndocker run \\\n  --name mdb \\\n  --publish 27017:27017 \\\n  --detach \\\n  mongo\n```\n\nNow, you can use the following to run commands against the MongoDB instance:\n\n```bash\ndocker exec -it mdb \\\n  mongo\n```\n\nFeel free to [submit a pull request](https://github.com/kamranahmedse/roadmap.sh/tree/master/src/data/guides/single-command-database-setup.md) by adding additional databases to this guide.\n";
				}
				function compiledContent$9() {
					return html$9;
				}
				function getHeadings$9() {
					return [{"depth":2,"slug":"postgresql","text":"PostgreSQL"},{"depth":2,"slug":"mysql","text":"MySQL"},{"depth":2,"slug":"mongodb","text":"MongoDB"}];
				}

				const Content$9 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$9;
					content.file = file$9;
					content.url = url$9;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$9)}`;
				});

const __vite_glob_0_36 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$9,
	compiledContent: compiledContent$9,
	default: Content$9,
	file: file$9,
	frontmatter: frontmatter$9,
	getHeadings: getHeadings$9,
	rawContent: rawContent$9,
	url: url$9
}, Symbol.toStringTag, { value: 'Module' }));

const html$8 = "<p><a href=\"/guides/ssl-tls-https-ssh.png\"><img src=\"/guides/ssl-tls-https-ssh.png\" alt=\"SSL vs TLS vs HTTPs vs SSH\"></a></p>";

				const frontmatter$8 = {"title":"SSL vs TLS vs SSH","description":"Quick tidbit on the differences between SSL, TLS, HTTPS and SSH","authorId":"kamran","seo":{"title":"SSL vs TLS vs SSH - roadmap.sh","description":"Quick tidbit on the differences between SSL, TLS, HTTPS and SSH"},"isNew":false,"type":"visual","date":"2021-04-22T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$8 = "/workspaces/developer-roadmap/src/data/guides/ssl-tls-https-ssh.md";
				const url$8 = undefined;
				function rawContent$8() {
					return "\n[![SSL vs TLS vs HTTPs vs SSH](/guides/ssl-tls-https-ssh.png)](/guides/ssl-tls-https-ssh.png)\n";
				}
				function compiledContent$8() {
					return html$8;
				}
				function getHeadings$8() {
					return [];
				}

				const Content$8 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$8;
					content.file = file$8;
					content.url = url$8;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$8)}`;
				});

const __vite_glob_0_37 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$8,
	compiledContent: compiledContent$8,
	default: Content$8,
	file: file$8,
	frontmatter: frontmatter$8,
	getHeadings: getHeadings$8,
	rawContent: rawContent$8,
	url: url$8
}, Symbol.toStringTag, { value: 'Module' }));

const html$7 = "<p><a href=\"/guides/sso.png\"><img src=\"/guides/sso.png\" alt=\"SSO\"></a></p>";

				const frontmatter$7 = {"title":"SSO — Single Sign On","description":"Learn the basics of SAML and understand how does Single Sign On work.","authorId":"kamran","seo":{"title":"SSO — Single Sign On - roadmap.sh","description":"Learn the basics of SAML and understand how does Single Sign On work."},"isNew":false,"type":"visual","date":"2021-07-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$7 = "/workspaces/developer-roadmap/src/data/guides/sso.md";
				const url$7 = undefined;
				function rawContent$7() {
					return "\n[![SSO](/guides/sso.png)](/guides/sso.png)\n";
				}
				function compiledContent$7() {
					return html$7;
				}
				function getHeadings$7() {
					return [];
				}

				const Content$7 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$7;
					content.file = file$7;
					content.url = url$7;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$7)}`;
				});

const __vite_glob_0_38 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$7,
	compiledContent: compiledContent$7,
	default: Content$7,
	file: file$7,
	frontmatter: frontmatter$7,
	getHeadings: getHeadings$7,
	rawContent: rawContent$7,
	url: url$7
}, Symbol.toStringTag, { value: 'Module' }));

const html$6 = "<p><a href=\"/guides/token-authentication.png\"><img src=\"/guides/token-authentication.png\" alt=\"Token based Authentication\"></a></p>";

				const frontmatter$6 = {"title":"Token Based Authentication","description":"Understand what is token based authentication and how it is implemented","authorId":"kamran","seo":{"title":"Token Based Authentication - roadmap.sh","description":"Understand what is token based authentication and how it is implemented"},"isNew":false,"type":"visual","date":"2021-06-02T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$6 = "/workspaces/developer-roadmap/src/data/guides/token-authentication.md";
				const url$6 = undefined;
				function rawContent$6() {
					return "\n[![Token based Authentication](/guides/token-authentication.png)](/guides/token-authentication.png)\n";
				}
				function compiledContent$6() {
					return html$6;
				}
				function getHeadings$6() {
					return [];
				}

				const Content$6 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$6;
					content.file = file$6;
					content.url = url$6;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$6)}`;
				});

const __vite_glob_0_39 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$6,
	compiledContent: compiledContent$6,
	default: Content$6,
	file: file$6,
	frontmatter: frontmatter$6,
	getHeadings: getHeadings$6,
	rawContent: rawContent$6,
	url: url$6
}, Symbol.toStringTag, { value: 'Module' }));

const html$5 = "<p>BitTorrent is a protocol for downloading and distributing files across the Internet. In contrast with the traditional client/server relationship, in which downloaders connect to a central server (for example: watching a movie on Netflix, or loading the web page you’re reading now), participants in the BitTorrent network, called <strong>peers</strong>, download pieces of files from <em>each other</em>—this is what makes it a <strong>peer-to-peer</strong> protocol. In this article we will investigate how this works, and build our own client that can find peers and exchange data between them.</p>\n<p><img src=\"/guides/torrent-client/client-server-p2p.png\" alt=\"diagram showing the difference between client/server (all clients connecting to one server) and peer-to-peer (peers connecting to each other) relationships\"></p>\n<p>The protocol evolved organically over the past 20 years, and various people and organizations added extensions for features like encryption, private torrents, and new ways of finding peers. We’ll be implementing the <a href=\"https://www.bittorrent.org/beps/bep_0003.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">original spec</a> from 2001 to keep this a weekend-sized project.</p>\n<p>I’ll be using a <a href=\"https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/#indexlist\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Debian ISO</a> file as my guinea pig because it’s big, but not huge, at 350MB. As a popular Linux distribution, there will be lots of fast and cooperative peers for us to connect to. And we’ll avoid the legal and ethical issues related to downloading pirated content.</p>\n<h2 id=\"finding-peers\">Finding peers</h2>\n<p>Here’s a problem: we want to download a file with BitTorrent, but it’s a peer-to-peer protocol and we have no idea where to find peers to download it from. This is a lot like moving to a new city and trying to make friends—maybe we’ll hit up a local pub or a meetup group! Centralized locations like these are the big idea behind trackers, which are central servers that introduce peers to each other. They’re just web servers running over HTTP, and you can find Debian’s at <a href=\"http://bttracker.debian.org:6969/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">http://bttracker.debian.org:6969/</a></p>\n<p><img src=\"/guides/torrent-client/trackers.png\" alt=\"illustration of a desktop computer and laptop sitting at a pub\"></p>\n<p>Of course, these central servers are liable to get raided by the feds if they facilitate peers exchanging illegal content. You may remember reading about trackers like TorrentSpy, Popcorn Time, and KickassTorrents getting seized and shut down. New methods cut out the middleman by making even <strong>peer discovery</strong> a distributed process. We won’t be implementing them, but if you’re interested, some terms you can research are <strong>DHT</strong>, <strong>PEX</strong>, and <strong>magnet links</strong>.</p>\n<h3 id=\"parsing-a-torrent-file\">Parsing a .torrent file</h3>\n<p>A .torrent file describes the contents of a torrentable file and information for connecting to a tracker. It’s all we need in order to kickstart the process of downloading a torrent. Debian’s .torrent file looks like this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">d8:announce41:http://bttracker.debian.org:6969/announce7:comment35:\"Debian CD from cdimage.debian.org\"13:creation datei1573903810e9:httpseedsl145:https://cdimage.debian.org/cdimage/release/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso145:https://cdimage.debian.org/cdimage/archive/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.isoe4:infod6:lengthi351272960e4:name31:debian-10.2.0-amd64-netinst.iso12:piece lengthi262144e6:pieces26800:�\u001f�\u000f���PS�^�� (binary blob of the hashes of each piece)ee</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That mess is encoded in a format called <strong>Bencode</strong> (pronounced <em>bee-encode</em>), and we’ll need to decode it.</p>\n<p>Bencode can encode roughly the same types of structures as JSON—strings, integers, lists, and dictionaries. Bencoded data is not as human-readable/writable as JSON, but it can efficiently handle binary data and it’s really simple to parse from a stream. Strings come with a length prefix, and look like <code>4:spam</code>. Integers go between <em>start</em> and <em>end</em> markers, so <code>7</code> would encode to <code>i7e</code>. Lists and dictionaries work in a similar way: <code>l4:spami7ee</code> represents <code>['spam', 7]</code>, while <code>d4:spami7ee</code> means <code>{spam: 7}</code>.</p>\n<p>In a prettier format, our .torrent file looks like this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">d</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">8:announce</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">41:http://bttracker.debian.org:6969/announce</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">7:comment</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">35:\"Debian CD from cdimage.debian.org\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">13:creation date</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">i1573903810e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">4:info</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">d</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">6:length</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">i351272960e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">4:name</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">31:debian-10.2.0-amd64-netinst.iso</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">12:piece length</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">i262144e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">6:pieces</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">26800:�\u001f�\u000f���PS�^�� (binary blob of the hashes of each piece)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">e</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In this file, we can spot the URL of the tracker, the creation date (as a Unix timestamp), the name and size of the file, and a big binary blob containing the SHA-1 hashes of each <strong>piece</strong>, which are equally-sized parts of the file we want to download. The exact size of a piece varies between torrents, but they are usually somewhere between 256KB and 1MB. This means that a large file might be made up of <em>thousands</em> of pieces. We’ll download these pieces from our peers, check them against the hashes from our torrent file, assemble them together, and boom, we’ve got a file!</p>\n<p><img src=\"/guides/torrent-client/pieces.png\" alt=\"&#x22;illustration of a file being cut with scissors into multiple pieces, starting with piece 0\"></p>\n<p>This mechanism allows us to verify the integrity of each piece as we go. It makes BitTorrent resistant to accidental corruption or intentional <strong>torrent poisoning</strong>. Unless an attacker is capable of breaking SHA-1 with a preimage attack, we will get exactly the content we asked for.</p>\n<p>It would be really fun to write a bencode parser, but parsing isn’t our focus today. But I found Fredrik Lundh’s <a href=\"https://effbot.org/zone/bencode.htm\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">50 line parser</a> to be especially illuminating. For this project, I used <a href=\"https://github.com/jackpal/bencode-go\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">github.com/jackpal/bencode-go</a>:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">    \"</span><span style=\"color:#F1FA8C\">github.com/jackpal/bencode-go</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> bencodeInfo</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Pieces      </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">bencode:\"pieces\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    PieceLength </span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#E9F284\">    `</span><span style=\"color:#F1FA8C\">bencode:\"piece length\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Length      </span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#E9F284\">    `</span><span style=\"color:#F1FA8C\">bencode:\"length\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Name        </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">bencode:\"name\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> bencodeTorrent</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Announce </span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#E9F284\">      `</span><span style=\"color:#F1FA8C\">bencode:\"announce\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Info     </span><span style=\"color:#8BE9FD;font-style:italic\">bencodeInfo</span><span style=\"color:#E9F284\"> `</span><span style=\"color:#F1FA8C\">bencode:\"info\"</span><span style=\"color:#E9F284\">`</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Open parses a torrent file</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> Open</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">r</span><span style=\"color:#8BE9FD;font-style:italic\"> io</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Reader</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">bencodeTorrent</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    bto </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> bencodeTorrent</span><span style=\"color:#F8F8F2\">{}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> bencode.</span><span style=\"color:#50FA7B\">Unmarshal</span><span style=\"color:#F8F8F2\">(r, </span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#F8F8F2\">bto)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#FF79C6\"> &#x26;</span><span style=\"color:#F8F8F2\">bto, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Because I like to keep my structures relatively flat, and I like to keep my application structs separate from my serialization structs, I exported a different, flatter struct named <code>TorrentFile</code> and wrote a few helper functions to convert between the two.</p>\n<p>Notably, I split <code>pieces</code> (previously a string) into a slice of hashes (each <code>[20]byte</code>) so that I can easily access individual hashes later. I also computed the SHA-1 hash of the entire bencoded <code>info</code> dict (the one which contained the name, size, and piece hashes). We know this as the <strong>infohash</strong> and it uniquely identifies files when we talk to trackers and peers. More on this later.</p>\n<p><img src=\"/guides/torrent-client/info-hash.png\" alt=\"a name tag saying &#x27;Hello my name is 86d4c80024a469be4c50bc5a102cf71780310074&#x27;\"></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> TorrentFile</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Announce    </span><span style=\"color:#8BE9FD;font-style:italic\">string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    InfoHash    [</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    PieceHashes [][</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    PieceLength </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Length      </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Name        </span><span style=\"color:#8BE9FD;font-style:italic\">string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">bto </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">bencodeTorrent</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">toTorrentFile</span><span style=\"color:#F8F8F2\">() (</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">TorrentFile</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // ...</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"retrieving-peers-from-the-tracker\">Retrieving peers from the tracker</h3>\n<p>Now that we have information about the file and its tracker, let’s talk to the tracker to <strong>announce</strong> our presence as a peer and to retrieve a list of other peers. We just need to make a GET request to the <code>announce</code> URL supplied in the .torrent file, with a few query parameters:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">t </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">TorrentFile</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">buildTrackerURL</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">peerID</span><span style=\"color:#F8F8F2\"> [</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">port</span><span style=\"color:#8BE9FD;font-style:italic\"> uint16</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    base, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> url.</span><span style=\"color:#50FA7B\">Parse</span><span style=\"color:#F8F8F2\">(t.Announce)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#E9F284\"> \"\"</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    params </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> url</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Values</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">        \"</span><span style=\"color:#F1FA8C\">info_hash</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:  []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">(t.InfoHash[:])},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">        \"</span><span style=\"color:#F1FA8C\">peer_id</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:    []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">(peerID[:])},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">        \"</span><span style=\"color:#F1FA8C\">port</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:       []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{strconv.</span><span style=\"color:#50FA7B\">Itoa</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">int</span><span style=\"color:#F8F8F2\">(Port))},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">        \"</span><span style=\"color:#F1FA8C\">uploaded</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:   []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">0</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">        \"</span><span style=\"color:#F1FA8C\">downloaded</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">: []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">0</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">        \"</span><span style=\"color:#F1FA8C\">compact</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:    []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">1</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">},</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">        \"</span><span style=\"color:#F1FA8C\">left</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">:       []</span><span style=\"color:#8BE9FD;font-style:italic\">string</span><span style=\"color:#F8F8F2\">{strconv.</span><span style=\"color:#50FA7B\">Itoa</span><span style=\"color:#F8F8F2\">(t.Length)},</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    base.RawQuery </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> params.</span><span style=\"color:#50FA7B\">Encode</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> base.</span><span style=\"color:#50FA7B\">String</span><span style=\"color:#F8F8F2\">(), </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The important ones:</p>\n<ul>\n<li><strong>info_hash</strong>: Identifies the <em>file</em> we’re trying to download. It’s the infohash we calculated earlier from the bencoded <code>info</code> dict. The tracker will use this to figure out which peers to show us.</li>\n<li><strong>peer_id</strong>: A 20 byte name to identify <em>ourselves</em> to trackers and peers. We’ll just generate 20 random bytes for this. Real BitTorrent clients have IDs like <code>-TR2940-k8hj0wgej6ch</code> which identify the client software and version—in this case, TR2940 stands for Transmission client 2.94.</li>\n</ul>\n<p><img src=\"/guides/torrent-client/info-hash-peer-id.png\" alt=\"a file with a name tag saying &#x27;info_hash&#x27; and a person with a name tag &#x27;peer_id&#x27;\"></p>\n<h3 id=\"parsing-the-tracker-response\">Parsing the tracker response</h3>\n<p>We get back a bencoded response:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">d</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">8:interval</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">i900e</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">5:peers</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">252:(another long binary blob)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">e</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>Interval</code> tells us how often we’re supposed to connect to the tracker again to refresh our list of peers. A value of 900 means we should reconnect every 15 minutes (900 seconds).</p>\n<p><code>Peers</code> is another long binary blob containing the IP addresses of each peer. It’s made out of <strong>groups of six bytes</strong>. The first four bytes in each group represent the peer’s IP address—each byte represents a number in the IP. The last two bytes represent the port, as a big-endian <code>uint16</code>. <strong>Big-endian</strong>, or <strong>network order</strong>, means that we can interpret a group of bytes as an integer by just squishing them together left to right. For example, the bytes <code>0x1A</code>, <code>0xE1</code> make <code>0x1AE1</code>, or 6881 in decimal.</p>\n<p><img src=\"/guides/torrent-client/address.png\" alt=\"diagram showing how 192, 0, 2, 123, 0x1A, 0xE1 can be interpreted as 192.0.1.123:6881\"></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Peer encodes connection information for a peer</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Peer</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    IP   </span><span style=\"color:#8BE9FD;font-style:italic\">net</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">IP</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Port </span><span style=\"color:#8BE9FD;font-style:italic\">uint16</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Unmarshal parses peer IP addresses and ports from a buffer</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> Unmarshal</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">peersBin</span><span style=\"color:#F8F8F2\"> []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">) ([]</span><span style=\"color:#8BE9FD;font-style:italic\">Peer</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    const</span><span style=\"color:#F8F8F2\"> peerSize </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 6</span><span style=\"color:#6272A4\"> // 4 for IP, 2 for port</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    numPeers </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> len</span><span style=\"color:#F8F8F2\">(peersBin) </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#F8F8F2\"> peerSize</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#50FA7B\"> len</span><span style=\"color:#F8F8F2\">(peersBin)</span><span style=\"color:#FF79C6\">%</span><span style=\"color:#F8F8F2\">peerSize </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> fmt.</span><span style=\"color:#50FA7B\">Errorf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Received malformed peers</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    peers </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">Peer</span><span style=\"color:#F8F8F2\">, numPeers)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    for</span><span style=\"color:#F8F8F2\"> i </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\">; i </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> numPeers; i</span><span style=\"color:#FF79C6\">++</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        offset </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> i </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#F8F8F2\"> peerSize</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        peers[i].IP </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> net.</span><span style=\"color:#50FA7B\">IP</span><span style=\"color:#F8F8F2\">(peersBin[offset : offset</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">])</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        peers[i].Port </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> binary.BigEndian.</span><span style=\"color:#50FA7B\">Uint16</span><span style=\"color:#F8F8F2\">(peersBin[offset</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\"> : offset</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\">6</span><span style=\"color:#F8F8F2\">])</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> peers, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"downloading-from-peers\">Downloading from peers</h2>\n<p>Now that we have a list of peers, it’s time to connect with them and start downloading pieces! We can break down the process into a few steps. For each peer, we want to:</p>\n<ol>\n<li>Start a TCP connection with the peer. This is like starting a phone call.</li>\n<li>Complete a two-way BitTorrent <strong>handshake</strong>. <em>“Hello?” “Hello.”</em></li>\n<li>Exchange <strong>messages</strong> to download <strong>pieces</strong>. <em>“I’d like piece #231 please.”</em></li>\n</ol>\n<h2 id=\"start-a-tcp-connection\">Start a TCP connection</h2>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">conn, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> net.</span><span style=\"color:#50FA7B\">DialTimeout</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">tcp</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, peer.</span><span style=\"color:#50FA7B\">String</span><span style=\"color:#F8F8F2\">(), </span><span style=\"color:#BD93F9\">3</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#F8F8F2\">time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>I set a timeout so that I don’t waste too much time on peers that aren’t going to let me connect. For the most part, it’s a pretty standard TCP connection.</p>\n<h3 id=\"complete-the-handshake\">Complete the handshake</h3>\n<p>We’ve just set up a connection with a peer, but we want to do a handshake to validate our assumptions that the peer</p>\n<ul>\n<li>can communicate using the BitTorrent protocol</li>\n<li>is able to understand and respond to our messages</li>\n<li>has the file that we want, or at least knows what we’re talking about</li>\n</ul>\n<p><img src=\"/guides/torrent-client/handshake.png\" alt=\"Two computers communicating. One asks &#x27;do you speak BitTorrent and have this file?&#x27; and the other replies &#x27;I speak BitTorrent and have that file&#x27;\"></p>\n<p>My father told me that the secret to a good handshake is a firm grip and eye contact. The secret to a good BitTorrent handshake is that it’s made up of five parts:</p>\n<ol>\n<li>The length of the protocol identifier, which is always 19 (0x13 in hex)</li>\n<li>The protocol identifier, called the <strong>pstr</strong> which is always <code>BitTorrent protocol</code></li>\n<li>Eight <strong>reserved bytes</strong>, all set to 0. We’d flip some of them to 1 to indicate that we support certain <a href=\"http://www.bittorrent.org/beps/bep_0010.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">extensions</a>. But we don’t, so we’ll keep them at 0.</li>\n<li>The <strong>infohash</strong> that we calculated earlier to identify which file we want</li>\n<li>The <strong>Peer ID</strong> that we made up to identify ourselves</li>\n</ol>\n<p>Put together, a handshake string might look like this:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\"><code><span class=\"line\"><span style=\"color:#F8F8F2\">\\x13BitTorrent protocol\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x86\\xd4\\xc8\\x00\\x24\\xa4\\x69\\xbe\\x4c\\x50\\xbc\\x5a\\x10\\x2c\\xf7\\x17\\x80\\x31\\x00\\x74-TR2940-k8hj0wgej6ch</span></span>\n<span class=\"line\"></span></code></pre>\n<p>After we send a handshake to our peer, we should receive a handshake back in the same format. The infohash we get back should match the one we sent so that we know that we’re talking about the same file. If everything goes as planned, we’re good to go. If not, we can sever the connection because there’s something wrong. <em>“Hello?” “这是谁？ 你想要什么？” “Okay, wow, wrong number.”</em></p>\n<p>In our code, let’s make a struct to represent a handshake, and write a few methods for serializing and reading them:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// A Handshake is a special message that a peer uses to identify itself</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Handshake</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Pstr     </span><span style=\"color:#8BE9FD;font-style:italic\">string</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    InfoHash [</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    PeerID   [</span><span style=\"color:#BD93F9\">20</span><span style=\"color:#F8F8F2\">]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serialize serializes the handshake to a buffer</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">h </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Handshake</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">Serialize</span><span style=\"color:#F8F8F2\">() []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    buf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#50FA7B\">len</span><span style=\"color:#F8F8F2\">(h.Pstr)</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\">49</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    buf[</span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> byte</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#50FA7B\">len</span><span style=\"color:#F8F8F2\">(h.Pstr))</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    curr </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#BD93F9\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    curr </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#50FA7B\"> copy</span><span style=\"color:#F8F8F2\">(buf[curr:], h.Pstr)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    curr </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#50FA7B\"> copy</span><span style=\"color:#F8F8F2\">(buf[curr:], </span><span style=\"color:#50FA7B\">make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">8</span><span style=\"color:#F8F8F2\">)) </span><span style=\"color:#6272A4\">// 8 reserved bytes</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    curr </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#50FA7B\"> copy</span><span style=\"color:#F8F8F2\">(buf[curr:], h.InfoHash[:])</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    curr </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#50FA7B\"> copy</span><span style=\"color:#F8F8F2\">(buf[curr:], h.PeerID[:])</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> buf</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Read parses a handshake from a stream</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> Read</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">r</span><span style=\"color:#8BE9FD;font-style:italic\"> io</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Reader</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Handshake</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // Do Serialize(), but backwards</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // ...</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"send-and-receive-messages\">Send and receive messages</h3>\n<p>Once we’ve completed the initial handshake, we can send and receive <strong>messages</strong>. Well, not quite—if the other peer isn’t ready to accept messages, we can’t send any until they tell us they’re ready. In this state, we’re considered <strong>choked</strong> by the other peer. They’ll send us an <strong>unchoke</strong> message to let us know that we can begin asking them for data. By default, we assume that we’re choked until proven otherwise.</p>\n<p>Once we’ve been unchoked, we can then begin sending <strong>requests</strong> for pieces, and they can send us messages back containing pieces.</p>\n<p><img src=\"/guides/torrent-client/choke.png\" alt=\"&#x22;A cartoon in which person 1 says &#x27;hello I would like piece number—&#x27; and person 2 grabs him by the neck and says &#x27;00 00 00 01 00 (choke)&#x27;\"></p>\n<h4 id=\"interpreting-messages\">Interpreting messages</h4>\n<p>A message has a length, an <strong>ID</strong> and a <strong>payload</strong>. On the wire, it looks like:</p>\n<p><img src=\"/guides/torrent-client/message.png\" alt=\"A message with 4 byte for the length, 1 byte for ID, and an optional payload\"></p>\n<p>A message starts with a length indicator which tells us how many bytes long the message will be. It’s a 32-bit integer, meaning it’s made out of four bytes smooshed together in big-endian order. The next byte, the <strong>ID</strong>, tells us which type of message we’re receiving—for example, a <code>2</code> byte means “interested.” Finally, the optional <strong>payload</strong> fills out the remaining length of the message.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> messageID</span><span style=\"color:#8BE9FD;font-style:italic\"> uint8</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgChoke         </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgUnchoke       </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgInterested    </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgNotInterested </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 3</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgHave          </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 4</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgBitfield      </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 5</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgRequest       </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 6</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgPiece         </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 7</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    MsgCancel        </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span><span style=\"color:#FF79C6\"> =</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Message stores ID and payload of a message</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Message</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    ID      </span><span style=\"color:#8BE9FD;font-style:italic\">messageID</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    Payload []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Serialize serializes a message into a buffer of the form</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// &#x3C;length prefix>&#x3C;message ID>&#x3C;payload></span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Interprets `nil` as a keep-alive message</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">m </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Message</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">Serialize</span><span style=\"color:#F8F8F2\">() []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> m </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    length </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> uint32</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#50FA7B\">len</span><span style=\"color:#F8F8F2\">(m.Payload) </span><span style=\"color:#FF79C6\">+</span><span style=\"color:#BD93F9\"> 1</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#6272A4\">// +1 for id</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    buf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">4</span><span style=\"color:#FF79C6\">+</span><span style=\"color:#F8F8F2\">length)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    binary.BigEndian.</span><span style=\"color:#50FA7B\">PutUint32</span><span style=\"color:#F8F8F2\">(buf[</span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">:</span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">], length)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    buf[</span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">] </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#8BE9FD;font-style:italic\"> byte</span><span style=\"color:#F8F8F2\">(m.ID)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">    copy</span><span style=\"color:#F8F8F2\">(buf[</span><span style=\"color:#BD93F9\">5</span><span style=\"color:#F8F8F2\">:], m.Payload)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> buf</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>To read a message from a stream, we just follow the format of a message. We read four bytes and interpret them as a <code>uint32</code> to get the <strong>length</strong> of the message. Then, we read that number of bytes to get the <strong>ID</strong> (the first byte) and the <strong>payload</strong> (the remaining bytes).</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Read parses a message from a stream. Returns `nil` on keep-alive message</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> Read</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">r</span><span style=\"color:#8BE9FD;font-style:italic\"> io</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Reader</span><span style=\"color:#F8F8F2\">) (</span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Message</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    lengthBuf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">4</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    _, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> io.</span><span style=\"color:#50FA7B\">ReadFull</span><span style=\"color:#F8F8F2\">(r, lengthBuf)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    length </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> binary.BigEndian.</span><span style=\"color:#50FA7B\">Uint32</span><span style=\"color:#F8F8F2\">(lengthBuf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // keep-alive message</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> length </span><span style=\"color:#FF79C6\">==</span><span style=\"color:#BD93F9\"> 0</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    messageBuf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, length)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    _, err </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> io.</span><span style=\"color:#50FA7B\">ReadFull</span><span style=\"color:#F8F8F2\">(r, messageBuf)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    m </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> Message</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        ID:      </span><span style=\"color:#50FA7B\">messageID</span><span style=\"color:#F8F8F2\">(messageBuf[</span><span style=\"color:#BD93F9\">0</span><span style=\"color:#F8F8F2\">]),</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        Payload: messageBuf[</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">:],</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#FF79C6\"> &#x26;</span><span style=\"color:#F8F8F2\">m, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h4 id=\"bitfields\">Bitfields</h4>\n<p>One of the most interesting types of message is the <strong>bitfield</strong>, which is a data structure that peers use to efficiently encode which pieces they are able to send us. A bitfield looks like a byte array, and to check which pieces they have, we just need to look at the positions of the <em>bits</em> set to 1. You can think of it like the digital equivalent of a coffee shop loyalty card. We start with a blank card of all <code>0</code>, and flip bits to <code>1</code> to mark their positions as “stamped.”</p>\n<p><img src=\"/guides/torrent-client/bitfield.png\" alt=\"a coffee shop loyalty card with eight slots, with stamps on the first four slots and a stamp on the second to last slot, represented as 11110010\"></p>\n<p>By working with <em>bits</em> instead of <em>bytes</em>, this data structure is super compact. We can stuff information about eight pieces in the space of a single byte—the size of a <code>bool</code>. The tradeoff is that accessing values becomes a little more tricky. The smallest unit of memory that computers can address are bytes, so to get to our bits, we have to do some bitwise manipulation:</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// A Bitfield represents the pieces that a peer has</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> Bitfield</span><span style=\"color:#F8F8F2\"> []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// HasPiece tells if a bitfield has a particular index set</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">bf </span><span style=\"color:#8BE9FD;font-style:italic\">Bitfield</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">HasPiece</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">index</span><span style=\"color:#8BE9FD;font-style:italic\"> int</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#8BE9FD;font-style:italic\">bool</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    byteIndex </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> index </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    offset </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> index </span><span style=\"color:#FF79C6\">%</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> bf[byteIndex]</span><span style=\"color:#FF79C6\">>></span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">7</span><span style=\"color:#FF79C6\">-</span><span style=\"color:#F8F8F2\">offset)</span><span style=\"color:#FF79C6\">&#x26;</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#FF79C6\"> !=</span><span style=\"color:#BD93F9\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// SetPiece sets a bit in the bitfield</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">bf </span><span style=\"color:#8BE9FD;font-style:italic\">Bitfield</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">SetPiece</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">index</span><span style=\"color:#8BE9FD;font-style:italic\"> int</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    byteIndex </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> index </span><span style=\"color:#FF79C6\">/</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    offset </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> index </span><span style=\"color:#FF79C6\">%</span><span style=\"color:#BD93F9\"> 8</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    bf[byteIndex] </span><span style=\"color:#FF79C6\">|=</span><span style=\"color:#BD93F9\"> 1</span><span style=\"color:#FF79C6\"> &#x3C;&#x3C;</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#BD93F9\">7</span><span style=\"color:#FF79C6\"> -</span><span style=\"color:#F8F8F2\"> offset)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3 id=\"putting-it-all-together\">Putting it all together</h3>\n<p>We now have all the tools we need to download a torrent: we have a list of peers obtained from the tracker, and we can communicate with them by dialing a TCP connection, initiating a handshake, and sending and receiving messages. Our last big problems are handling the <strong>concurrency</strong> involved in talking to multiple peers at once, and managing the <strong>state</strong> of our peers as we interact with them. These are both classically Hard problems.</p>\n<h4 id=\"managing-concurrency-channels-as-queues\">Managing concurrency: channels as queues</h4>\n<p>In Go, we <a href=\"https://blog.golang.org/share-memory-by-communicating\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">share memory by communicating</a>, and we can think of a Go channel as a cheap thread-safe queue.</p>\n<p>We’ll set up two channels to synchronize our concurrent workers: one for dishing out work (pieces to download) between peers, and another for collecting downloaded pieces. As downloaded pieces come in through the results channel, we can copy them into a buffer to start assembling our complete file.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// Init queues for workers to retrieve work and send results</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">workQueue </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">chan</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceWork</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#50FA7B\">len</span><span style=\"color:#F8F8F2\">(t.PieceHashes))</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">results </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FF79C6\">chan</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceResult</span><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">for</span><span style=\"color:#F8F8F2\"> index, hash </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> range</span><span style=\"color:#F8F8F2\"> t.PieceHashes {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    length </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> t.</span><span style=\"color:#50FA7B\">calculatePieceSize</span><span style=\"color:#F8F8F2\">(index)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    workQueue </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#FF79C6\"> &#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">pieceWork</span><span style=\"color:#F8F8F2\">{index, hash, length}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Start workers</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">for</span><span style=\"color:#F8F8F2\"> _, peer </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> range</span><span style=\"color:#F8F8F2\"> t.Peers {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    go</span><span style=\"color:#F8F8F2\"> t.</span><span style=\"color:#50FA7B\">startDownloadWorker</span><span style=\"color:#F8F8F2\">(peer, workQueue, results)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// Collect results into a buffer until full</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">buf </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, t.Length)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">donePieces </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#BD93F9\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">for</span><span style=\"color:#F8F8F2\"> donePieces </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#50FA7B\"> len</span><span style=\"color:#F8F8F2\">(t.PieceHashes) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    res </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> &#x3C;-</span><span style=\"color:#F8F8F2\">results</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    begin, end </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> t.</span><span style=\"color:#50FA7B\">calculateBoundsForPiece</span><span style=\"color:#F8F8F2\">(res.index)</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">    copy</span><span style=\"color:#F8F8F2\">(buf[begin:end], res.buf)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    donePieces</span><span style=\"color:#FF79C6\">++</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"><span style=\"color:#50FA7B\">close</span><span style=\"color:#F8F8F2\">(workQueue)</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We’ll spawn a worker goroutine for each peer we’ve received from the tracker. It’ll connect and handshake with the peer, and then start retrieving work from the <code>workQueue</code>, attempting to download it, and sending downloaded pieces back through the <code>results</code> channel.</p>\n<p><img src=\"/guides/torrent-client/download.png\" alt=\"a flow chart of the download strategy\"></p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">t </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">Torrent</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">startDownloadWorker</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">peer</span><span style=\"color:#8BE9FD;font-style:italic\"> peers</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Peer</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">workQueue</span><span style=\"color:#FF79C6\"> chan</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceWork</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">results</span><span style=\"color:#FF79C6\"> chan</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceResult</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    c, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> client.</span><span style=\"color:#50FA7B\">New</span><span style=\"color:#F8F8F2\">(peer, t.PeerID, t.InfoHash)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        log.</span><span style=\"color:#50FA7B\">Printf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Could not handshake with </span><span style=\"color:#BD93F9\">%s</span><span style=\"color:#F1FA8C\">. Disconnecting</span><span style=\"color:#FF79C6\">\\n</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, peer.IP)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        return</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    defer</span><span style=\"color:#F8F8F2\"> c.Conn.</span><span style=\"color:#50FA7B\">Close</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    log.</span><span style=\"color:#50FA7B\">Printf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Completed handshake with </span><span style=\"color:#BD93F9\">%s</span><span style=\"color:#FF79C6\">\\n</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, peer.IP)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    c.</span><span style=\"color:#50FA7B\">SendUnchoke</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    c.</span><span style=\"color:#50FA7B\">SendInterested</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    for</span><span style=\"color:#F8F8F2\"> pw </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#FF79C6\"> range</span><span style=\"color:#F8F8F2\"> workQueue {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#FF79C6\"> !</span><span style=\"color:#F8F8F2\">c.Bitfield.</span><span style=\"color:#50FA7B\">HasPiece</span><span style=\"color:#F8F8F2\">(pw.index) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            workQueue </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#F8F8F2\"> pw </span><span style=\"color:#6272A4\">// Put piece back on the queue</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            continue</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // Download the piece</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        buf, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#50FA7B\"> attemptDownloadPiece</span><span style=\"color:#F8F8F2\">(c, pw)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            log.</span><span style=\"color:#50FA7B\">Println</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Exiting</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            workQueue </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#F8F8F2\"> pw </span><span style=\"color:#6272A4\">// Put piece back on the queue</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            return</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        err </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#50FA7B\"> checkIntegrity</span><span style=\"color:#F8F8F2\">(pw, buf)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            log.</span><span style=\"color:#50FA7B\">Printf</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F1FA8C\">Piece #</span><span style=\"color:#BD93F9\">%d</span><span style=\"color:#F1FA8C\"> failed integrity check</span><span style=\"color:#FF79C6\">\\n</span><span style=\"color:#E9F284\">\"</span><span style=\"color:#F8F8F2\">, pw.index)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            workQueue </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#F8F8F2\"> pw </span><span style=\"color:#6272A4\">// Put piece back on the queue</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            continue</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        c.</span><span style=\"color:#50FA7B\">SendHave</span><span style=\"color:#F8F8F2\">(pw.index)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        results </span><span style=\"color:#FF79C6\">&#x3C;-</span><span style=\"color:#FF79C6\"> &#x26;</span><span style=\"color:#8BE9FD;font-style:italic\">pieceResult</span><span style=\"color:#F8F8F2\">{pw.index, buf}</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h4 id=\"managing-state\">Managing state</h4>\n<p>We’ll keep track of each peer in a struct, and modify that struct as we read messages. It’ll include data like how much we’ve downloaded from the peer, how much we’ve requested from them, and whether we’re choked. If we wanted to scale this further, we could formalize this as a finite state machine. But a struct and a switch are good enough for now.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">type</span><span style=\"color:#8BE9FD;font-style:italic\"> pieceProgress</span><span style=\"color:#FF79C6\"> struct</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    index      </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    client     </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">client</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Client</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    buf        []</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    downloaded </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    requested  </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    backlog    </span><span style=\"color:#8BE9FD;font-style:italic\">int</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#F8F8F2\"> (</span><span style=\"color:#FFB86C;font-style:italic\">state </span><span style=\"color:#FF79C6\">*</span><span style=\"color:#8BE9FD;font-style:italic\">pieceProgress</span><span style=\"color:#F8F8F2\">) </span><span style=\"color:#50FA7B\">readMessage</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    msg, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> state.client.</span><span style=\"color:#50FA7B\">Read</span><span style=\"color:#F8F8F2\">() </span><span style=\"color:#6272A4\">// this call blocks</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    switch</span><span style=\"color:#F8F8F2\"> msg.ID {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    case</span><span style=\"color:#F8F8F2\"> message.MsgUnchoke:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        state.client.Choked </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> false</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    case</span><span style=\"color:#F8F8F2\"> message.MsgChoke:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        state.client.Choked </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> true</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    case</span><span style=\"color:#F8F8F2\"> message.MsgHave:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        index, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> message.</span><span style=\"color:#50FA7B\">ParseHave</span><span style=\"color:#F8F8F2\">(msg)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        state.client.Bitfield.</span><span style=\"color:#50FA7B\">SetPiece</span><span style=\"color:#F8F8F2\">(index)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    case</span><span style=\"color:#F8F8F2\"> message.MsgPiece:</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        n, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> message.</span><span style=\"color:#50FA7B\">ParsePiece</span><span style=\"color:#F8F8F2\">(state.index, state.buf, msg)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        state.downloaded </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#F8F8F2\"> n</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        state.backlog</span><span style=\"color:#FF79C6\">--</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#BD93F9\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h4 id=\"time-to-make-requests\">Time to make requests!</h4>\n<p>Files, pieces, and piece hashes aren’t the full story—we can go further by breaking down pieces into <strong>blocks</strong>. A block is a part of a piece, and we can fully define a block by the <strong>index</strong> of the piece it’s part of, its byte <strong>offset</strong> within the piece, and its <strong>length</strong>. When we make requests for data from peers, we are actually requesting <em>blocks</em>. A block is usually 16KB large, meaning that a single 256 KB piece might actually require 16 requests.</p>\n<p>A peer is supposed to sever the connection if they receive a request for a block larger than 16KB. However, based on my experience, they’re often perfectly happy to satisfy requests up to 128KB. I only got moderate gains in overall speed with larger block sizes, so it’s probably better to stick with the spec.</p>\n<h4 id=\"pipelining\">Pipelining</h4>\n<p>Network round-trips are expensive, and requesting each block one by one will absolutely thank the performance of our download. Therefore, it’s important to <strong>pipeline</strong> our requests such that we keep up a constant pressure of some number of unfulfilled requests. This can increase the throughput of our connection by an order of magnitude.</p>\n<p><img src=\"/guides/torrent-client/pipelining.png\" alt=\"Two email threads simulating peer connections. The thread on the left shows a request followed by a reply, repeated three times. The thread on the left sends three requests, and receives three replies in quick succession.\"></p>\n<p>Classically, BitTorrent clients kept a queue of five pipelined requests, and that’s the value I’ll be using. I found that increasing it can up to double the speed of a download. Newer clients use an <a href=\"https://luminarys.com/posts/writing-a-bittorrent-client.html\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">adaptive</a> queue size to better accommodate modern network speeds and conditions. This is definitely a parameter worth tweaking, and it’s pretty low hanging fruit for future performance optimization.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#6272A4\">// MaxBlockSize is the largest number of bytes a request can ask for</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> MaxBlockSize </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 16384</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">// MaxBacklog is the number of unfulfilled requests a client can have in its pipeline</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">const</span><span style=\"color:#F8F8F2\"> MaxBacklog </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#BD93F9\"> 5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> attemptDownloadPiece</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#FFB86C;font-style:italic\">c</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">client</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Client</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#FFB86C;font-style:italic\">pw</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#8BE9FD;font-style:italic\">pieceWork</span><span style=\"color:#F8F8F2\">) ([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, </span><span style=\"color:#8BE9FD;font-style:italic\">error</span><span style=\"color:#F8F8F2\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    state </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#8BE9FD;font-style:italic\"> pieceProgress</span><span style=\"color:#F8F8F2\">{</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        index:  pw.index,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        client: c,</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        buf:    </span><span style=\"color:#50FA7B\">make</span><span style=\"color:#F8F8F2\">([]</span><span style=\"color:#8BE9FD;font-style:italic\">byte</span><span style=\"color:#F8F8F2\">, pw.length),</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // Setting a deadline helps get unresponsive peers unstuck.</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">    // 30 seconds is more than enough time to download a 262 KB piece</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    c.Conn.</span><span style=\"color:#50FA7B\">SetDeadline</span><span style=\"color:#F8F8F2\">(time.</span><span style=\"color:#50FA7B\">Now</span><span style=\"color:#F8F8F2\">().</span><span style=\"color:#50FA7B\">Add</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#BD93F9\">30</span><span style=\"color:#FF79C6\"> *</span><span style=\"color:#F8F8F2\"> time.Second))</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    defer</span><span style=\"color:#F8F8F2\"> c.Conn.</span><span style=\"color:#50FA7B\">SetDeadline</span><span style=\"color:#F8F8F2\">(</span><span style=\"color:#8BE9FD;font-style:italic\">time</span><span style=\"color:#F8F8F2\">.</span><span style=\"color:#8BE9FD;font-style:italic\">Time</span><span style=\"color:#F8F8F2\">{}) </span><span style=\"color:#6272A4\">// Disable the deadline</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    for</span><span style=\"color:#F8F8F2\"> state.downloaded </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> pw.length {</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">        // If unchoked, send requests until we have enough unfulfilled requests</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#FF79C6\"> !</span><span style=\"color:#F8F8F2\">state.client.Choked {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            for</span><span style=\"color:#F8F8F2\"> state.backlog </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> MaxBacklog </span><span style=\"color:#FF79C6\">&#x26;&#x26;</span><span style=\"color:#F8F8F2\"> state.requested </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> pw.length {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">                blockSize </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> MaxBlockSize</span></span>\n<span class=\"line\"><span style=\"color:#6272A4\">                // Last block might be shorter than the typical block</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                if</span><span style=\"color:#F8F8F2\"> pw.length</span><span style=\"color:#FF79C6\">-</span><span style=\"color:#F8F8F2\">state.requested </span><span style=\"color:#FF79C6\">&#x3C;</span><span style=\"color:#F8F8F2\"> blockSize {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">                    blockSize </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> pw.length </span><span style=\"color:#FF79C6\">-</span><span style=\"color:#F8F8F2\"> state.requested</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">                }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">                err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> c.</span><span style=\"color:#50FA7B\">SendRequest</span><span style=\"color:#F8F8F2\">(pw.index, state.requested, blockSize)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">                    return</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">                }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">                state.backlog</span><span style=\"color:#FF79C6\">++</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">                state.requested </span><span style=\"color:#FF79C6\">+=</span><span style=\"color:#F8F8F2\"> blockSize</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">            }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> state.</span><span style=\"color:#50FA7B\">readMessage</span><span style=\"color:#F8F8F2\">()</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">        if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">            return</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\">, err</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    return</span><span style=\"color:#F8F8F2\"> state.buf, </span><span style=\"color:#BD93F9\">nil</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h4 id=\"maingo\">main.go</h4>\n<p>This is a short one. We’re almost there.</p>\n<pre class=\"astro-code dracula\" style=\"background-color:#282A36;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#FF79C6\">package</span><span style=\"color:#8BE9FD;font-style:italic\"> main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">import</span><span style=\"color:#F8F8F2\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">    \"</span><span style=\"color:#F1FA8C\">log</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E9F284\">    \"</span><span style=\"color:#F1FA8C\">os</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E9F284\">    \"</span><span style=\"color:#F1FA8C\">github.com/veggiedefender/torrent-client/torrentfile</span><span style=\"color:#E9F284\">\"</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">func</span><span style=\"color:#50FA7B\"> main</span><span style=\"color:#F8F8F2\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    inPath </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> os.Args[</span><span style=\"color:#BD93F9\">1</span><span style=\"color:#F8F8F2\">]</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    outPath </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> os.Args[</span><span style=\"color:#BD93F9\">2</span><span style=\"color:#F8F8F2\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    tf, err </span><span style=\"color:#FF79C6\">:=</span><span style=\"color:#F8F8F2\"> torrentfile.</span><span style=\"color:#50FA7B\">Open</span><span style=\"color:#F8F8F2\">(inPath)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        log.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    err </span><span style=\"color:#FF79C6\">=</span><span style=\"color:#F8F8F2\"> tf.</span><span style=\"color:#50FA7B\">DownloadToFile</span><span style=\"color:#F8F8F2\">(outPath)</span></span>\n<span class=\"line\"><span style=\"color:#FF79C6\">    if</span><span style=\"color:#F8F8F2\"> err </span><span style=\"color:#FF79C6\">!=</span><span style=\"color:#BD93F9\"> nil</span><span style=\"color:#F8F8F2\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">        log.</span><span style=\"color:#50FA7B\">Fatal</span><span style=\"color:#F8F8F2\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">    }</span></span>\n<span class=\"line\"><span style=\"color:#F8F8F2\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<script id=\"asciicast-xqRSB0Jec8RN91Zt89rbb9PcL\" src=\"https://asciinema.org/a/xqRSB0Jec8RN91Zt89rbb9PcL.js\" async></script>\n<h2 id=\"this-isnt-the-full-story\">This isn’t the full story</h2>\n<p>For brevity, I included only a few of the important snippets of code. Notably, I left out all the glue code, parsing, unit tests, and the boring parts that build character. View my <a href=\"https://github.com/veggiedefender/torrent-client\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">full implementation</a> if you’re interested.</p>";

				const frontmatter$5 = {"title":"Building a BitTorrent Client","description":"Learn everything you need to know about BitTorrent by writing a client in Go","authorId":"jesse-li","seo":{"title":"Building a BitTorrent Client - roadmap.sh","description":"Learn everything you need to know about BitTorrent by writing a client in Go"},"isNew":false,"canonicalUrl":"https://blog.jse.li/posts/torrent/","type":"textual","date":"2021-01-17T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$5 = "/workspaces/developer-roadmap/src/data/guides/torrent-client.md";
				const url$5 = undefined;
				function rawContent$5() {
					return "\nBitTorrent is a protocol for downloading and distributing files across the Internet. In contrast with the traditional client/server relationship, in which downloaders connect to a central server (for example: watching a movie on Netflix, or loading the web page you're reading now), participants in the BitTorrent network, called **peers**, download pieces of files from _each other_—this is what makes it a **peer-to-peer** protocol. In this article we will investigate how this works, and build our own client that can find peers and exchange data between them.\n\n![diagram showing the difference between client/server (all clients connecting to one server) and peer-to-peer (peers connecting to each other) relationships](/guides/torrent-client/client-server-p2p.png)\n\nThe protocol evolved organically over the past 20 years, and various people and organizations added extensions for features like encryption, private torrents, and new ways of finding peers. We'll be implementing the [original spec](https://www.bittorrent.org/beps/bep_0003.html) from 2001 to keep this a weekend-sized project.\n\nI'll be using a [Debian ISO](https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/#indexlist) file as my guinea pig because it's big, but not huge, at 350MB. As a popular Linux distribution, there will be lots of fast and cooperative peers for us to connect to. And we'll avoid the legal and ethical issues related to downloading pirated content.\n\n## Finding peers\n\nHere’s a problem: we want to download a file with BitTorrent, but it’s a peer-to-peer protocol and we have no idea where to find peers to download it from. This is a lot like moving to a new city and trying to make friends—maybe we’ll hit up a local pub or a meetup group! Centralized locations like these are the big idea behind trackers, which are central servers that introduce peers to each other. They’re just web servers running over HTTP, and you can find Debian’s at http://bttracker.debian.org:6969/\n\n![illustration of a desktop computer and laptop sitting at a pub](/guides/torrent-client/trackers.png)\n\nOf course, these central servers are liable to get raided by the feds if they facilitate peers exchanging illegal content. You may remember reading about trackers like TorrentSpy, Popcorn Time, and KickassTorrents getting seized and shut down. New methods cut out the middleman by making even **peer discovery** a distributed process. We won't be implementing them, but if you're interested, some terms you can research are **DHT**, **PEX**, and **magnet links**.\n\n### Parsing a .torrent file\n\nA .torrent file describes the contents of a torrentable file and information for connecting to a tracker. It's all we need in order to kickstart the process of downloading a torrent. Debian's .torrent file looks like this:\n\n```markdown\nd8:announce41:http://bttracker.debian.org:6969/announce7:comment35:\"Debian CD from cdimage.debian.org\"13:creation datei1573903810e9:httpseedsl145:https://cdimage.debian.org/cdimage/release/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso145:https://cdimage.debian.org/cdimage/archive/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.isoe4:infod6:lengthi351272960e4:name31:debian-10.2.0-amd64-netinst.iso12:piece lengthi262144e6:pieces26800:�\u001f�\u000f���PS�^�� (binary blob of the hashes of each piece)ee\n```\n\nThat mess is encoded in a format called **Bencode** (pronounced _bee-encode_), and we'll need to decode it.\n\nBencode can encode roughly the same types of structures as JSON—strings, integers, lists, and dictionaries. Bencoded data is not as human-readable/writable as JSON, but it can efficiently handle binary data and it's really simple to parse from a stream. Strings come with a length prefix, and look like `4:spam`. Integers go between _start_ and _end_ markers, so `7` would encode to `i7e`. Lists and dictionaries work in a similar way: `l4:spami7ee` represents `['spam', 7]`, while `d4:spami7ee` means `{spam: 7}`.\n\nIn a prettier format, our .torrent file looks like this:\n\n```markdown\nd\n8:announce\n41:http://bttracker.debian.org:6969/announce\n7:comment\n35:\"Debian CD from cdimage.debian.org\"\n13:creation date\ni1573903810e\n4:info\nd\n6:length\ni351272960e\n4:name\n31:debian-10.2.0-amd64-netinst.iso\n12:piece length\ni262144e\n6:pieces\n26800:�\u001f�\u000f���PS�^�� (binary blob of the hashes of each piece)\ne\ne\n```\n\nIn this file, we can spot the URL of the tracker, the creation date (as a Unix timestamp), the name and size of the file, and a big binary blob containing the SHA-1 hashes of each **piece**, which are equally-sized parts of the file we want to download. The exact size of a piece varies between torrents, but they are usually somewhere between 256KB and 1MB. This means that a large file might be made up of _thousands_ of pieces. We'll download these pieces from our peers, check them against the hashes from our torrent file, assemble them together, and boom, we've got a file!\n\n![\"illustration of a file being cut with scissors into multiple pieces, starting with piece 0](/guides/torrent-client/pieces.png)\n\nThis mechanism allows us to verify the integrity of each piece as we go. It makes BitTorrent resistant to accidental corruption or intentional **torrent poisoning**. Unless an attacker is capable of breaking SHA-1 with a preimage attack, we will get exactly the content we asked for.\n\nIt would be really fun to write a bencode parser, but parsing isn't our focus today. But I found Fredrik Lundh's [50 line parser](https://effbot.org/zone/bencode.htm) to be especially illuminating. For this project, I used [github.com/jackpal/bencode-go](https://github.com/jackpal/bencode-go):\n\n```go\nimport (\n    \"github.com/jackpal/bencode-go\"\n)\n\ntype bencodeInfo struct {\n    Pieces      string `bencode:\"pieces\"`\n    PieceLength int    `bencode:\"piece length\"`\n    Length      int    `bencode:\"length\"`\n    Name        string `bencode:\"name\"`\n}\n\ntype bencodeTorrent struct {\n    Announce string      `bencode:\"announce\"`\n    Info     bencodeInfo `bencode:\"info\"`\n}\n\n// Open parses a torrent file\nfunc Open(r io.Reader) (*bencodeTorrent, error) {\n    bto := bencodeTorrent{}\n    err := bencode.Unmarshal(r, &bto)\n    if err != nil {\n        return nil, err\n    }\n    return &bto, nil\n}\n```\n\nBecause I like to keep my structures relatively flat, and I like to keep my application structs separate from my serialization structs, I exported a different, flatter struct named `TorrentFile` and wrote a few helper functions to convert between the two.\n\nNotably, I split `pieces` (previously a string) into a slice of hashes (each `[20]byte`) so that I can easily access individual hashes later. I also computed the SHA-1 hash of the entire bencoded `info` dict (the one which contained the name, size, and piece hashes). We know this as the **infohash** and it uniquely identifies files when we talk to trackers and peers. More on this later.\n\n![a name tag saying 'Hello my name is 86d4c80024a469be4c50bc5a102cf71780310074'](/guides/torrent-client/info-hash.png)\n\n```go\ntype TorrentFile struct {\n    Announce    string\n    InfoHash    [20]byte\n    PieceHashes [][20]byte\n    PieceLength int\n    Length      int\n    Name        string\n}\n\nfunc (bto *bencodeTorrent) toTorrentFile() (*TorrentFile, error) {\n    // ...\n}\n```\n\n### Retrieving peers from the tracker\n\nNow that we have information about the file and its tracker, let's talk to the tracker to **announce** our presence as a peer and to retrieve a list of other peers. We just need to make a GET request to the `announce` URL supplied in the .torrent file, with a few query parameters:\n\n```go\nfunc (t *TorrentFile) buildTrackerURL(peerID [20]byte, port uint16) (string, error) {\n    base, err := url.Parse(t.Announce)\n    if err != nil {\n        return \"\", err\n    }\n    params := url.Values{\n        \"info_hash\":  []string{string(t.InfoHash[:])},\n        \"peer_id\":    []string{string(peerID[:])},\n        \"port\":       []string{strconv.Itoa(int(Port))},\n        \"uploaded\":   []string{\"0\"},\n        \"downloaded\": []string{\"0\"},\n        \"compact\":    []string{\"1\"},\n        \"left\":       []string{strconv.Itoa(t.Length)},\n    }\n    base.RawQuery = params.Encode()\n    return base.String(), nil\n}\n```\n\nThe important ones:\n\n- **info_hash**: Identifies the _file_ we're trying to download. It's the infohash we calculated earlier from the bencoded `info` dict. The tracker will use this to figure out which peers to show us.\n- **peer_id**: A 20 byte name to identify _ourselves_ to trackers and peers. We'll just generate 20 random bytes for this. Real BitTorrent clients have IDs like `-TR2940-k8hj0wgej6ch` which identify the client software and version—in this case, TR2940 stands for Transmission client 2.94.\n\n![a file with a name tag saying 'info_hash' and a person with a name tag 'peer_id'](/guides/torrent-client/info-hash-peer-id.png)\n\n### Parsing the tracker response\n\nWe get back a bencoded response:\n\n```markdown\nd\n8:interval\ni900e\n5:peers\n252:(another long binary blob)\ne\n```\n\n`Interval` tells us how often we're supposed to connect to the tracker again to refresh our list of peers. A value of 900 means we should reconnect every 15 minutes (900 seconds).\n\n`Peers` is another long binary blob containing the IP addresses of each peer. It's made out of **groups of six bytes**. The first four bytes in each group represent the peer's IP address—each byte represents a number in the IP. The last two bytes represent the port, as a big-endian `uint16`. **Big-endian**, or **network order**, means that we can interpret a group of bytes as an integer by just squishing them together left to right. For example, the bytes `0x1A`, `0xE1` make `0x1AE1`, or 6881 in decimal.\n\n![diagram showing how 192, 0, 2, 123, 0x1A, 0xE1 can be interpreted as 192.0.1.123:6881](/guides/torrent-client/address.png)\n\n```go\n// Peer encodes connection information for a peer\ntype Peer struct {\n    IP   net.IP\n    Port uint16\n}\n\n// Unmarshal parses peer IP addresses and ports from a buffer\nfunc Unmarshal(peersBin []byte) ([]Peer, error) {\n    const peerSize = 6 // 4 for IP, 2 for port\n    numPeers := len(peersBin) / peerSize\n    if len(peersBin)%peerSize != 0 {\n        err := fmt.Errorf(\"Received malformed peers\")\n        return nil, err\n    }\n    peers := make([]Peer, numPeers)\n    for i := 0; i < numPeers; i++ {\n        offset := i * peerSize\n        peers[i].IP = net.IP(peersBin[offset : offset+4])\n        peers[i].Port = binary.BigEndian.Uint16(peersBin[offset+4 : offset+6])\n    }\n    return peers, nil\n}\n```\n\n## Downloading from peers\n\nNow that we have a list of peers, it's time to connect with them and start downloading pieces! We can break down the process into a few steps. For each peer, we want to:\n\n1. Start a TCP connection with the peer. This is like starting a phone call.\n2. Complete a two-way BitTorrent **handshake**. _\"Hello?\" \"Hello.\"_\n3. Exchange **messages** to download **pieces**. _\"I'd like piece #231 please.\"_\n\n## Start a TCP connection\n\n```go\nconn, err := net.DialTimeout(\"tcp\", peer.String(), 3*time.Second)\nif err != nil {\n    return nil, err\n}\n```\n\nI set a timeout so that I don't waste too much time on peers that aren't going to let me connect. For the most part, it's a pretty standard TCP connection.\n\n### Complete the handshake\n\nWe've just set up a connection with a peer, but we want to do a handshake to validate our assumptions that the peer\n\n- can communicate using the BitTorrent protocol\n- is able to understand and respond to our messages\n- has the file that we want, or at least knows what we're talking about\n\n![Two computers communicating. One asks 'do you speak BitTorrent and have this file?' and the other replies 'I speak BitTorrent and have that file'](/guides/torrent-client/handshake.png)\n\nMy father told me that the secret to a good handshake is a firm grip and eye contact. The secret to a good BitTorrent handshake is that it's made up of five parts:\n\n1. The length of the protocol identifier, which is always 19 (0x13 in hex)\n2. The protocol identifier, called the **pstr** which is always `BitTorrent protocol`\n3. Eight **reserved bytes**, all set to 0. We'd flip some of them to 1 to indicate that we support certain [extensions](http://www.bittorrent.org/beps/bep_0010.html). But we don't, so we'll keep them at 0.\n4. The **infohash** that we calculated earlier to identify which file we want\n5. The **Peer ID** that we made up to identify ourselves\n\nPut together, a handshake string might look like this:\n\n```markdown\n\\x13BitTorrent protocol\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x86\\xd4\\xc8\\x00\\x24\\xa4\\x69\\xbe\\x4c\\x50\\xbc\\x5a\\x10\\x2c\\xf7\\x17\\x80\\x31\\x00\\x74-TR2940-k8hj0wgej6ch\n```\n\nAfter we send a handshake to our peer, we should receive a handshake back in the same format. The infohash we get back should match the one we sent so that we know that we're talking about the same file. If everything goes as planned, we're good to go. If not, we can sever the connection because there's something wrong. _\"Hello?\" \"这是谁？ 你想要什么？\" \"Okay, wow, wrong number.\"_\n\nIn our code, let's make a struct to represent a handshake, and write a few methods for serializing and reading them:\n\n```go\n// A Handshake is a special message that a peer uses to identify itself\ntype Handshake struct {\n    Pstr     string\n    InfoHash [20]byte\n    PeerID   [20]byte\n}\n\n// Serialize serializes the handshake to a buffer\nfunc (h *Handshake) Serialize() []byte {\n    buf := make([]byte, len(h.Pstr)+49)\n    buf[0] = byte(len(h.Pstr))\n    curr := 1\n    curr += copy(buf[curr:], h.Pstr)\n    curr += copy(buf[curr:], make([]byte, 8)) // 8 reserved bytes\n    curr += copy(buf[curr:], h.InfoHash[:])\n    curr += copy(buf[curr:], h.PeerID[:])\n    return buf\n}\n\n// Read parses a handshake from a stream\nfunc Read(r io.Reader) (*Handshake, error) {\n    // Do Serialize(), but backwards\n    // ...\n}\n```\n\n### Send and receive messages\n\nOnce we've completed the initial handshake, we can send and receive **messages**. Well, not quite—if the other peer isn't ready to accept messages, we can't send any until they tell us they're ready. In this state, we're considered **choked** by the other peer. They'll send us an **unchoke** message to let us know that we can begin asking them for data. By default, we assume that we're choked until proven otherwise.\n\nOnce we've been unchoked, we can then begin sending **requests** for pieces, and they can send us messages back containing pieces.\n\n![\"A cartoon in which person 1 says 'hello I would like piece number—' and person 2 grabs him by the neck and says '00 00 00 01 00 (choke)'](/guides/torrent-client/choke.png)\n\n#### Interpreting messages\n\nA message has a length, an **ID** and a **payload**. On the wire, it looks like:\n\n![A message with 4 byte for the length, 1 byte for ID, and an optional payload](/guides/torrent-client/message.png)\n\nA message starts with a length indicator which tells us how many bytes long the message will be. It's a 32-bit integer, meaning it's made out of four bytes smooshed together in big-endian order. The next byte, the **ID**, tells us which type of message we're receiving—for example, a `2` byte means \"interested.\" Finally, the optional **payload** fills out the remaining length of the message.\n\n```go\ntype messageID uint8\n\nconst (\n    MsgChoke         messageID = 0\n    MsgUnchoke       messageID = 1\n    MsgInterested    messageID = 2\n    MsgNotInterested messageID = 3\n    MsgHave          messageID = 4\n    MsgBitfield      messageID = 5\n    MsgRequest       messageID = 6\n    MsgPiece         messageID = 7\n    MsgCancel        messageID = 8\n)\n\n// Message stores ID and payload of a message\ntype Message struct {\n    ID      messageID\n    Payload []byte\n}\n\n// Serialize serializes a message into a buffer of the form\n// <length prefix><message ID><payload>\n// Interprets `nil` as a keep-alive message\nfunc (m *Message) Serialize() []byte {\n    if m == nil {\n        return make([]byte, 4)\n    }\n    length := uint32(len(m.Payload) + 1) // +1 for id\n    buf := make([]byte, 4+length)\n    binary.BigEndian.PutUint32(buf[0:4], length)\n    buf[4] = byte(m.ID)\n    copy(buf[5:], m.Payload)\n    return buf\n}\n```\n\nTo read a message from a stream, we just follow the format of a message. We read four bytes and interpret them as a `uint32` to get the **length** of the message. Then, we read that number of bytes to get the **ID** (the first byte) and the **payload** (the remaining bytes).\n\n```go\n// Read parses a message from a stream. Returns `nil` on keep-alive message\nfunc Read(r io.Reader) (*Message, error) {\n    lengthBuf := make([]byte, 4)\n    _, err := io.ReadFull(r, lengthBuf)\n    if err != nil {\n        return nil, err\n    }\n    length := binary.BigEndian.Uint32(lengthBuf)\n\n    // keep-alive message\n    if length == 0 {\n        return nil, nil\n    }\n\n    messageBuf := make([]byte, length)\n    _, err = io.ReadFull(r, messageBuf)\n    if err != nil {\n        return nil, err\n    }\n\n    m := Message{\n        ID:      messageID(messageBuf[0]),\n        Payload: messageBuf[1:],\n    }\n\n    return &m, nil\n}\n```\n\n#### Bitfields\n\nOne of the most interesting types of message is the **bitfield**, which is a data structure that peers use to efficiently encode which pieces they are able to send us. A bitfield looks like a byte array, and to check which pieces they have, we just need to look at the positions of the _bits_ set to 1. You can think of it like the digital equivalent of a coffee shop loyalty card. We start with a blank card of all `0`, and flip bits to `1` to mark their positions as \"stamped.\"\n\n![a coffee shop loyalty card with eight slots, with stamps on the first four slots and a stamp on the second to last slot, represented as 11110010](/guides/torrent-client/bitfield.png)\n\nBy working with _bits_ instead of _bytes_, this data structure is super compact. We can stuff information about eight pieces in the space of a single byte—the size of a `bool`. The tradeoff is that accessing values becomes a little more tricky. The smallest unit of memory that computers can address are bytes, so to get to our bits, we have to do some bitwise manipulation:\n\n```go\n// A Bitfield represents the pieces that a peer has\ntype Bitfield []byte\n\n// HasPiece tells if a bitfield has a particular index set\nfunc (bf Bitfield) HasPiece(index int) bool {\n    byteIndex := index / 8\n    offset := index % 8\n    return bf[byteIndex]>>(7-offset)&1 != 0\n}\n\n// SetPiece sets a bit in the bitfield\nfunc (bf Bitfield) SetPiece(index int) {\n    byteIndex := index / 8\n    offset := index % 8\n    bf[byteIndex] |= 1 << (7 - offset)\n}\n```\n\n### Putting it all together\n\nWe now have all the tools we need to download a torrent: we have a list of peers obtained from the tracker, and we can communicate with them by dialing a TCP connection, initiating a handshake, and sending and receiving messages. Our last big problems are handling the **concurrency** involved in talking to multiple peers at once, and managing the **state** of our peers as we interact with them. These are both classically Hard problems.\n\n#### Managing concurrency: channels as queues\n\nIn Go, we [share memory by communicating](https://blog.golang.org/share-memory-by-communicating), and we can think of a Go channel as a cheap thread-safe queue.\n\nWe'll set up two channels to synchronize our concurrent workers: one for dishing out work (pieces to download) between peers, and another for collecting downloaded pieces. As downloaded pieces come in through the results channel, we can copy them into a buffer to start assembling our complete file.\n\n```go\n// Init queues for workers to retrieve work and send results\nworkQueue := make(chan *pieceWork, len(t.PieceHashes))\nresults := make(chan *pieceResult)\nfor index, hash := range t.PieceHashes {\n    length := t.calculatePieceSize(index)\n    workQueue <- &pieceWork{index, hash, length}\n}\n\n// Start workers\nfor _, peer := range t.Peers {\n    go t.startDownloadWorker(peer, workQueue, results)\n}\n\n// Collect results into a buffer until full\nbuf := make([]byte, t.Length)\ndonePieces := 0\nfor donePieces < len(t.PieceHashes) {\n    res := <-results\n    begin, end := t.calculateBoundsForPiece(res.index)\n    copy(buf[begin:end], res.buf)\n    donePieces++\n}\nclose(workQueue)\n```\n\nWe'll spawn a worker goroutine for each peer we've received from the tracker. It'll connect and handshake with the peer, and then start retrieving work from the `workQueue`, attempting to download it, and sending downloaded pieces back through the `results` channel.\n\n![a flow chart of the download strategy](/guides/torrent-client/download.png)\n\n```go\nfunc (t *Torrent) startDownloadWorker(peer peers.Peer, workQueue chan *pieceWork, results chan *pieceResult) {\n    c, err := client.New(peer, t.PeerID, t.InfoHash)\n    if err != nil {\n        log.Printf(\"Could not handshake with %s. Disconnecting\\n\", peer.IP)\n        return\n    }\n    defer c.Conn.Close()\n    log.Printf(\"Completed handshake with %s\\n\", peer.IP)\n\n    c.SendUnchoke()\n    c.SendInterested()\n\n    for pw := range workQueue {\n        if !c.Bitfield.HasPiece(pw.index) {\n            workQueue <- pw // Put piece back on the queue\n            continue\n        }\n\n        // Download the piece\n        buf, err := attemptDownloadPiece(c, pw)\n        if err != nil {\n            log.Println(\"Exiting\", err)\n            workQueue <- pw // Put piece back on the queue\n            return\n        }\n\n        err = checkIntegrity(pw, buf)\n        if err != nil {\n            log.Printf(\"Piece #%d failed integrity check\\n\", pw.index)\n            workQueue <- pw // Put piece back on the queue\n            continue\n        }\n\n        c.SendHave(pw.index)\n        results <- &pieceResult{pw.index, buf}\n    }\n}\n```\n\n#### Managing state\n\nWe'll keep track of each peer in a struct, and modify that struct as we read messages. It'll include data like how much we've downloaded from the peer, how much we've requested from them, and whether we're choked. If we wanted to scale this further, we could formalize this as a finite state machine. But a struct and a switch are good enough for now.\n\n```go\ntype pieceProgress struct {\n    index      int\n    client     *client.Client\n    buf        []byte\n    downloaded int\n    requested  int\n    backlog    int\n}\n\nfunc (state *pieceProgress) readMessage() error {\n    msg, err := state.client.Read() // this call blocks\n    switch msg.ID {\n    case message.MsgUnchoke:\n        state.client.Choked = false\n    case message.MsgChoke:\n        state.client.Choked = true\n    case message.MsgHave:\n        index, err := message.ParseHave(msg)\n        state.client.Bitfield.SetPiece(index)\n    case message.MsgPiece:\n        n, err := message.ParsePiece(state.index, state.buf, msg)\n        state.downloaded += n\n        state.backlog--\n    }\n    return nil\n}\n```\n\n#### Time to make requests!\n\nFiles, pieces, and piece hashes aren't the full story—we can go further by breaking down pieces into **blocks**. A block is a part of a piece, and we can fully define a block by the **index** of the piece it's part of, its byte **offset** within the piece, and its **length**. When we make requests for data from peers, we are actually requesting _blocks_. A block is usually 16KB large, meaning that a single 256 KB piece might actually require 16 requests.\n\nA peer is supposed to sever the connection if they receive a request for a block larger than 16KB. However, based on my experience, they're often perfectly happy to satisfy requests up to 128KB. I only got moderate gains in overall speed with larger block sizes, so it's probably better to stick with the spec.\n\n#### Pipelining\n\nNetwork round-trips are expensive, and requesting each block one by one will absolutely thank the performance of our download. Therefore, it's important to **pipeline** our requests such that we keep up a constant pressure of some number of unfulfilled requests. This can increase the throughput of our connection by an order of magnitude.\n\n![Two email threads simulating peer connections. The thread on the left shows a request followed by a reply, repeated three times. The thread on the left sends three requests, and receives three replies in quick succession.](/guides/torrent-client/pipelining.png)\n\nClassically, BitTorrent clients kept a queue of five pipelined requests, and that's the value I'll be using. I found that increasing it can up to double the speed of a download. Newer clients use an [adaptive](https://luminarys.com/posts/writing-a-bittorrent-client.html) queue size to better accommodate modern network speeds and conditions. This is definitely a parameter worth tweaking, and it's pretty low hanging fruit for future performance optimization.\n\n```go\n// MaxBlockSize is the largest number of bytes a request can ask for\nconst MaxBlockSize = 16384\n\n// MaxBacklog is the number of unfulfilled requests a client can have in its pipeline\nconst MaxBacklog = 5\n\nfunc attemptDownloadPiece(c *client.Client, pw *pieceWork) ([]byte, error) {\n    state := pieceProgress{\n        index:  pw.index,\n        client: c,\n        buf:    make([]byte, pw.length),\n    }\n\n    // Setting a deadline helps get unresponsive peers unstuck.\n    // 30 seconds is more than enough time to download a 262 KB piece\n    c.Conn.SetDeadline(time.Now().Add(30 * time.Second))\n    defer c.Conn.SetDeadline(time.Time{}) // Disable the deadline\n\n    for state.downloaded < pw.length {\n        // If unchoked, send requests until we have enough unfulfilled requests\n        if !state.client.Choked {\n            for state.backlog < MaxBacklog && state.requested < pw.length {\n                blockSize := MaxBlockSize\n                // Last block might be shorter than the typical block\n                if pw.length-state.requested < blockSize {\n                    blockSize = pw.length - state.requested\n                }\n\n                err := c.SendRequest(pw.index, state.requested, blockSize)\n                if err != nil {\n                    return nil, err\n                }\n                state.backlog++\n                state.requested += blockSize\n            }\n        }\n\n        err := state.readMessage()\n        if err != nil {\n            return nil, err\n        }\n    }\n\n    return state.buf, nil\n}\n```\n\n#### main.go\n\nThis is a short one. We're almost there.\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"os\"\n\n    \"github.com/veggiedefender/torrent-client/torrentfile\"\n)\n\nfunc main() {\n    inPath := os.Args[1]\n    outPath := os.Args[2]\n\n    tf, err := torrentfile.Open(inPath)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = tf.DownloadToFile(outPath)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n<script id=\"asciicast-xqRSB0Jec8RN91Zt89rbb9PcL\" src=\"https://asciinema.org/a/xqRSB0Jec8RN91Zt89rbb9PcL.js\" async></script>\n\n## This isn't the full story\n\nFor brevity, I included only a few of the important snippets of code. Notably, I left out all the glue code, parsing, unit tests, and the boring parts that build character. View my [full implementation](https://github.com/veggiedefender/torrent-client) if you're interested.\n";
				}
				function compiledContent$5() {
					return html$5;
				}
				function getHeadings$5() {
					return [{"depth":2,"slug":"finding-peers","text":"Finding peers"},{"depth":3,"slug":"parsing-a-torrent-file","text":"Parsing a .torrent file"},{"depth":3,"slug":"retrieving-peers-from-the-tracker","text":"Retrieving peers from the tracker"},{"depth":3,"slug":"parsing-the-tracker-response","text":"Parsing the tracker response"},{"depth":2,"slug":"downloading-from-peers","text":"Downloading from peers"},{"depth":2,"slug":"start-a-tcp-connection","text":"Start a TCP connection"},{"depth":3,"slug":"complete-the-handshake","text":"Complete the handshake"},{"depth":3,"slug":"send-and-receive-messages","text":"Send and receive messages"},{"depth":4,"slug":"interpreting-messages","text":"Interpreting messages"},{"depth":4,"slug":"bitfields","text":"Bitfields"},{"depth":3,"slug":"putting-it-all-together","text":"Putting it all together"},{"depth":4,"slug":"managing-concurrency-channels-as-queues","text":"Managing concurrency: channels as queues"},{"depth":4,"slug":"managing-state","text":"Managing state"},{"depth":4,"slug":"time-to-make-requests","text":"Time to make requests!"},{"depth":4,"slug":"pipelining","text":"Pipelining"},{"depth":4,"slug":"maingo","text":"main.go"},{"depth":2,"slug":"this-isnt-the-full-story","text":"This isn’t the full story"}];
				}

				const Content$5 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$5;
					content.file = file$5;
					content.url = url$5;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$5)}`;
				});

const __vite_glob_0_40 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$5,
	compiledContent: compiledContent$5,
	default: Content$5,
	file: file$5,
	frontmatter: frontmatter$5,
	getHeadings: getHeadings$5,
	rawContent: rawContent$5,
	url: url$5
}, Symbol.toStringTag, { value: 'Module' }));

const html$4 = "<p><a href=\"/guides/unfamiliar-codebase.png\"><img src=\"/guides/unfamiliar-codebase.png\" alt=\"Unfamiliar Codebase\"></a></p>";

				const frontmatter$4 = {"title":"Unfamiliar Codebase","description":"Tips on getting familiar with an unfamiliar codebase","authorId":"kamran","seo":{"title":"Unfamiliar Codebase - roadmap.sh","description":"Tips on getting familiar with an unfamiliar codebase"},"isNew":false,"type":"visual","date":"2021-05-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$4 = "/workspaces/developer-roadmap/src/data/guides/unfamiliar-codebase.md";
				const url$4 = undefined;
				function rawContent$4() {
					return "\n[![Unfamiliar Codebase](/guides/unfamiliar-codebase.png)](/guides/unfamiliar-codebase.png)\n";
				}
				function compiledContent$4() {
					return html$4;
				}
				function getHeadings$4() {
					return [];
				}

				const Content$4 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$4;
					content.file = file$4;
					content.url = url$4;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$4)}`;
				});

const __vite_glob_0_41 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$4,
	compiledContent: compiledContent$4,
	default: Content$4,
	file: file$4,
	frontmatter: frontmatter$4,
	getHeadings: getHeadings$4,
	rawContent: rawContent$4,
	url: url$4
}, Symbol.toStringTag, { value: 'Module' }));

const html$3 = "<p><a href=\"/guides/web-vitals.png\"><img src=\"/guides/web-vitals.png\" alt=\"Web Vitals\"></a></p>";

				const frontmatter$3 = {"title":"What are Web Vitals?","description":"Learn what are the core web vitals and how to measure them.","authorId":"kamran","seo":{"title":"What are Web Vitals? - roadmap.sh","description":"Learn what are the core web vitals and how to measure them."},"isNew":false,"type":"visual","date":"2021-09-05T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$3 = "/workspaces/developer-roadmap/src/data/guides/what-are-web-vitals.md";
				const url$3 = undefined;
				function rawContent$3() {
					return "\n[![Web Vitals](/guides/web-vitals.png)](/guides/web-vitals.png)\n";
				}
				function compiledContent$3() {
					return html$3;
				}
				function getHeadings$3() {
					return [];
				}

				const Content$3 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$3;
					content.file = file$3;
					content.url = url$3;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$3)}`;
				});

const __vite_glob_0_42 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$3,
	compiledContent: compiledContent$3,
	default: Content$3,
	file: file$3,
	frontmatter: frontmatter$3,
	getHeadings: getHeadings$3,
	rawContent: rawContent$3,
	url: url$3
}, Symbol.toStringTag, { value: 'Module' }));

const html$2 = "<p>Since the explosive growth of web-based applications, every developer stands to benefit from understanding how the Internet works. Through this article and its accompanying introductory series of short videos about the Internet from <a href=\"https://code.org\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">code.org</a>, you will learn the basics of the Internet and how it works. After going through this article, you will be able to answer the following questions:</p>\n<ul>\n<li>What is the Internet?</li>\n<li>How does the information move on the internet?</li>\n<li>How do the networks talk to each other and the protocols involved?</li>\n<li>What’s the relationship between packets, routers, and reliability?</li>\n<li>HTTP and the HTML – How are you viewing this webpage in your browser?</li>\n<li>How is the information transfer on the internet made secure?</li>\n<li>What is cybersecurity and what are some common internet crimes?</li>\n</ul>\n<h2 id=\"what-is-the-internet\">What is the Internet?</h2>\n<p>The Internet is a global network of computers connected to each other which communicate through a standardized set of protocols.</p>\n<p>In the video below, Vint Cerf, one of the “fathers of the internet,” explains the history of how the Internet works and how no one person or organization is really in charge of it.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/Dxcc6ycZ73M\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"wires-cables-and-wi-fi\">Wires, Cables, and Wi-Fi</h2>\n<p>Information on the Internet moves from one computer to another in the form of bits over various mediums, including Ethernet cables, fiber optic cables, and wireless signals (i.e., radio waves).</p>\n<p>In the video linked below, you will learn about the different mediums for data transfer on the Internet and the pros and cons for each.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZhEf7e4kopM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"ip-addresses-and-dns\">IP Addresses and DNS</h2>\n<p>Now that you know about the physical medium for the data transfer over the internet, it’s time to learn about the protocols involved. How does the information traverse from one computer to another in this massive global network of computers?</p>\n<p>In the video below, you will get a brief introduction to IP, DNS, and how these protocols make the Internet work.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/5o8CwafCxnU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"packets-routing-and-reliability\">Packets, Routing, and Reliability</h2>\n<p>Information transfer on the Internet from one computer to another does not need to follow a fixed path; in fact, it may change paths during the transfer. This information transfer is done in the form of packets and these packets may follow different routes depending on certain factors.</p>\n<p>In this video, you will learn about how the packets of information are routed from one computer to another to reach the destination.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/AYdF7b3nMto\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"http-and-html\">HTTP and HTML</h2>\n<p>HTTP is the standard protocol by which webpages are transferred over the Internet. The video below is a brief introduction to HTTP and how web browsers load websites for you.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/kBXQZMmiA4s\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"encryption-and-public-keys\">Encryption and Public Keys</h2>\n<p>Cryptography is what keeps our communication secure on the Internet. In this short video, you will learn the basics of cryptography, SSL/TLS, and how they help make the communication on the Internet secure.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZghMPWGXexs\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"cybersecurity-and-crime\">Cybersecurity and Crime</h2>\n<p>Cybersecurity refers to the protective measures against criminal activity accomplished through using a network, technological devices, and the internet.In this video, you will learn about the basics of cybersecurity and common cybercrimes.</p>\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/AuYNXgO_f3Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>And that wraps it up for this article. To learn more about the Internet, <a href=\"https://twitter.com/kamrify\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Kamran Ahmed</a> has a nice little guide on <a href=\"/guides/dns-in-one-picture\">DNS: How a website is found on the Internet</a>. Also, go through the episodes of <a href=\"https://howdns.works/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">howdns.works</a> and read this <a href=\"https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">cartoon intro to DNS over HTTPS</a>.</p>";

				const frontmatter$2 = {"title":"How does the internet work?","description":"Learn the basics of internet and everything involved with this short video series","authorId":"kamran","seo":{"title":"How does the internet work? - roadmap.sh","description":"Learn the basics of internet and everything involved with this short video series"},"isNew":false,"type":"textual","date":"2021-03-01T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file$2 = "/workspaces/developer-roadmap/src/data/guides/what-is-internet.md";
				const url$2 = undefined;
				function rawContent$2() {
					return "\nSince the explosive growth of web-based applications, every developer stands to benefit from understanding how the Internet works. Through this article and its accompanying introductory series of short videos about the Internet from [code.org](https://code.org), you will learn the basics of the Internet and how it works. After going through this article, you will be able to answer the following questions:\n\n- What is the Internet?\n- How does the information move on the internet?\n- How do the networks talk to each other and the protocols involved?\n- What's the relationship between packets, routers, and reliability?\n- HTTP and the HTML – How are you viewing this webpage in your browser?\n- How is the information transfer on the internet made secure?\n- What is cybersecurity and what are some common internet crimes?\n\n## What is the Internet?\n\nThe Internet is a global network of computers connected to each other which communicate through a standardized set of protocols.\n\nIn the video below, Vint Cerf, one of the \"fathers of the internet,\" explains the history of how the Internet works and how no one person or organization is really in charge of it.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/Dxcc6ycZ73M\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Wires, Cables, and Wi-Fi\n\nInformation on the Internet moves from one computer to another in the form of bits over various mediums, including Ethernet cables, fiber optic cables, and wireless signals (i.e., radio waves).\n\nIn the video linked below, you will learn about the different mediums for data transfer on the Internet and the pros and cons for each.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZhEf7e4kopM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## IP Addresses and DNS\n\nNow that you know about the physical medium for the data transfer over the internet, it's time to learn about the protocols involved. How does the information traverse from one computer to another in this massive global network of computers?\n\nIn the video below, you will get a brief introduction to IP, DNS, and how these protocols make the Internet work.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/5o8CwafCxnU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Packets, Routing, and Reliability\n\nInformation transfer on the Internet from one computer to another does not need to follow a fixed path; in fact, it may change paths during the transfer. This information transfer is done in the form of packets and these packets may follow different routes depending on certain factors.\n\nIn this video, you will learn about how the packets of information are routed from one computer to another to reach the destination.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/AYdF7b3nMto\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## HTTP and HTML\n\nHTTP is the standard protocol by which webpages are transferred over the Internet. The video below is a brief introduction to HTTP and how web browsers load websites for you.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/kBXQZMmiA4s\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Encryption and Public Keys\n\nCryptography is what keeps our communication secure on the Internet. In this short video, you will learn the basics of cryptography, SSL/TLS, and how they help make the communication on the Internet secure.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/ZghMPWGXexs\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Cybersecurity and Crime\n\nCybersecurity refers to the protective measures against criminal activity accomplished through using a network, technological devices, and the internet.In this video, you will learn about the basics of cybersecurity and common cybercrimes.\n\n<iframe class=\"w-full aspect-video mb-5\" width=\"100%\" height=\"400\" src=\"https://www.youtube.com/embed/AuYNXgO_f3Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nAnd that wraps it up for this article. To learn more about the Internet, [Kamran Ahmed](https://twitter.com/kamrify) has a nice little guide on [DNS: How a website is found on the Internet](/guides/dns-in-one-picture). Also, go through the episodes of [howdns.works](https://howdns.works/) and read this [cartoon intro to DNS over HTTPS](https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/).\n";
				}
				function compiledContent$2() {
					return html$2;
				}
				function getHeadings$2() {
					return [{"depth":2,"slug":"what-is-the-internet","text":"What is the Internet?"},{"depth":2,"slug":"wires-cables-and-wi-fi","text":"Wires, Cables, and Wi-Fi"},{"depth":2,"slug":"ip-addresses-and-dns","text":"IP Addresses and DNS"},{"depth":2,"slug":"packets-routing-and-reliability","text":"Packets, Routing, and Reliability"},{"depth":2,"slug":"http-and-html","text":"HTTP and HTML"},{"depth":2,"slug":"encryption-and-public-keys","text":"Encryption and Public Keys"},{"depth":2,"slug":"cybersecurity-and-crime","text":"Cybersecurity and Crime"}];
				}

				const Content$2 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$2;
					content.file = file$2;
					content.url = url$2;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$2)}`;
				});

const __vite_glob_0_43 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$2,
	compiledContent: compiledContent$2,
	default: Content$2,
	file: file$2,
	frontmatter: frontmatter$2,
	getHeadings: getHeadings$2,
	rawContent: rawContent$2,
	url: url$2
}, Symbol.toStringTag, { value: 'Module' }));

const html$1 = "<p><a href=\"/guides/sli-slo-sla.jpeg\"><img src=\"/guides/sli-slo-sla.jpeg\" alt=\"SLI vs SLO vs SLA\"></a></p>";

				const frontmatter$1 = {"title":"SLIs, SLOs and SLAs","description":"Learn what are different indicators for performance identification of any service.","authorId":"kamran","seo":{"title":"SLIs, SLOs and SLAs - roadmap.sh","description":"Learn what are different indicators for performance identification of any service."},"isNew":false,"type":"visual","date":"2021-08-31T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","visual-guide","guide-sitemap"]};
				const file$1 = "/workspaces/developer-roadmap/src/data/guides/what-is-sli-slo-sla.md";
				const url$1 = undefined;
				function rawContent$1() {
					return "\n[![SLI vs SLO vs SLA](/guides/sli-slo-sla.jpeg)](/guides/sli-slo-sla.jpeg)\n";
				}
				function compiledContent$1() {
					return html$1;
				}
				function getHeadings$1() {
					return [];
				}

				const Content$1 = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter$1;
					content.file = file$1;
					content.url = url$1;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html$1)}`;
				});

const __vite_glob_0_44 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content: Content$1,
	compiledContent: compiledContent$1,
	default: Content$1,
	file: file$1,
	frontmatter: frontmatter$1,
	getHeadings: getHeadings$1,
	rawContent: rawContent$1,
	url: url$1
}, Symbol.toStringTag, { value: 'Module' }));

const html = "<p>We all have heard the mantra <em>“build it and they will come”</em> many times. Stories of people building a startup or project and seemingly stumbling upon a goldmine aren’t few, but they aren’t the rule. These stories are still the exception in the mass of launched projects and startups.</p>\n<p>Before the <a href=\"https://en.wikipedia.org/wiki/Wright_brothers\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Wright brothers</a> built their Kitty Hawk, people generally believed heavy objects could not fly - physics simply forbade it. The idea of regularly boarding airplanes as we do it these days was unthinkable. It was considered an unrealistic daydream for humans to ever claim the sky. When the first airplanes took off, people were fascinated, of course. It was a topic people continued to talk about for ages. Technology had made something impossible possible. While the wording “build it and they will come” originated from the movie <a href=\"https://en.wikipedia.org/wiki/Field_of_Dreams\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Field of Dreams</a>, this and similar historic events gave birth to the idea behind it.</p>\n<p>The engineers’ and inventors’ dreams came true: spend time doing what you love while success follows magically. The internet and web-standards democratized access to this dream. But with it, the idea behind it faded and became less and less powerful. In 2020, there are very strong signs the popular saying isn’t correct anymore.</p>\n<h2 id=\"why-doesnt-build-it-and-they-will-come-work-anymore\">Why doesn’t “build it and they will come” work anymore?</h2>\n<p>There are a few reasons for working hard to make “build it and they will come” a thing of the past. This being said, it doesn’t mean you can’t succeed in building a side-project anymore. You’ve just got to adjust the way you are building it.</p>\n<h3 id=\"building-got-much-easier\">Building got much easier</h3>\n<p>As a software engineer, some websites are a blessing. Most of us couldn’t work without GitHub, Stackoverflow and of course Google, ahem, DuckDuckGo. These powerful sites help us to solve problems, learn new techniques and find the right libraries to make building projects easier. If any of these sites are down, most engineers take a break and go for a coffee instead of trying to continue working. Combine this with more sophisticated web-standards and easier access to tooling, and you arrive at a world where building projects isn’t just a job for highly specialist developers anymore. Powerful frameworks such as <a href=\"https://laravel.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Laravel</a> and <a href=\"https://quasar.dev/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Quasar Framework</a> are available for anyone to build projects on - for free.</p>\n<p>In fact, building projects got to a point where some people simply build them as an exercise or hobby. If you spend some time browsing GitHub you will be surprised by the open source projects people built without any commercial goals. “Low code” and “No code” are the next wave of people building projects with a less technological background.</p>\n<h3 id=\"too-much-going-on-information-overload\">Too much going on: information overload</h3>\n<p>We are living in a world with information overload. In the online sphere, you can find a lot of useful information. But there is also a lot of noise. For each piece of information or advice, you can find a number of opposing statements. This is partly due to the fact that the internet made it much easier to publish and share information. Everyone has been given a voice - for good or bad. This makes it much harder to reach potential users. Your new project probably just drowns amongst kitten videos, opinions, and news. Never has the average lifetime of published content been so low. You’ve got to come up with a marketing plan before setting out on the journey.</p>\n<h3 id=\"smaller-problems\">Smaller Problems</h3>\n<p>Besides building is easier than ever before and attention is in short supply, there is another issue making the life of makers, inventors, and engineers harder: today’s problems are much smaller. Back when the previously mentioned Wright Brothers set out, they fascinated people with the problem they were aiming to address: flying. Unless your name is Elon, your problem is unlikely to attract many people naturally. As a solo developer or indie hacker, the chances are higher of having a much smaller problem in a niche (of a niche). With the information overload mentioned before, niches are pretty much the only way to build a side-project or startup and succeed.</p>\n<p>Does sound pretty grim for inventors, developers, and engineers? Well, yes and no. We’ve got to tweak the approach to get in front of the eye of potential users and customers.</p>\n<h2 id=\"how-to-market-your-project-nowadays\">How to market your project nowadays?</h2>\n<p>The very first step to improving the odds of success is <a href=\"https://peterthaleikis.com/business-idea-validation/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">idea validation</a>. While this sounds fairly obvious, many engineers and developers still don’t validate their ideas before starting to build the MVP. The result is another stale project and wasted effort. To succeed you need to work on marketing before you start building anything. In the link mentioned before, I describe my approach to validation and collecting useful marketing information at the same time.</p>\n<h3 id=\"build-your-audience-first-and-the-project-after\">Build your Audience first and the project after.</h3>\n<p>Build your audience before you build your project. Spend your time connecting with potential users, learning from their needs, and talking about their problems. This will help you market your project later on. The audience first, projects second. There are numerous ways to build an audience. One of the simplest and easiest is to start with a personal or <a href=\"https://startupnamecheck.com/blog/how-to-start-a-small-business-blog\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">project blog</a>.</p>\n<p>Don’t use Medium or a similar service - opt for a self-hosted blog as it allows you to build the blog freely to your needs and have decent links back to your project later on. Don’t forget to add a newsletter. Newsletters are a key to reconnecting in our world of short attention spans.</p>\n<h3 id=\"tool-by-tool\">Tool by Tool</h3>\n<p>Another approach is the “Tool by Tool” approach. I first noticed this approach being used by Shopify. The team at Shopify is providing little tools such as a <a href=\"https://hatchful.shopify.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">logo generator</a> and releasing these tools free for anyone to use. This not just builds goodwill with people; it also allows Shopify to attract powerful backlinks to their projects. As developers, we are in the perfect position to build such mini-tools. It boosts morale and drives attention at the same time.</p>\n<p>Spend some time evaluating where your project or product will deliver value to the end-user. Look at options to split off small, independent tools. Build these and launch them before launching the whole product. This allows you to practice launching and promoting your part-projects at the same time. With each backlink to your part-projects, you will enhance your ranking in Google. An example of a maker following this approach is <a href=\"https://kambanthemaker.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Kamban</a> with <a href=\"https://flatga.io/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">FlatGA</a>. He built FlatGA as phase one of a bigger project currently in development.</p>\n<h3 id=\"join-a-maker-community\">Join a Maker community</h3>\n<p>While you are building your part-projects, don’t forget to discuss the progress publicly. This helps to attract an audience around your work and makes the launches easier. You can use Twitter threads and Reddit posts to share updates. A maker community such as <a href=\"https://getmakerlog.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">makerlog</a> or <a href=\"https://wip.chat\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">WIP.chat</a> can also extend your reach. These allow you to get instant feedback, and keep yourself accountable and they will enhance your reach at the same time.</p>\n<h3 id=\"getting-ready-to-launch\">Getting ready to Launch</h3>\n<p>Launching seems like this special moment when you release your project into the wide world. Often this moment is combined with high expectations and developers consider launching their project the key - if not only - part of their approach to marketing. While launching can help to attract some initial customers, it shouldn’t be your only idea when it comes to marketing. You should also know that launching isn’t a single event. You can (and should) launch again and again. Every time you launch you are increasing the chance to reach more new customers. After the launch is before the launch.</p>\n<h3 id=\"marketing-is-an-on-going-fight\">Marketing Is an On-going Fight</h3>\n<p>Many developers plan to launch their product on a few sites and see where it takes their project from there on. This works well if your product goes viral by luck. A much more sustainable approach is constantly working a little on it. Marketing is most effective if done consistently. That holds true for blogging as well as most other forms of marketing. A simple approach to keep you on the path to marketing your project regularly is subscribing to a free <a href=\"https://wheretopost.email\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">newsletter with small marketing opportunities</a>. This way, you are regularly reminded and given bite-sized tasks to complete.</p>\n<h2 id=\"closing-words\">Closing Words</h2>\n<p>I hope the article helped you to wrap your head around the idea that building side-projects alone doesn’t solve any issues anymore. If you like what you’ve just read and want to read more, please consider subscribing to <a href=\"https://peterthaleikis.com/newsletter\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">my newsletter</a>. I’ll send out the occasional email about interesting new articles or side-projects.</p>\n<h2 id=\"about-the-author\">About the author</h2>\n<p><a href=\"https://peterthaleikis.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Peter Thaleikis</a> a software engineer and business owner. He has been developing web applications since around 2000. Before he started his own software development company <a href=\"https://bringyourownideas.com/\" rel=\"noopener noreferrer nofollow\" target=\"_blank\">Bring Your Own Ideas Ltd.</a>, he has been a Lead Developer for multiple organizations.</p>";

				const frontmatter = {"title":"Build it and they will come?","description":"Why “build it and they will come” alone won’t work anymore","authorId":"peter-thaleikis","seo":{"title":"Build it and they will come? - roadmap.sh","description":"Why “build it and they will come” alone won’t work anymore"},"isNew":false,"type":"textual","date":"2021-05-04T00:00:00.000Z","sitemap":{"priority":0.7,"changefreq":"weekly"},"tags":["guide","textual-guide","guide-sitemap"]};
				const file = "/workspaces/developer-roadmap/src/data/guides/why-build-it-and-they-will-come-wont-work-anymore.md";
				const url = undefined;
				function rawContent() {
					return "\nWe all have heard the mantra _\"build it and they will come\"_ many times. Stories of people building a startup or project and seemingly stumbling upon a goldmine aren't few, but they aren't the rule. These stories are still the exception in the mass of launched projects and startups.\n\nBefore the [Wright brothers](https://en.wikipedia.org/wiki/Wright_brothers) built their Kitty Hawk, people generally believed heavy objects could not fly - physics simply forbade it. The idea of regularly boarding airplanes as we do it these days was unthinkable. It was considered an unrealistic daydream for humans to ever claim the sky. When the first airplanes took off, people were fascinated, of course. It was a topic people continued to talk about for ages. Technology had made something impossible possible. While the wording \"build it and they will come\" originated from the movie [Field of Dreams](https://en.wikipedia.org/wiki/Field_of_Dreams), this and similar historic events gave birth to the idea behind it.\n\nThe engineers' and inventors' dreams came true: spend time doing what you love while success follows magically. The internet and web-standards democratized access to this dream. But with it, the idea behind it faded and became less and less powerful. In 2020, there are very strong signs the popular saying isn't correct anymore.\n\n## Why doesn't \"build it and they will come\" work anymore?\n\nThere are a few reasons for working hard to make \"build it and they will come\" a thing of the past. This being said, it doesn't mean you can't succeed in building a side-project anymore. You've just got to adjust the way you are building it.\n\n### Building got much easier\n\nAs a software engineer, some websites are a blessing. Most of us couldn't work without GitHub, Stackoverflow and of course Google, ahem, DuckDuckGo. These powerful sites help us to solve problems, learn new techniques and find the right libraries to make building projects easier. If any of these sites are down, most engineers take a break and go for a coffee instead of trying to continue working. Combine this with more sophisticated web-standards and easier access to tooling, and you arrive at a world where building projects isn't just a job for highly specialist developers anymore. Powerful frameworks such as [Laravel](https://laravel.com/) and [Quasar Framework](https://quasar.dev/) are available for anyone to build projects on - for free.\n\nIn fact, building projects got to a point where some people simply build them as an exercise or hobby. If you spend some time browsing GitHub you will be surprised by the open source projects people built without any commercial goals. \"Low code\" and \"No code\" are the next wave of people building projects with a less technological background.\n\n### Too much going on: information overload\n\nWe are living in a world with information overload. In the online sphere, you can find a lot of useful information. But there is also a lot of noise. For each piece of information or advice, you can find a number of opposing statements. This is partly due to the fact that the internet made it much easier to publish and share information. Everyone has been given a voice - for good or bad. This makes it much harder to reach potential users. Your new project probably just drowns amongst kitten videos, opinions, and news. Never has the average lifetime of published content been so low. You've got to come up with a marketing plan before setting out on the journey.\n\n### Smaller Problems\n\nBesides building is easier than ever before and attention is in short supply, there is another issue making the life of makers, inventors, and engineers harder: today's problems are much smaller. Back when the previously mentioned Wright Brothers set out, they fascinated people with the problem they were aiming to address: flying. Unless your name is Elon, your problem is unlikely to attract many people naturally. As a solo developer or indie hacker, the chances are higher of having a much smaller problem in a niche (of a niche). With the information overload mentioned before, niches are pretty much the only way to build a side-project or startup and succeed.\n\nDoes sound pretty grim for inventors, developers, and engineers? Well, yes and no. We've got to tweak the approach to get in front of the eye of potential users and customers.\n\n## How to market your project nowadays?\n\nThe very first step to improving the odds of success is [idea validation](https://peterthaleikis.com/business-idea-validation/). While this sounds fairly obvious, many engineers and developers still don't validate their ideas before starting to build the MVP. The result is another stale project and wasted effort. To succeed you need to work on marketing before you start building anything. In the link mentioned before, I describe my approach to validation and collecting useful marketing information at the same time.\n\n### Build your Audience first and the project after.\n\nBuild your audience before you build your project. Spend your time connecting with potential users, learning from their needs, and talking about their problems. This will help you market your project later on. The audience first, projects second. There are numerous ways to build an audience. One of the simplest and easiest is to start with a personal or [project blog](https://startupnamecheck.com/blog/how-to-start-a-small-business-blog).\n\nDon't use Medium or a similar service - opt for a self-hosted blog as it allows you to build the blog freely to your needs and have decent links back to your project later on. Don't forget to add a newsletter. Newsletters are a key to reconnecting in our world of short attention spans.\n\n### Tool by Tool\n\nAnother approach is the \"Tool by Tool\" approach. I first noticed this approach being used by Shopify. The team at Shopify is providing little tools such as a [logo generator](https://hatchful.shopify.com/) and releasing these tools free for anyone to use. This not just builds goodwill with people; it also allows Shopify to attract powerful backlinks to their projects. As developers, we are in the perfect position to build such mini-tools. It boosts morale and drives attention at the same time.\n\nSpend some time evaluating where your project or product will deliver value to the end-user. Look at options to split off small, independent tools. Build these and launch them before launching the whole product. This allows you to practice launching and promoting your part-projects at the same time. With each backlink to your part-projects, you will enhance your ranking in Google. An example of a maker following this approach is [Kamban](https://kambanthemaker.com/) with [FlatGA](https://flatga.io/). He built FlatGA as phase one of a bigger project currently in development.\n\n### Join a Maker community\n\nWhile you are building your part-projects, don't forget to discuss the progress publicly. This helps to attract an audience around your work and makes the launches easier. You can use Twitter threads and Reddit posts to share updates. A maker community such as [makerlog](https://getmakerlog.com/) or [WIP.chat](https://wip.chat) can also extend your reach. These allow you to get instant feedback, and keep yourself accountable and they will enhance your reach at the same time.\n\n### Getting ready to Launch\n\nLaunching seems like this special moment when you release your project into the wide world. Often this moment is combined with high expectations and developers consider launching their project the key - if not only - part of their approach to marketing. While launching can help to attract some initial customers, it shouldn't be your only idea when it comes to marketing. You should also know that launching isn't a single event. You can (and should) launch again and again. Every time you launch you are increasing the chance to reach more new customers. After the launch is before the launch.\n\n### Marketing Is an On-going Fight\n\nMany developers plan to launch their product on a few sites and see where it takes their project from there on. This works well if your product goes viral by luck. A much more sustainable approach is constantly working a little on it. Marketing is most effective if done consistently. That holds true for blogging as well as most other forms of marketing. A simple approach to keep you on the path to marketing your project regularly is subscribing to a free [newsletter with small marketing opportunities](https://wheretopost.email). This way, you are regularly reminded and given bite-sized tasks to complete.\n\n## Closing Words\n\nI hope the article helped you to wrap your head around the idea that building side-projects alone doesn't solve any issues anymore. If you like what you've just read and want to read more, please consider subscribing to [my newsletter](https://peterthaleikis.com/newsletter). I'll send out the occasional email about interesting new articles or side-projects.\n\n## About the author\n\n[Peter Thaleikis](https://peterthaleikis.com/) a software engineer and business owner. He has been developing web applications since around 2000. Before he started his own software development company [Bring Your Own Ideas Ltd.](https://bringyourownideas.com/), he has been a Lead Developer for multiple organizations.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"why-doesnt-build-it-and-they-will-come-work-anymore","text":"Why doesn’t “build it and they will come” work anymore?"},{"depth":3,"slug":"building-got-much-easier","text":"Building got much easier"},{"depth":3,"slug":"too-much-going-on-information-overload","text":"Too much going on: information overload"},{"depth":3,"slug":"smaller-problems","text":"Smaller Problems"},{"depth":2,"slug":"how-to-market-your-project-nowadays","text":"How to market your project nowadays?"},{"depth":3,"slug":"build-your-audience-first-and-the-project-after","text":"Build your Audience first and the project after."},{"depth":3,"slug":"tool-by-tool","text":"Tool by Tool"},{"depth":3,"slug":"join-a-maker-community","text":"Join a Maker community"},{"depth":3,"slug":"getting-ready-to-launch","text":"Getting ready to Launch"},{"depth":3,"slug":"marketing-is-an-on-going-fight","text":"Marketing Is an On-going Fight"},{"depth":2,"slug":"closing-words","text":"Closing Words"},{"depth":2,"slug":"about-the-author","text":"About the author"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

const __vite_glob_0_45 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_27 as A, __vite_glob_0_28 as B, __vite_glob_0_29 as C, __vite_glob_0_30 as D, __vite_glob_0_31 as E, __vite_glob_0_32 as F, __vite_glob_0_33 as G, __vite_glob_0_34 as H, __vite_glob_0_35 as I, __vite_glob_0_36 as J, __vite_glob_0_37 as K, __vite_glob_0_38 as L, __vite_glob_0_39 as M, __vite_glob_0_40 as N, __vite_glob_0_41 as O, __vite_glob_0_42 as P, __vite_glob_0_43 as Q, __vite_glob_0_44 as R, __vite_glob_0_45 as S, __vite_glob_0_0 as _, __vite_glob_0_1 as a, __vite_glob_0_2 as b, __vite_glob_0_3 as c, __vite_glob_0_4 as d, __vite_glob_0_5 as e, __vite_glob_0_6 as f, __vite_glob_0_7 as g, __vite_glob_0_8 as h, __vite_glob_0_9 as i, __vite_glob_0_10 as j, __vite_glob_0_11 as k, __vite_glob_0_12 as l, __vite_glob_0_13 as m, __vite_glob_0_14 as n, __vite_glob_0_15 as o, __vite_glob_0_16 as p, __vite_glob_0_17 as q, __vite_glob_0_18 as r, __vite_glob_0_19 as s, __vite_glob_0_20 as t, __vite_glob_0_21 as u, __vite_glob_0_22 as v, __vite_glob_0_23 as w, __vite_glob_0_24 as x, __vite_glob_0_25 as y, __vite_glob_0_26 as z };
